# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ApplicationVersion`.
# Please instead update this file by running `bin/tapioca dsl ApplicationVersion`.

class ApplicationVersion
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ApplicationVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::ApplicationVersion]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def fifth; end

    sig { returns(::ApplicationVersion) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::ApplicationVersion)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::ApplicationVersion) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::ApplicationVersion)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::ApplicationVersion) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::ApplicationVersion) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::ApplicationVersion) }
    def first!; end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def forty_two; end

    sig { returns(::ApplicationVersion) }
    def forty_two!; end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def fourth; end

    sig { returns(::ApplicationVersion) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::ApplicationVersion) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ApplicationVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::ApplicationVersion).void)
      ).returns(::ApplicationVersion)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ApplicationVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::ApplicationVersion).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def second; end

    sig { returns(::ApplicationVersion) }
    def second!; end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def second_to_last; end

    sig { returns(::ApplicationVersion) }
    def second_to_last!; end

    sig { returns(::ApplicationVersion) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::ApplicationVersion) }
    def take!; end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def third; end

    sig { returns(::ApplicationVersion) }
    def third!; end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def third_to_last; end

    sig { returns(::ApplicationVersion) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Application)) }
    def application; end

    sig { params(value: T.nilable(::Application)).void }
    def application=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Application) }
    def build_application(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ApplicationVersion) }
    def build_previous_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Application) }
    def create_application(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Application) }
    def create_application!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ApplicationVersion) }
    def create_previous_version(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::ApplicationVersion) }
    def create_previous_version!(*args, &blk); end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def previous_version; end

    sig { params(value: T.nilable(::ApplicationVersion)).void }
    def previous_version=(value); end

    sig { returns(T.nilable(::Application)) }
    def reload_application; end

    sig { returns(T.nilable(::ApplicationVersion)) }
    def reload_previous_version; end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::String) }
    def address; end

    sig { params(value: ::String).returns(::String) }
    def address=(value); end

    sig { returns(T::Boolean) }
    def address?; end

    sig { returns(T.nilable(::String)) }
    def address_before_last_save; end

    sig { returns(T.untyped) }
    def address_before_type_cast; end

    sig { returns(T::Boolean) }
    def address_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def address_changed?; end

    sig { returns(T.nilable(::String)) }
    def address_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def address_previous_change; end

    sig { returns(T::Boolean) }
    def address_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def address_previously_was; end

    sig { returns(T.nilable(::String)) }
    def address_was; end

    sig { void }
    def address_will_change!; end

    sig { returns(::Integer) }
    def application_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def application_id=(value); end

    sig { returns(T::Boolean) }
    def application_id?; end

    sig { returns(T.nilable(::Integer)) }
    def application_id_before_last_save; end

    sig { returns(T.untyped) }
    def application_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def application_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def application_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def application_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def application_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def application_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def application_id_previous_change; end

    sig { returns(T::Boolean) }
    def application_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def application_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def application_id_was; end

    sig { void }
    def application_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def comment_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def comment_url=(value); end

    sig { returns(T::Boolean) }
    def comment_url?; end

    sig { returns(T.nilable(::String)) }
    def comment_url_before_last_save; end

    sig { returns(T.untyped) }
    def comment_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def comment_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def comment_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def comment_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def comment_url_previous_change; end

    sig { returns(T::Boolean) }
    def comment_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def comment_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def comment_url_was; end

    sig { void }
    def comment_url_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T::Boolean) }
    def current; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def current=(value); end

    sig { returns(T::Boolean) }
    def current?; end

    sig { returns(T.nilable(T::Boolean)) }
    def current_before_last_save; end

    sig { returns(T.untyped) }
    def current_before_type_cast; end

    sig { returns(T::Boolean) }
    def current_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def current_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def current_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def current_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def current_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def current_previous_change; end

    sig { returns(T::Boolean) }
    def current_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def current_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def current_was; end

    sig { void }
    def current_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def date_received; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def date_received=(value); end

    sig { returns(T::Boolean) }
    def date_received?; end

    sig { returns(T.nilable(::Date)) }
    def date_received_before_last_save; end

    sig { returns(T.untyped) }
    def date_received_before_type_cast; end

    sig { returns(T::Boolean) }
    def date_received_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def date_received_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def date_received_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def date_received_changed?; end

    sig { returns(T.nilable(::Date)) }
    def date_received_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def date_received_previous_change; end

    sig { returns(T::Boolean) }
    def date_received_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def date_received_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def date_received_was; end

    sig { void }
    def date_received_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def date_scraped; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def date_scraped=(value); end

    sig { returns(T::Boolean) }
    def date_scraped?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_scraped_before_last_save; end

    sig { returns(T.untyped) }
    def date_scraped_before_type_cast; end

    sig { returns(T::Boolean) }
    def date_scraped_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def date_scraped_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def date_scraped_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def date_scraped_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_scraped_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def date_scraped_previous_change; end

    sig { returns(T::Boolean) }
    def date_scraped_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_scraped_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def date_scraped_was; end

    sig { void }
    def date_scraped_will_change!; end

    sig { returns(::String) }
    def description; end

    sig { params(value: ::String).returns(::String) }
    def description=(value); end

    sig { returns(T::Boolean) }
    def description?; end

    sig { returns(T.nilable(::String)) }
    def description_before_last_save; end

    sig { returns(T.untyped) }
    def description_before_type_cast; end

    sig { returns(T::Boolean) }
    def description_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def description_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def description_previous_change; end

    sig { returns(T::Boolean) }
    def description_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def description_previously_was; end

    sig { returns(T.nilable(::String)) }
    def description_was; end

    sig { void }
    def description_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(::String) }
    def info_url; end

    sig { params(value: ::String).returns(::String) }
    def info_url=(value); end

    sig { returns(T::Boolean) }
    def info_url?; end

    sig { returns(T.nilable(::String)) }
    def info_url_before_last_save; end

    sig { returns(T.untyped) }
    def info_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def info_url_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def info_url_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def info_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def info_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def info_url_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def info_url_previous_change; end

    sig { returns(T::Boolean) }
    def info_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def info_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def info_url_was; end

    sig { void }
    def info_url_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def lat; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def lat=(value); end

    sig { returns(T::Boolean) }
    def lat?; end

    sig { returns(T.nilable(::Float)) }
    def lat_before_last_save; end

    sig { returns(T.untyped) }
    def lat_before_type_cast; end

    sig { returns(T::Boolean) }
    def lat_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def lat_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def lat_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def lat_changed?; end

    sig { returns(T.nilable(::Float)) }
    def lat_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def lat_previous_change; end

    sig { returns(T::Boolean) }
    def lat_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def lat_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def lat_was; end

    sig { void }
    def lat_will_change!; end

    sig { returns(T.nilable(::Float)) }
    def lng; end

    sig { params(value: T.nilable(::Float)).returns(T.nilable(::Float)) }
    def lng=(value); end

    sig { returns(T::Boolean) }
    def lng?; end

    sig { returns(T.nilable(::Float)) }
    def lng_before_last_save; end

    sig { returns(T.untyped) }
    def lng_before_type_cast; end

    sig { returns(T::Boolean) }
    def lng_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def lng_change; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def lng_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def lng_changed?; end

    sig { returns(T.nilable(::Float)) }
    def lng_in_database; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def lng_previous_change; end

    sig { returns(T::Boolean) }
    def lng_previously_changed?; end

    sig { returns(T.nilable(::Float)) }
    def lng_previously_was; end

    sig { returns(T.nilable(::Float)) }
    def lng_was; end

    sig { void }
    def lng_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_from; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def on_notice_from=(value); end

    sig { returns(T::Boolean) }
    def on_notice_from?; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_from_before_last_save; end

    sig { returns(T.untyped) }
    def on_notice_from_before_type_cast; end

    sig { returns(T::Boolean) }
    def on_notice_from_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def on_notice_from_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def on_notice_from_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def on_notice_from_changed?; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_from_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def on_notice_from_previous_change; end

    sig { returns(T::Boolean) }
    def on_notice_from_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_from_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_from_was; end

    sig { void }
    def on_notice_from_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_to; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def on_notice_to=(value); end

    sig { returns(T::Boolean) }
    def on_notice_to?; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_to_before_last_save; end

    sig { returns(T.untyped) }
    def on_notice_to_before_type_cast; end

    sig { returns(T::Boolean) }
    def on_notice_to_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def on_notice_to_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def on_notice_to_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def on_notice_to_changed?; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_to_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def on_notice_to_previous_change; end

    sig { returns(T::Boolean) }
    def on_notice_to_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_to_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def on_notice_to_was; end

    sig { void }
    def on_notice_to_will_change!; end

    sig { returns(T.nilable(::String)) }
    def postcode; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def postcode=(value); end

    sig { returns(T::Boolean) }
    def postcode?; end

    sig { returns(T.nilable(::String)) }
    def postcode_before_last_save; end

    sig { returns(T.untyped) }
    def postcode_before_type_cast; end

    sig { returns(T::Boolean) }
    def postcode_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postcode_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postcode_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def postcode_changed?; end

    sig { returns(T.nilable(::String)) }
    def postcode_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def postcode_previous_change; end

    sig { returns(T::Boolean) }
    def postcode_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def postcode_previously_was; end

    sig { returns(T.nilable(::String)) }
    def postcode_was; end

    sig { void }
    def postcode_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def previous_version_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def previous_version_id=(value); end

    sig { returns(T::Boolean) }
    def previous_version_id?; end

    sig { returns(T.nilable(::Integer)) }
    def previous_version_id_before_last_save; end

    sig { returns(T.untyped) }
    def previous_version_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def previous_version_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def previous_version_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def previous_version_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def previous_version_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def previous_version_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def previous_version_id_previous_change; end

    sig { returns(T::Boolean) }
    def previous_version_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def previous_version_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def previous_version_id_was; end

    sig { void }
    def previous_version_id_will_change!; end

    sig { void }
    def restore_address!; end

    sig { void }
    def restore_application_id!; end

    sig { void }
    def restore_comment_url!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_current!; end

    sig { void }
    def restore_date_received!; end

    sig { void }
    def restore_date_scraped!; end

    sig { void }
    def restore_description!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_info_url!; end

    sig { void }
    def restore_lat!; end

    sig { void }
    def restore_lng!; end

    sig { void }
    def restore_on_notice_from!; end

    sig { void }
    def restore_on_notice_to!; end

    sig { void }
    def restore_postcode!; end

    sig { void }
    def restore_previous_version_id!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_suburb!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_address; end

    sig { returns(T::Boolean) }
    def saved_change_to_address?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_application_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_application_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_comment_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_comment_url?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_current; end

    sig { returns(T::Boolean) }
    def saved_change_to_current?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_date_received; end

    sig { returns(T::Boolean) }
    def saved_change_to_date_received?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_date_scraped; end

    sig { returns(T::Boolean) }
    def saved_change_to_date_scraped?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_description; end

    sig { returns(T::Boolean) }
    def saved_change_to_description?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_info_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_info_url?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_lat; end

    sig { returns(T::Boolean) }
    def saved_change_to_lat?; end

    sig { returns(T.nilable([T.nilable(::Float), T.nilable(::Float)])) }
    def saved_change_to_lng; end

    sig { returns(T::Boolean) }
    def saved_change_to_lng?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_on_notice_from; end

    sig { returns(T::Boolean) }
    def saved_change_to_on_notice_from?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_on_notice_to; end

    sig { returns(T::Boolean) }
    def saved_change_to_on_notice_to?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_postcode; end

    sig { returns(T::Boolean) }
    def saved_change_to_postcode?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_previous_version_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_previous_version_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_suburb; end

    sig { returns(T::Boolean) }
    def saved_change_to_suburb?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def state_changed?; end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { returns(T::Boolean) }
    def state_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def suburb; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def suburb=(value); end

    sig { returns(T::Boolean) }
    def suburb?; end

    sig { returns(T.nilable(::String)) }
    def suburb_before_last_save; end

    sig { returns(T.untyped) }
    def suburb_before_type_cast; end

    sig { returns(T::Boolean) }
    def suburb_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suburb_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suburb_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def suburb_changed?; end

    sig { returns(T.nilable(::String)) }
    def suburb_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def suburb_previous_change; end

    sig { returns(T::Boolean) }
    def suburb_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def suburb_previously_was; end

    sig { returns(T.nilable(::String)) }
    def suburb_was; end

    sig { void }
    def suburb_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_address?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_application_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_comment_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_current?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_date_received?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_date_scraped?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_description?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_info_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lat?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_lng?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_on_notice_from?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_on_notice_to?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_postcode?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_previous_version_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_suburb?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ApplicationVersion } }

    sig { returns(T::Array[::ApplicationVersion]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::ApplicationVersion } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::ApplicationVersion } }

    sig do
      params(
        records: T.any(::ApplicationVersion, T::Enumerable[T.any(::ApplicationVersion, T::Enumerable[::ApplicationVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::ApplicationVersion, T::Enumerable[T.any(::ApplicationVersion, T::Enumerable[::ApplicationVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::ApplicationVersion, T::Enumerable[T.any(::ApplicationVersion, T::Enumerable[::ApplicationVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::ApplicationVersion, Integer, String, T::Enumerable[T.any(::ApplicationVersion, Integer, String, T::Enumerable[::ApplicationVersion])])
      ).returns(T::Array[::ApplicationVersion])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::ApplicationVersion, Integer, String, T::Enumerable[T.any(::ApplicationVersion, Integer, String, T::Enumerable[::ApplicationVersion])])
      ).returns(T::Array[::ApplicationVersion])
    end
    def destroy(*records); end

    sig { returns(T::Array[::ApplicationVersion]) }
    def load_target; end

    sig do
      params(
        records: T.any(::ApplicationVersion, T::Enumerable[T.any(::ApplicationVersion, T::Enumerable[::ApplicationVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::ApplicationVersion, T::Enumerable[T.any(::ApplicationVersion, T::Enumerable[::ApplicationVersion])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::ApplicationVersion, T::Enumerable[T.any(::ApplicationVersion, T::Enumerable[::ApplicationVersion])])
      ).returns(T::Array[::ApplicationVersion])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::ApplicationVersion]) }
    def target; end

    sig { returns(T::Array[::ApplicationVersion]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::ApplicationVersion } }

    sig { returns(T::Array[::ApplicationVersion]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::ApplicationVersion } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
