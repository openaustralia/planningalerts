# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Authority`.
# Please instead update this file by running `bin/tapioca dsl Authority`.

class Authority
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Authority).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Authority]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Authority)) }
    def fifth; end

    sig { returns(::Authority) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Authority)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Authority) }
    def find_by!(*args); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Authority)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Authority) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Authority) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Authority) }
    def first!; end

    sig { returns(T.nilable(::Authority)) }
    def forty_two; end

    sig { returns(::Authority) }
    def forty_two!; end

    sig { returns(T.nilable(::Authority)) }
    def fourth; end

    sig { returns(::Authority) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Authority) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Authority).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Authority).void)
      ).returns(::Authority)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Authority).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Authority).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Authority)) }
    def second; end

    sig { returns(::Authority) }
    def second!; end

    sig { returns(T.nilable(::Authority)) }
    def second_to_last; end

    sig { returns(::Authority) }
    def second_to_last!; end

    sig { returns(::Authority) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Authority) }
    def take!; end

    sig { returns(T.nilable(::Authority)) }
    def third; end

    sig { returns(::Authority) }
    def third!; end

    sig { returns(T.nilable(::Authority)) }
    def third_to_last; end

    sig { returns(::Authority) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def application_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def application_ids=(ids); end

    # This method is created by ActiveRecord on the `Authority` class because it declared `has_many :applications`.
    # ðŸ”— [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Application::PrivateCollectionProxy) }
    def applications; end

    sig { params(value: T::Enumerable[::Application]).void }
    def applications=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GithubIssue) }
    def build_github_issue(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def comment_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def comment_ids=(ids); end

    # This method is created by ActiveRecord on the `Authority` class because it declared `has_many :comments, through: :applications`.
    # ðŸ”— [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Comment::PrivateCollectionProxy) }
    def comments; end

    sig { params(value: T::Enumerable[::Comment]).void }
    def comments=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GithubIssue) }
    def create_github_issue(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::GithubIssue) }
    def create_github_issue!(*args, &blk); end

    sig { returns(T.nilable(::GithubIssue)) }
    def github_issue; end

    sig { params(value: T.nilable(::GithubIssue)).void }
    def github_issue=(value); end

    sig { returns(T.nilable(::GithubIssue)) }
    def reload_github_issue; end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T::Boolean) }
    def disabled; end

    sig { params(value: T::Boolean).returns(T::Boolean) }
    def disabled=(value); end

    sig { returns(T::Boolean) }
    def disabled?; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_before_last_save; end

    sig { returns(T.untyped) }
    def disabled_before_type_cast; end

    sig { returns(T::Boolean) }
    def disabled_came_from_user?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def disabled_change; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def disabled_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def disabled_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_in_database; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def disabled_previous_change; end

    sig { returns(T::Boolean) }
    def disabled_previously_changed?; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def disabled_was; end

    sig { void }
    def disabled_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def email_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { returns(T::Boolean) }
    def email_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(::String) }
    def full_name; end

    sig { params(value: ::String).returns(::String) }
    def full_name=(value); end

    sig { returns(T::Boolean) }
    def full_name?; end

    sig { returns(T.nilable(::String)) }
    def full_name_before_last_save; end

    sig { returns(T.untyped) }
    def full_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def full_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def full_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def full_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def full_name_previous_change; end

    sig { returns(T::Boolean) }
    def full_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def full_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def full_name_was; end

    sig { void }
    def full_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_scraper_run_log; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_scraper_run_log=(value); end

    sig { returns(T::Boolean) }
    def last_scraper_run_log?; end

    sig { returns(T.nilable(::String)) }
    def last_scraper_run_log_before_last_save; end

    sig { returns(T.untyped) }
    def last_scraper_run_log_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_scraper_run_log_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_scraper_run_log_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_scraper_run_log_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def last_scraper_run_log_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_scraper_run_log_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_scraper_run_log_previous_change; end

    sig { returns(T::Boolean) }
    def last_scraper_run_log_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def last_scraper_run_log_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_scraper_run_log_was; end

    sig { void }
    def last_scraper_run_log_will_change!; end

    sig { returns(T.nilable(::String)) }
    def morph_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def morph_name=(value); end

    sig { returns(T::Boolean) }
    def morph_name?; end

    sig { returns(T.nilable(::String)) }
    def morph_name_before_last_save; end

    sig { returns(T.untyped) }
    def morph_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def morph_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def morph_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def morph_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def morph_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def morph_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def morph_name_previous_change; end

    sig { returns(T::Boolean) }
    def morph_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def morph_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def morph_name_was; end

    sig { void }
    def morph_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def population_2017; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def population_2017=(value); end

    sig { returns(T::Boolean) }
    def population_2017?; end

    sig { returns(T.nilable(::Integer)) }
    def population_2017_before_last_save; end

    sig { returns(T.untyped) }
    def population_2017_before_type_cast; end

    sig { returns(T::Boolean) }
    def population_2017_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def population_2017_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def population_2017_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def population_2017_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def population_2017_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def population_2017_previous_change; end

    sig { returns(T::Boolean) }
    def population_2017_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def population_2017_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def population_2017_was; end

    sig { void }
    def population_2017_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def population_2021; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def population_2021=(value); end

    sig { returns(T::Boolean) }
    def population_2021?; end

    sig { returns(T.nilable(::Integer)) }
    def population_2021_before_last_save; end

    sig { returns(T.untyped) }
    def population_2021_before_type_cast; end

    sig { returns(T::Boolean) }
    def population_2021_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def population_2021_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def population_2021_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def population_2021_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def population_2021_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def population_2021_previous_change; end

    sig { returns(T::Boolean) }
    def population_2021_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def population_2021_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def population_2021_was; end

    sig { void }
    def population_2021_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_disabled!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_full_name!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_last_scraper_run_log!; end

    sig { void }
    def restore_morph_name!; end

    sig { void }
    def restore_population_2017!; end

    sig { void }
    def restore_population_2021!; end

    sig { void }
    def restore_scraper_authority_label!; end

    sig { void }
    def restore_short_name!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_website_url!; end

    sig { void }
    def restore_wikidata_id!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T::Boolean, T::Boolean])) }
    def saved_change_to_disabled; end

    sig { returns(T::Boolean) }
    def saved_change_to_disabled?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_full_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_full_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_scraper_run_log; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_scraper_run_log?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_morph_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_morph_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_population_2017; end

    sig { returns(T::Boolean) }
    def saved_change_to_population_2017?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_population_2021; end

    sig { returns(T::Boolean) }
    def saved_change_to_population_2021?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_scraper_authority_label; end

    sig { returns(T::Boolean) }
    def saved_change_to_scraper_authority_label?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_short_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_short_name?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_website_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_website_url?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_wikidata_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_wikidata_id?; end

    sig { returns(T.nilable(::String)) }
    def scraper_authority_label; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def scraper_authority_label=(value); end

    sig { returns(T::Boolean) }
    def scraper_authority_label?; end

    sig { returns(T.nilable(::String)) }
    def scraper_authority_label_before_last_save; end

    sig { returns(T.untyped) }
    def scraper_authority_label_before_type_cast; end

    sig { returns(T::Boolean) }
    def scraper_authority_label_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def scraper_authority_label_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def scraper_authority_label_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def scraper_authority_label_changed?; end

    sig { returns(T.nilable(::String)) }
    def scraper_authority_label_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def scraper_authority_label_previous_change; end

    sig { returns(T::Boolean) }
    def scraper_authority_label_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def scraper_authority_label_previously_was; end

    sig { returns(T.nilable(::String)) }
    def scraper_authority_label_was; end

    sig { void }
    def scraper_authority_label_will_change!; end

    sig { returns(::String) }
    def short_name; end

    sig { params(value: ::String).returns(::String) }
    def short_name=(value); end

    sig { returns(T::Boolean) }
    def short_name?; end

    sig { returns(T.nilable(::String)) }
    def short_name_before_last_save; end

    sig { returns(T.untyped) }
    def short_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def short_name_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def short_name_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def short_name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def short_name_changed?; end

    sig { returns(T.nilable(::String)) }
    def short_name_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def short_name_previous_change; end

    sig { returns(T::Boolean) }
    def short_name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def short_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def short_name_was; end

    sig { void }
    def short_name_will_change!; end

    sig { returns(::String) }
    def state; end

    sig { params(value: ::String).returns(::String) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def state_changed?; end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_previous_change; end

    sig { returns(T::Boolean) }
    def state_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: T.nilable(::ActiveSupport::TimeWithZone)).returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def website_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def website_url=(value); end

    sig { returns(T::Boolean) }
    def website_url?; end

    sig { returns(T.nilable(::String)) }
    def website_url_before_last_save; end

    sig { returns(T.untyped) }
    def website_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def website_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def website_url_changed?; end

    sig { returns(T.nilable(::String)) }
    def website_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def website_url_previous_change; end

    sig { returns(T::Boolean) }
    def website_url_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def website_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def website_url_was; end

    sig { void }
    def website_url_will_change!; end

    sig { returns(T.nilable(::String)) }
    def wikidata_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def wikidata_id=(value); end

    sig { returns(T::Boolean) }
    def wikidata_id?; end

    sig { returns(T.nilable(::String)) }
    def wikidata_id_before_last_save; end

    sig { returns(T.untyped) }
    def wikidata_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def wikidata_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def wikidata_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def wikidata_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def wikidata_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def wikidata_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def wikidata_id_previous_change; end

    sig { returns(T::Boolean) }
    def wikidata_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def wikidata_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def wikidata_id_was; end

    sig { void }
    def wikidata_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_disabled?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_full_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_scraper_run_log?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_morph_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_population_2017?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_population_2021?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_scraper_authority_label?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_short_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_website_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_wikidata_id?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def enabled(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Authority } }

    sig { returns(T::Array[::Authority]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Authority } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Authority } }

    sig do
      params(
        records: T.any(::Authority, T::Enumerable[T.any(::Authority, T::Enumerable[::Authority])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Authority, T::Enumerable[T.any(::Authority, T::Enumerable[::Authority])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Authority, T::Enumerable[T.any(::Authority, T::Enumerable[::Authority])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Authority, Integer, String, T::Enumerable[T.any(::Authority, Integer, String, T::Enumerable[::Authority])])
      ).returns(T::Array[::Authority])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Authority, Integer, String, T::Enumerable[T.any(::Authority, Integer, String, T::Enumerable[::Authority])])
      ).returns(T::Array[::Authority])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Authority]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Authority, T::Enumerable[T.any(::Authority, T::Enumerable[::Authority])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Authority, T::Enumerable[T.any(::Authority, T::Enumerable[::Authority])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Authority, T::Enumerable[T.any(::Authority, T::Enumerable[::Authority])])
      ).returns(T::Array[::Authority])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Authority]) }
    def target; end

    sig { returns(T::Array[::Authority]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Authority } }

    sig { returns(T::Array[::Authority]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Authority } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
