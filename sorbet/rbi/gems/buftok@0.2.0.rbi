# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `buftok` gem.
# Please instead update this file by running `bin/tapioca gem buftok`.

# BufferedTokenizer takes a delimiter upon instantiation, or acts line-based
# by default.  It allows input to be spoon-fed from some outside source which
# receives arbitrary length datagrams which may-or-may-not contain the token
# by which entities are delimited.  In this respect it's ideally paired with
# something like EventMachine (http://rubyeventmachine.com/).
#
# source://buftok//lib/buftok.rb#6
class BufferedTokenizer
  # New BufferedTokenizers will operate on lines delimited by a delimiter,
  # which is by default the global input delimiter $/ ("\n").
  #
  # The input buffer is stored as an array.  This is by far the most efficient
  # approach given language constraints (in C a linked list would be a more
  # appropriate data structure).  Segments of input data are stored in a list
  # which is only joined when a token is reached, substantially reducing the
  # number of objects required for the operation.
  #
  # @return [BufferedTokenizer] a new instance of BufferedTokenizer
  #
  # source://eventmachine/1.2.7/lib/em/buftok.rb#15
  def initialize(delimiter = T.unsafe(nil)); end

  # Extract takes an arbitrary string of input data and returns an array of
  # tokenized entities, provided there were any available to extract.  This
  # makes for easy processing of datagrams using a pattern like:
  #
  #   tokenizer.extract(data).map { |entity| Decode(entity) }.each do ...
  #
  # Using -1 makes split to return "" if the token is at the end of
  # the string, meaning the last element is the start of the next chunk.
  #
  # source://eventmachine/1.2.7/lib/em/buftok.rb#30
  def extract(data); end

  # Flush the contents of the input buffer, i.e. return the input buffer even though
  # a token has not yet been encountered
  #
  # source://eventmachine/1.2.7/lib/em/buftok.rb#52
  def flush; end
end
