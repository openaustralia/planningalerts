# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `administrate` gem.
# Please instead update this file by running `bin/tapioca gem administrate`.

# source://administrate//lib/administrate/namespace/resource.rb#1
module Administrate
  class << self
    # source://railties/6.1.4.1/lib/rails/engine.rb#405
    def railtie_helpers_paths; end

    # source://railties/6.1.4.1/lib/rails/engine.rb#394
    def railtie_namespace; end

    # source://railties/6.1.4.1/lib/rails/engine.rb#409
    def railtie_routes_url_helpers(include_path_helpers = T.unsafe(nil)); end

    # source://railties/6.1.4.1/lib/rails/engine.rb#397
    def table_name_prefix; end

    # source://railties/6.1.4.1/lib/rails/engine.rb#401
    def use_relative_model_naming?; end

    # source://administrate//lib/administrate.rb#34
    def warn_of_deprecated_authorization_method(method); end

    # source://administrate//lib/administrate.rb#24
    def warn_of_deprecated_method(klass, method); end

    # source://administrate//lib/administrate.rb#14
    def warn_of_deprecated_option(name); end

    # source://administrate//lib/administrate.rb#4
    def warn_of_missing_resource_class; end
  end
end

class Administrate::ApplicationController < ::ActionController::Base
  def create; end
  def dashboard_class(*_arg0, &_arg1); end
  def destroy; end
  def edit; end
  def index; end
  def namespace(*_arg0, &_arg1); end
  def new; end
  def resource_class(*_arg0, &_arg1); end
  def resource_name(*_arg0, &_arg1); end
  def show; end
  def update; end

  private

  # source://actionview/6.1.4.1/lib/action_view/layouts.rb#325
  def _layout(lookup_context, formats); end

  def after_resource_created_path(requested_resource); end
  def after_resource_destroyed_path(_requested_resource); end
  def after_resource_updated_path(requested_resource); end
  def apply_collection_includes(relation); end
  def authorize_resource(resource); end
  def authorized_action?(_resource, _action_name); end
  def dashboard; end
  def dashboard_attribute(attribute); end
  def default_sorting_attribute; end
  def default_sorting_direction; end
  def existing_action?(resource, action_name); end
  def filter_resources(resources, search_term:); end
  def find_resource(param); end
  def nav_link_state(resource); end
  def new_resource; end
  def order; end
  def order_by_field(dashboard); end
  def paginate_resources(resources); end
  def read_param_value(data); end
  def records_per_page; end
  def requested_resource; end
  def resource_params; end
  def resource_resolver; end
  def routes; end
  def scoped_resource; end
  def show_action?(action, resource); end
  def show_search_bar?; end
  def sorting_attribute; end
  def sorting_direction; end
  def sorting_params; end
  def translate_with_resource(key); end
  def valid_action?(action_name, resource = T.unsafe(nil)); end

  class << self
    # source://activesupport/6.1.4.1/lib/active_support/callbacks.rb#67
    def __callbacks; end

    # source://actionpack/6.1.4.1/lib/abstract_controller/helpers.rb#10
    def _helper_methods; end

    # source://actionpack/6.1.4.1/lib/action_controller/metal.rb#212
    def middleware_stack; end
  end
end

module Administrate::ApplicationController::HelperMethods
  include ::ActionController::Base::HelperMethods

  def authorized_action?(*args, &block); end
  def existing_action?(*args, &block); end
  def namespace(*args, &block); end
  def nav_link_state(*args, &block); end
  def new_resource(*args, &block); end
  def resource_class(*args, &block); end
  def resource_name(*args, &block); end
  def show_action?(*args, &block); end
  def valid_action?(*args, &block); end
end

module Administrate::ApplicationHelper
  def accessible_action?(target, action_name); end
  def application_title; end
  def clear_search_params; end
  def dashboard_from_resource(resource_name); end
  def display_resource_name(resource_name, opts = T.unsafe(nil)); end
  def model_from_resource(resource_name); end
  def render_field(field, locals = T.unsafe(nil)); end
  def requireness(field); end
  def resource_index_route(resource_name); end
  def sanitized_order_params(page, current_field_name); end
  def sort_order(order); end

  private

  def default_resource_name(name, opts = T.unsafe(nil)); end
end

Administrate::ApplicationHelper::PLURAL_MANY_COUNT = T.let(T.unsafe(nil), Float)
Administrate::ApplicationHelper::SINGULAR_COUNT = T.let(T.unsafe(nil), Integer)

# source://administrate//lib/administrate/base_dashboard.rb#18
class Administrate::BaseDashboard
  include ::Administrate

  # source://administrate//lib/administrate/base_dashboard.rb#49
  def all_attributes; end

  # source://administrate//lib/administrate/base_dashboard.rb#37
  def attribute_type_for(attribute_name); end

  # source://administrate//lib/administrate/base_dashboard.rb#33
  def attribute_types; end

  # source://administrate//lib/administrate/base_dashboard.rb#43
  def attribute_types_for(attribute_names); end

  # source://administrate//lib/administrate/base_dashboard.rb#78
  def collection_attributes; end

  # source://administrate//lib/administrate/base_dashboard.rb#92
  def collection_includes; end

  # source://administrate//lib/administrate/base_dashboard.rb#88
  def display_resource(resource); end

  # source://administrate//lib/administrate/base_dashboard.rb#53
  def form_attributes(action = T.unsafe(nil)); end

  # source://administrate//lib/administrate/base_dashboard.rb#102
  def item_associations; end

  # source://administrate//lib/administrate/base_dashboard.rb#96
  def item_includes; end

  # source://administrate//lib/administrate/base_dashboard.rb#65
  def permitted_attributes; end

  # source://administrate//lib/administrate/base_dashboard.rb#82
  def search_attributes; end

  # source://administrate//lib/administrate/base_dashboard.rb#74
  def show_page_attributes; end

  # source://administrate//lib/administrate/base_dashboard.rb#57
  def specific_form_attributes_for(action); end

  private

  # source://administrate//lib/administrate/base_dashboard.rb#120
  def attribute_associated(attributes); end

  # source://administrate//lib/administrate/base_dashboard.rb#112
  def attribute_includes(attributes); end

  # source://administrate//lib/administrate/base_dashboard.rb#108
  def attribute_not_found_message(attr); end

  class << self
    # source://administrate//lib/administrate/base_dashboard.rb#24
    def model; end

    # source://administrate//lib/administrate/base_dashboard.rb#28
    def resource_name(opts); end
  end
end

# source://administrate//lib/administrate/base_dashboard.rb#21
Administrate::BaseDashboard::DASHBOARD_SUFFIX = T.let(T.unsafe(nil), String)

# source://administrate//lib/administrate/custom_dashboard.rb#2
class Administrate::CustomDashboard
  include ::Administrate

  class << self
    # source://administrate//lib/administrate/custom_dashboard.rb#10
    def resource(resource_name); end

    # source://administrate//lib/administrate/custom_dashboard.rb#6
    def resource_name(_opts); end
  end
end

# source://administrate//lib/administrate/engine.rb#19
class Administrate::Engine < ::Rails::Engine
  class << self
    # source://administrate//lib/administrate/engine.rb#32
    def add_javascript(script); end

    # source://administrate//lib/administrate/engine.rb#36
    def add_stylesheet(stylesheet); end

    # source://administrate//lib/administrate/engine.rb#44
    def javascripts; end

    # source://administrate//lib/administrate/engine.rb#40
    def stylesheets; end
  end
end

# source://administrate//lib/administrate/field/deferred.rb#4
module Administrate::Field; end

# source://administrate//lib/administrate/field/associative.rb#5
class Administrate::Field::Associative < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/associative.rb#26
  def associated_class; end

  # source://administrate//lib/administrate/field/associative.rb#34
  def associated_class_name; end

  # source://administrate//lib/administrate/field/associative.rb#22
  def display_associated_resource; end

  private

  # source://administrate//lib/administrate/field/associative.rb#47
  def associated_dashboard; end

  # source://administrate//lib/administrate/field/associative.rb#71
  def deprecated_option(name); end

  # source://administrate//lib/administrate/field/associative.rb#59
  def foreign_key; end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/field/associative.rb#67
  def option_given?(name); end

  # source://administrate//lib/administrate/field/associative.rb#51
  def primary_key; end

  class << self
    # source://administrate//lib/administrate/field/associative.rb#10
    def associated_class(resource_class, attr); end

    # source://administrate//lib/administrate/field/associative.rb#14
    def associated_class_name(resource_class, attr); end

    # source://administrate//lib/administrate/field/associative.rb#6
    def foreign_key_for(resource_class, attr); end

    # source://administrate//lib/administrate/field/associative.rb#18
    def reflection(resource_class, attr); end
  end
end

# source://administrate//lib/administrate/field/base.rb#6
class Administrate::Field::Base
  # @return [Base] a new instance of Base
  #
  # source://administrate//lib/administrate/field/base.rb#35
  def initialize(attribute, data, page, options = T.unsafe(nil)); end

  # Returns the value of attribute attribute.
  #
  # source://administrate//lib/administrate/field/base.rb#81
  def attribute; end

  # Returns the value of attribute data.
  #
  # source://administrate//lib/administrate/field/base.rb#81
  def data; end

  # source://administrate//lib/administrate/field/base.rb#43
  def html_class; end

  # source://administrate//lib/administrate/field/base.rb#47
  def name; end

  # Returns the value of attribute options.
  #
  # source://administrate//lib/administrate/field/base.rb#81
  def options; end

  # Returns the value of attribute page.
  #
  # source://administrate//lib/administrate/field/base.rb#81
  def page; end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/field/base.rb#55
  def required?; end

  # Returns the value of attribute resource.
  #
  # source://administrate//lib/administrate/field/base.rb#81
  def resource; end

  # source://administrate//lib/administrate/field/base.rb#51
  def to_partial_path; end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/base.rb#15
    def associative?; end

    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/base.rb#19
    def eager_load?; end

    # source://administrate//lib/administrate/field/base.rb#27
    def field_type; end

    # source://administrate//lib/administrate/field/base.rb#11
    def html_class; end

    # source://administrate//lib/administrate/field/base.rb#31
    def permitted_attribute(attr, _options = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/base.rb#23
    def searchable?; end

    # source://administrate//lib/administrate/field/base.rb#7
    def with_options(options = T.unsafe(nil)); end
  end
end

# source://administrate//lib/administrate/field/belongs_to.rb#5
class Administrate::Field::BelongsTo < ::Administrate::Field::Associative
  # source://administrate//lib/administrate/field/belongs_to.rb#24
  def associated_resource_options; end

  # source://administrate//lib/administrate/field/belongs_to.rb#34
  def include_blank_option; end

  # source://administrate//lib/administrate/field/belongs_to.rb#20
  def permitted_attribute; end

  # source://administrate//lib/administrate/field/belongs_to.rb#30
  def selected_option; end

  private

  # source://administrate//lib/administrate/field/belongs_to.rb#40
  def candidate_resources; end

  # source://administrate//lib/administrate/field/belongs_to.rb#47
  def display_candidate_resource(resource); end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/belongs_to.rb#16
    def eager_load?; end

    # source://administrate//lib/administrate/field/belongs_to.rb#6
    def permitted_attribute(attr, options = T.unsafe(nil)); end
  end
end

# source://administrate//lib/administrate/field/boolean.rb#5
class Administrate::Field::Boolean < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/boolean.rb#6
  def to_s; end
end

# source://administrate//lib/administrate/field/date.rb#5
class Administrate::Field::Date < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/date.rb#6
  def date; end

  private

  # source://administrate//lib/administrate/field/date.rb#15
  def format; end
end

# source://administrate//lib/administrate/field/date_time.rb#5
class Administrate::Field::DateTime < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/date_time.rb#6
  def date; end

  # source://administrate//lib/administrate/field/date_time.rb#13
  def datetime; end

  private

  # source://administrate//lib/administrate/field/date_time.rb#23
  def format; end

  # source://administrate//lib/administrate/field/date_time.rb#27
  def timezone; end
end

# source://administrate//lib/administrate/field/deferred.rb#5
class Administrate::Field::Deferred
  # @return [Deferred] a new instance of Deferred
  #
  # source://administrate//lib/administrate/field/deferred.rb#6
  def initialize(deferred_class, options = T.unsafe(nil)); end

  # source://administrate//lib/administrate/field/deferred.rb#18
  def ==(other); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/field/deferred.rb#24
  def associative?; end

  # Returns the value of attribute deferred_class.
  #
  # source://administrate//lib/administrate/field/deferred.rb#11
  def deferred_class; end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/field/deferred.rb#28
  def eager_load?; end

  # source://administrate//lib/administrate/field/deferred.rb#60
  def html_class(*_arg0, &_arg1); end

  # source://administrate//lib/administrate/field/deferred.rb#13
  def new(*args); end

  # Returns the value of attribute options.
  #
  # source://administrate//lib/administrate/field/deferred.rb#11
  def options; end

  # source://administrate//lib/administrate/field/deferred.rb#51
  def permitted_attribute(attr, opts = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/field/deferred.rb#32
  def searchable?; end

  # source://administrate//lib/administrate/field/deferred.rb#36
  def searchable_field; end

  # source://administrate//lib/administrate/field/deferred.rb#43
  def searchable_fields; end
end

# source://administrate//lib/administrate/field/email.rb#5
class Administrate::Field::Email < ::Administrate::Field::Base
  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/email.rb#6
    def searchable?; end
  end
end

# source://administrate//lib/administrate/field/has_many.rb#7
class Administrate::Field::HasMany < ::Administrate::Field::Associative
  # source://administrate//lib/administrate/field/has_many.rb#24
  def associated_collection(order = T.unsafe(nil)); end

  # source://administrate//lib/administrate/field/has_many.rb#32
  def associated_resource_options; end

  # source://administrate//lib/administrate/field/has_many.rb#28
  def attribute_key; end

  # source://administrate//lib/administrate/field/has_many.rb#64
  def data; end

  # source://administrate//lib/administrate/field/has_many.rb#44
  def limit; end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/field/has_many.rb#60
  def more_than_limit?; end

  # source://administrate//lib/administrate/field/has_many.rb#75
  def order; end

  # source://administrate//lib/administrate/field/has_many.rb#68
  def order_from_params(params); end

  # source://administrate//lib/administrate/field/has_many.rb#48
  def permitted_attribute; end

  # source://administrate//lib/administrate/field/has_many.rb#55
  def resources(page = T.unsafe(nil), order = T.unsafe(nil)); end

  # source://administrate//lib/administrate/field/has_many.rb#38
  def selected_options; end

  private

  # source://administrate//lib/administrate/field/has_many.rb#85
  def candidate_resources; end

  # source://administrate//lib/administrate/field/has_many.rb#102
  def direction; end

  # source://administrate//lib/administrate/field/has_many.rb#94
  def display_candidate_resource(resource); end

  # source://administrate//lib/administrate/field/has_many.rb#81
  def includes; end

  # source://administrate//lib/administrate/field/has_many.rb#98
  def sort_by; end

  class << self
    # source://administrate//lib/administrate/field/has_many.rb#10
    def permitted_attribute(attr, _options = T.unsafe(nil)); end
  end
end

# source://administrate//lib/administrate/field/has_many.rb#8
Administrate::Field::HasMany::DEFAULT_LIMIT = T.let(T.unsafe(nil), Integer)

# source://administrate//lib/administrate/field/has_one.rb#5
class Administrate::Field::HasOne < ::Administrate::Field::Associative
  # @return [Boolean]
  #
  # source://administrate//lib/administrate/field/has_one.rb#47
  def linkable?; end

  # source://administrate//lib/administrate/field/has_one.rb#33
  def nested_form; end

  # source://administrate//lib/administrate/field/has_one.rb#40
  def nested_show; end

  private

  # source://administrate//lib/administrate/field/has_one.rb#53
  def resolver; end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/has_one.rb#29
    def eager_load?; end

    # source://administrate//lib/administrate/field/has_one.rb#6
    def permitted_attribute(attr, options = T.unsafe(nil)); end
  end
end

# source://administrate//lib/administrate/field/number.rb#6
class Administrate::Field::Number < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/number.rb#7
  def to_s; end

  private

  # source://administrate//lib/administrate/field/number.rb#27
  def decimals; end

  # source://administrate//lib/administrate/field/number.rb#37
  def format(result); end

  # source://administrate//lib/administrate/field/number.rb#15
  def format_string; end

  # source://administrate//lib/administrate/field/number.rb#19
  def prefix; end

  # source://administrate//lib/administrate/field/number.rb#23
  def suffix; end

  # source://administrate//lib/administrate/field/number.rb#33
  def value; end
end

# source://administrate//lib/administrate/field/password.rb#5
class Administrate::Field::Password < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/password.rb#10
  def truncate; end

  private

  # source://administrate//lib/administrate/field/password.rb#20
  def character; end

  # source://administrate//lib/administrate/field/password.rb#16
  def truncation_length; end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/password.rb#6
    def searchable?; end
  end
end

# source://administrate//lib/administrate/field/polymorphic.rb#5
class Administrate::Field::Polymorphic < ::Administrate::Field::BelongsTo
  # source://administrate//lib/administrate/field/polymorphic.rb#10
  def associated_resource_grouped_options; end

  # source://administrate//lib/administrate/field/polymorphic.rb#18
  def permitted_attribute; end

  # source://administrate//lib/administrate/field/polymorphic.rb#22
  def selected_global_id; end

  private

  # source://administrate//lib/administrate/field/polymorphic.rb#28
  def associated_dashboard(klass = T.unsafe(nil)); end

  # source://administrate//lib/administrate/field/polymorphic.rb#42
  def candidate_resources_for(klass); end

  # source://administrate//lib/administrate/field/polymorphic.rb#32
  def classes; end

  # source://administrate//lib/administrate/field/polymorphic.rb#46
  def display_candidate_resource(resource); end

  # source://administrate//lib/administrate/field/polymorphic.rb#38
  def order; end

  class << self
    # source://administrate//lib/administrate/field/polymorphic.rb#6
    def permitted_attribute(attr, _options = T.unsafe(nil)); end
  end
end

# source://administrate//lib/administrate/field/select.rb#5
class Administrate::Field::Select < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/select.rb#14
  def include_blank_option; end

  # source://administrate//lib/administrate/field/select.rb#10
  def selectable_options; end

  private

  # source://administrate//lib/administrate/field/select.rb#20
  def collection; end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/select.rb#6
    def searchable?; end
  end
end

# source://administrate//lib/administrate/field/string.rb#5
class Administrate::Field::String < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/string.rb#10
  def truncate; end

  private

  # source://administrate//lib/administrate/field/string.rb#16
  def truncation_length; end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/string.rb#6
    def searchable?; end
  end
end

# source://administrate//lib/administrate/field/text.rb#5
class Administrate::Field::Text < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/text.rb#10
  def truncate; end

  private

  # source://administrate//lib/administrate/field/text.rb#16
  def truncation_length; end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/text.rb#6
    def searchable?; end
  end
end

# source://administrate//lib/administrate/field/time.rb#5
class Administrate::Field::Time < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/time.rb#6
  def time; end

  private

  # source://administrate//lib/administrate/field/time.rb#14
  def format; end
end

# source://administrate//lib/administrate/field/url.rb#5
class Administrate::Field::Url < ::Administrate::Field::Base
  # source://administrate//lib/administrate/field/url.rb#14
  def html_options; end

  # source://administrate//lib/administrate/field/url.rb#10
  def truncate; end

  private

  # source://administrate//lib/administrate/field/url.rb#20
  def truncation_length; end

  class << self
    # @return [Boolean]
    #
    # source://administrate//lib/administrate/field/url.rb#6
    def searchable?; end
  end
end

# source://administrate//lib/administrate/namespace/resource.rb#2
class Administrate::Namespace
  # @return [Namespace] a new instance of Namespace
  #
  # source://administrate//lib/administrate/namespace.rb#3
  def initialize(namespace); end

  # source://administrate//lib/administrate/namespace.rb#7
  def resources; end

  # source://administrate//lib/administrate/namespace.rb#21
  def resources_with_index_route; end

  # source://administrate//lib/administrate/namespace.rb#13
  def routes; end

  private

  # source://administrate//lib/administrate/namespace.rb#29
  def all_routes; end

  # Returns the value of attribute namespace.
  #
  # source://administrate//lib/administrate/namespace.rb#27
  def namespace; end
end

# source://administrate//lib/administrate/namespace/resource.rb#3
class Administrate::Namespace::Resource
  # @return [Resource] a new instance of Resource
  #
  # source://administrate//lib/administrate/namespace/resource.rb#6
  def initialize(namespace, resource); end

  # source://administrate//lib/administrate/namespace/resource.rb#19
  def name; end

  # Returns the value of attribute namespace.
  #
  # source://administrate//lib/administrate/namespace/resource.rb#4
  def namespace; end

  # source://administrate//lib/administrate/namespace/resource.rb#23
  def path; end

  # Returns the value of attribute resource.
  #
  # source://administrate//lib/administrate/namespace/resource.rb#4
  def resource; end

  # source://administrate//lib/administrate/namespace/resource.rb#11
  def to_s; end

  # source://administrate//lib/administrate/namespace/resource.rb#15
  def to_sym; end
end

# source://administrate//lib/administrate/not_authorized_error.rb#2
class Administrate::NotAuthorizedError < ::StandardError
  # @return [NotAuthorizedError] a new instance of NotAuthorizedError
  #
  # source://administrate//lib/administrate/not_authorized_error.rb#3
  def initialize(action:, resource:); end
end

# source://administrate//lib/administrate/order.rb#2
class Administrate::Order
  # @return [Order] a new instance of Order
  #
  # source://administrate//lib/administrate/order.rb#3
  def initialize(attribute = T.unsafe(nil), direction = T.unsafe(nil), association_attribute: T.unsafe(nil)); end

  # source://administrate//lib/administrate/order.rb#9
  def apply(relation); end

  # Returns the value of attribute direction.
  #
  # source://administrate//lib/administrate/order.rb#32
  def direction; end

  # source://administrate//lib/administrate/order.rb#25
  def order_params_for(attr); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/order.rb#21
  def ordered_by?(attr); end

  private

  # Returns the value of attribute association_attribute.
  #
  # source://administrate//lib/administrate/order.rb#36
  def association_attribute; end

  # Returns the value of attribute attribute.
  #
  # source://administrate//lib/administrate/order.rb#36
  def attribute; end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/order.rb#108
  def belongs_to_attribute?(relation); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/order.rb#92
  def column_exist?(table, column_name); end

  # source://administrate//lib/administrate/order.rb#116
  def foreign_key(relation); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/order.rb#104
  def has_many_attribute?(relation); end

  # source://administrate//lib/administrate/order.rb#50
  def opposite_direction; end

  # source://administrate//lib/administrate/order.rb#54
  def order_by_association(relation); end

  # source://administrate//lib/administrate/order.rb#75
  def order_by_attribute(relation); end

  # source://administrate//lib/administrate/order.rb#100
  def order_by_attribute_query; end

  # source://administrate//lib/administrate/order.rb#62
  def order_by_count(relation); end

  # source://administrate//lib/administrate/order.rb#71
  def order_by_id(relation); end

  # source://administrate//lib/administrate/order.rb#96
  def order_by_id_query(relation); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/order.rb#85
  def ordering_by_association_column?(relation); end

  # source://administrate//lib/administrate/order.rb#112
  def reflect_association(relation); end

  # source://administrate//lib/administrate/order.rb#42
  def reversed_direction_param_for(attr); end

  # source://administrate//lib/administrate/order.rb#38
  def sanitize_direction(direction); end
end

# source://administrate//lib/administrate/page/base.rb#2
module Administrate::Page; end

# source://administrate//lib/administrate/page/base.rb#3
class Administrate::Page::Base
  # @return [Base] a new instance of Base
  #
  # source://administrate//lib/administrate/page/base.rb#4
  def initialize(dashboard, options = T.unsafe(nil)); end

  # source://administrate//lib/administrate/page/base.rb#18
  def collection_includes; end

  # source://administrate//lib/administrate/page/base.rb#26
  def item_associations; end

  # source://administrate//lib/administrate/page/base.rb#22
  def item_includes; end

  # source://administrate//lib/administrate/page/base.rb#9
  def resource_name; end

  # source://administrate//lib/administrate/page/base.rb#14
  def resource_path; end

  private

  # source://administrate//lib/administrate/page/base.rb#32
  def attribute_field(dashboard, resource, attribute_name, page); end

  # Returns the value of attribute dashboard.
  #
  # source://administrate//lib/administrate/page/base.rb#42
  def dashboard; end

  # source://administrate//lib/administrate/page/base.rb#38
  def get_attribute_value(resource, attribute_name); end

  # Returns the value of attribute options.
  #
  # source://administrate//lib/administrate/page/base.rb#42
  def options; end
end

# source://administrate//lib/administrate/page/collection.rb#5
class Administrate::Page::Collection < ::Administrate::Page::Base
  # source://administrate//lib/administrate/page/collection.rb#6
  def attribute_names; end

  # source://administrate//lib/administrate/page/collection.rb#16
  def attribute_types; end

  # source://administrate//lib/administrate/page/collection.rb#10
  def attributes_for(resource); end

  # source://administrate//lib/administrate/page/collection.rb#26
  def order_params_for(attr, key: T.unsafe(nil)); end

  # source://administrate//lib/administrate/page/collection.rb#24
  def ordered_by?(*_arg0, &_arg1); end

  # source://administrate//lib/administrate/page/collection.rb#20
  def ordered_html_class(attr); end

  private

  # source://administrate//lib/administrate/page/collection.rb#32
  def order; end
end

# source://administrate//lib/administrate/page/form.rb#5
class Administrate::Page::Form < ::Administrate::Page::Base
  # @return [Form] a new instance of Form
  #
  # source://administrate//lib/administrate/page/form.rb#6
  def initialize(dashboard, resource); end

  # source://administrate//lib/administrate/page/form.rb#13
  def attributes(action = T.unsafe(nil)); end

  # source://administrate//lib/administrate/page/form.rb#26
  def page_title; end

  # Returns the value of attribute resource.
  #
  # source://administrate//lib/administrate/page/form.rb#11
  def resource; end

  private

  # Returns the value of attribute dashboard.
  #
  # source://administrate//lib/administrate/page/form.rb#32
  def dashboard; end
end

# source://administrate//lib/administrate/page/show.rb#5
class Administrate::Page::Show < ::Administrate::Page::Base
  # @return [Show] a new instance of Show
  #
  # source://administrate//lib/administrate/page/show.rb#6
  def initialize(dashboard, resource); end

  # source://administrate//lib/administrate/page/show.rb#17
  def attributes; end

  # source://administrate//lib/administrate/page/show.rb#13
  def page_title; end

  # Returns the value of attribute resource.
  #
  # source://administrate//lib/administrate/page/show.rb#11
  def resource; end
end

module Administrate::Punditize; end

# source://administrate//lib/administrate/resource_resolver.rb#2
class Administrate::ResourceResolver
  # @return [ResourceResolver] a new instance of ResourceResolver
  #
  # source://administrate//lib/administrate/resource_resolver.rb#3
  def initialize(controller_path); end

  # source://administrate//lib/administrate/resource_resolver.rb#7
  def dashboard_class; end

  # source://administrate//lib/administrate/resource_resolver.rb#11
  def namespace; end

  # source://administrate//lib/administrate/resource_resolver.rb#15
  def resource_class; end

  # source://administrate//lib/administrate/resource_resolver.rb#19
  def resource_name; end

  # source://administrate//lib/administrate/resource_resolver.rb#23
  def resource_title; end

  private

  # Returns the value of attribute controller_path.
  #
  # source://administrate//lib/administrate/resource_resolver.rb#41
  def controller_path; end

  # source://administrate//lib/administrate/resource_resolver.rb#37
  def controller_path_parts; end

  # source://administrate//lib/administrate/resource_resolver.rb#33
  def model_path_parts; end

  # source://administrate//lib/administrate/resource_resolver.rb#29
  def resource_class_name; end
end

# source://administrate//lib/administrate/search.rb#5
class Administrate::Search
  # @return [Search] a new instance of Search
  #
  # source://administrate//lib/administrate/search.rb#51
  def initialize(scoped_resource, dashboard, term); end

  # source://administrate//lib/administrate/search.rb#57
  def run; end

  private

  # source://administrate//lib/administrate/search.rb#69
  def apply_filter(filter, filter_param, resources); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/search.rb#159
  def association_search?(attribute); end

  # source://administrate//lib/administrate/search.rb#128
  def attribute_types; end

  # source://administrate//lib/administrate/search.rb#149
  def column_to_query(attr); end

  # source://administrate//lib/administrate/search.rb#78
  def filter_results(resources); end

  # Returns the value of attribute query.
  #
  # source://administrate//lib/administrate/search.rb#167
  def query; end

  # source://administrate//lib/administrate/search.rb#132
  def query_table_name(attr); end

  # source://administrate//lib/administrate/search.rb#87
  def query_template; end

  # source://administrate//lib/administrate/search.rb#103
  def query_values; end

  # Returns the value of attribute resolver.
  #
  # source://administrate//lib/administrate/search.rb#167
  def resolver; end

  # source://administrate//lib/administrate/search.rb#110
  def search_attributes; end

  # source://administrate//lib/administrate/search.rb#114
  def search_results(resources); end

  # source://administrate//lib/administrate/search.rb#97
  def searchable_fields(attr); end

  # source://administrate//lib/administrate/search.rb#153
  def tables_to_join; end

  # source://administrate//lib/administrate/search.rb#163
  def term; end

  # source://administrate//lib/administrate/search.rb#120
  def valid_filters; end
end

# source://administrate//lib/administrate/search.rb#6
class Administrate::Search::Query
  # @return [Query] a new instance of Query
  #
  # source://administrate//lib/administrate/search.rb#13
  def initialize(original_query, valid_filters = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/search.rb#9
  def blank?; end

  # Returns the value of attribute filters.
  #
  # source://administrate//lib/administrate/search.rb#7
  def filters; end

  # source://administrate//lib/administrate/search.rb#19
  def original; end

  # source://administrate//lib/administrate/search.rb#23
  def terms; end

  # source://administrate//lib/administrate/search.rb#27
  def to_s; end

  # Returns the value of attribute valid_filters.
  #
  # source://administrate//lib/administrate/search.rb#7
  def valid_filters; end

  private

  # @return [Boolean]
  #
  # source://administrate//lib/administrate/search.rb#33
  def filter?(word); end

  # source://administrate//lib/administrate/search.rb#37
  def parse_query(query); end
end
