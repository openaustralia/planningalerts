# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `searchkick` gem.
# Please instead update this file by running `bin/tapioca gem searchkick`.

# based on https://gist.github.com/mnutt/566725
#
# source://searchkick//lib/searchkick/controller_runtime.rb#2
module Searchkick
  class << self
    # Returns the value of attribute aws_credentials.
    #
    # source://searchkick//lib/searchkick.rb#60
    def aws_credentials; end

    # source://searchkick//lib/searchkick.rb#238
    def aws_credentials=(creds); end

    # message is private
    #
    # source://searchkick//lib/searchkick.rb#211
    def callbacks(value = T.unsafe(nil), message: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#202
    def callbacks?(default: T.unsafe(nil)); end

    # private
    #
    # source://searchkick//lib/searchkick.rb#310
    def callbacks_value; end

    # private
    #
    # source://searchkick//lib/searchkick.rb#315
    def callbacks_value=(value); end

    # source://searchkick//lib/searchkick.rb#69
    def client; end

    # Sets the attribute client
    #
    # @param value the value to set the attribute client to.
    #
    # source://searchkick//lib/searchkick.rb#59
    def client=(_arg0); end

    # Returns the value of attribute client_options.
    #
    # source://searchkick//lib/searchkick.rb#58
    def client_options; end

    # Sets the attribute client_options
    #
    # @param value the value to set the attribute client_options to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def client_options=(_arg0); end

    # Returns the value of attribute client_type.
    #
    # source://searchkick//lib/searchkick.rb#58
    def client_type; end

    # Sets the attribute client_type
    #
    # @param value the value to set the attribute client_type to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def client_type=(_arg0); end

    # source://searchkick//lib/searchkick.rb#198
    def disable_callbacks; end

    # callbacks
    #
    # source://searchkick//lib/searchkick.rb#194
    def enable_callbacks; end

    # source://searchkick//lib/searchkick.rb#114
    def env; end

    # Sets the attribute env
    #
    # @param value the value to set the attribute env to.
    #
    # source://searchkick//lib/searchkick.rb#59
    def env=(_arg0); end

    # Returns the value of attribute index_prefix.
    #
    # source://searchkick//lib/searchkick.rb#58
    def index_prefix; end

    # Sets the attribute index_prefix
    #
    # @param value the value to set the attribute index_prefix to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def index_prefix=(_arg0); end

    # Returns the value of attribute index_suffix.
    #
    # source://searchkick//lib/searchkick.rb#58
    def index_suffix; end

    # Sets the attribute index_suffix
    #
    # @param value the value to set the attribute index_suffix to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def index_suffix=(_arg0); end

    # private
    #
    # source://searchkick//lib/searchkick.rb#305
    def indexer; end

    # public (for reindexing conversions)
    #
    # @raise [Error]
    #
    # source://searchkick//lib/searchkick.rb#289
    def load_model(class_name, allow_child: T.unsafe(nil)); end

    # private
    #
    # @raise [Error]
    #
    # source://searchkick//lib/searchkick.rb#272
    def load_records(relation, ids); end

    # Returns the value of attribute model_options.
    #
    # source://searchkick//lib/searchkick.rb#58
    def model_options; end

    # Sets the attribute model_options
    #
    # @param value the value to set the attribute model_options to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def model_options=(_arg0); end

    # Returns the value of attribute models.
    #
    # source://searchkick//lib/searchkick.rb#58
    def models; end

    # Sets the attribute models
    #
    # @param value the value to set the attribute models to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def models=(_arg0); end

    # source://searchkick//lib/searchkick.rb#179
    def multi_search(queries); end

    # private
    #
    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#363
    def not_allowed_error?(e); end

    # private
    #
    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#349
    def not_found_error?(e); end

    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#131
    def opensearch?; end

    # Returns the value of attribute queue_name.
    #
    # source://searchkick//lib/searchkick.rb#58
    def queue_name; end

    # Sets the attribute queue_name
    #
    # @param value the value to set the attribute queue_name to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def queue_name=(_arg0); end

    # Returns the value of attribute redis.
    #
    # source://searchkick//lib/searchkick.rb#58
    def redis; end

    # Sets the attribute redis
    #
    # @param value the value to set the attribute redis to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def redis=(_arg0); end

    # @raise [Error]
    #
    # source://searchkick//lib/searchkick.rb#245
    def reindex_status(index_name); end

    # private
    # methods are forwarded to base class
    # this check to see if scope exists on that class
    # it's a bit tricky, but this seems to work
    #
    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#328
    def relation?(klass); end

    # private
    #
    # @raise [Error]
    #
    # source://searchkick//lib/searchkick.rb#337
    def scope(model); end

    # source://searchkick//lib/searchkick.rb#144
    def search(term = T.unsafe(nil), model: T.unsafe(nil), **options, &block); end

    # Returns the value of attribute search_method_name.
    #
    # source://searchkick//lib/searchkick.rb#58
    def search_method_name; end

    # Sets the attribute search_method_name
    #
    # @param value the value to set the attribute search_method_name to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def search_method_name=(_arg0); end

    # source://searchkick//lib/searchkick.rb#118
    def search_timeout; end

    # Sets the attribute search_timeout
    #
    # @param value the value to set the attribute search_timeout to.
    #
    # source://searchkick//lib/searchkick.rb#59
    def search_timeout=(_arg0); end

    # TODO always check true version in Searchkick 6
    #
    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#139
    def server_below?(version, true_version = T.unsafe(nil)); end

    # private
    #
    # source://searchkick//lib/searchkick.rb#123
    def server_info; end

    # source://searchkick//lib/searchkick.rb#127
    def server_version; end

    # private
    #
    # source://searchkick//lib/searchkick.rb#320
    def signer_middleware_aws_params; end

    # Returns the value of attribute timeout.
    #
    # source://searchkick//lib/searchkick.rb#58
    def timeout; end

    # Sets the attribute timeout
    #
    # @param value the value to set the attribute timeout to.
    #
    # source://searchkick//lib/searchkick.rb#58
    def timeout=(_arg0); end

    # private
    #
    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#356
    def transport_error?(e); end

    # source://searchkick//lib/searchkick.rb#267
    def warn(message); end

    # source://searchkick//lib/searchkick.rb#255
    def with_redis; end
  end
end

# source://searchkick//lib/searchkick/bulk_reindex_job.rb#2
class Searchkick::BulkReindexJob < ::ActiveJob::Base
  # TODO remove min_id and max_id in Searchkick 6
  #
  # source://searchkick//lib/searchkick/bulk_reindex_job.rb#6
  def perform(class_name:, record_ids: T.unsafe(nil), index_name: T.unsafe(nil), method_name: T.unsafe(nil), batch_id: T.unsafe(nil), min_id: T.unsafe(nil), max_id: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4.3/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# source://searchkick//lib/searchkick/controller_runtime.rb#3
module Searchkick::ControllerRuntime
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Searchkick::ControllerRuntime::ClassMethods

  def searchkick_runtime; end
  def searchkick_runtime=(_arg0); end

  protected

  # source://searchkick//lib/searchkick/controller_runtime.rb#26
  def append_info_to_payload(payload); end

  # source://searchkick//lib/searchkick/controller_runtime.rb#18
  def cleanup_view_runtime; end

  # source://searchkick//lib/searchkick/controller_runtime.rb#10
  def process_action(action, *args); end
end

# source://searchkick//lib/searchkick/controller_runtime.rb#31
module Searchkick::ControllerRuntime::ClassMethods
  # source://searchkick//lib/searchkick/controller_runtime.rb#32
  def log_process_action(payload); end
end

# source://searchkick//lib/searchkick.rb#54
class Searchkick::DangerousOperation < ::Searchkick::Error; end

# errors
#
# source://searchkick//lib/searchkick.rb#46
class Searchkick::Error < ::StandardError; end

# Subclass of `Hashie::Mash` to wrap Hash-like structures
# (responses from Elasticsearch)
#
# The primary goal of the subclass is to disable the
# warning being printed by Hashie for re-defined
# methods, such as `sort`.
#
# source://searchkick//lib/searchkick/hash_wrapper.rb#9
class Searchkick::HashWrapper < ::Hashie::Mash; end

# source://searchkick//lib/searchkick.rb#55
class Searchkick::ImportError < ::Searchkick::Error; end

# source://searchkick//lib/searchkick/index.rb#2
class Searchkick::Index
  # @return [Index] a new instance of Index
  #
  # source://searchkick//lib/searchkick/index.rb#5
  def initialize(name, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index.rb#37
  def alias_exists?; end

  # source://searchkick//lib/searchkick/index.rb#107
  def all_indices(unaliased: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#269
  def batches_left; end

  # source://searchkick//lib/searchkick/index.rb#150
  def bulk_delete(records); end

  # source://searchkick//lib/searchkick/index.rb#158
  def bulk_index(records); end

  # source://searchkick//lib/searchkick/index.rb#167
  def bulk_update(records, method_name); end

  # remove old indices that start w/ index_name
  #
  # source://searchkick//lib/searchkick/index.rb#124
  def clean_indices; end

  # private
  #
  # source://searchkick//lib/searchkick/index.rb#287
  def conversions_fields; end

  # source://searchkick//lib/searchkick/index.rb#15
  def create(body = T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#258
  def create_index(index_options: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#19
  def delete; end

  # source://searchkick//lib/searchkick/index.rb#179
  def document_type(record); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index.rb#29
  def exists?; end

  # source://searchkick//lib/searchkick/index.rb#158
  def import(records); end

  # source://searchkick//lib/searchkick/index.rb#265
  def import_scope(relation, **options); end

  # source://searchkick//lib/searchkick/index.rb#11
  def index_options; end

  # private
  #
  # source://searchkick//lib/searchkick/index.rb#274
  def klass_document_type(klass, ignore_type = T.unsafe(nil)); end

  # private
  #
  # source://searchkick//lib/searchkick/index.rb#300
  def locations_fields; end

  # call to_h for consistent results between elasticsearch gem 7 and 8
  # could do for all API calls, but just do for ones where return value is focus for now
  #
  # source://searchkick//lib/searchkick/index.rb#43
  def mapping; end

  # Returns the value of attribute name.
  #
  # source://searchkick//lib/searchkick/index.rb#3
  def name; end

  # Returns the value of attribute options.
  #
  # source://searchkick//lib/searchkick/index.rb#3
  def options; end

  # source://searchkick//lib/searchkick/index.rb#78
  def promote(new_name, update_refresh_interval: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#33
  def refresh; end

  # source://searchkick//lib/searchkick/index.rb#52
  def refresh_interval; end

  # note: this is designed to be used internally
  # so it does not check object matches index class
  #
  # source://searchkick//lib/searchkick/index.rb#215
  def reindex(object, method_name: T.unsafe(nil), full: T.unsafe(nil), **options); end

  # queue
  #
  # source://searchkick//lib/searchkick/index.rb#207
  def reindex_queue; end

  # source://searchkick//lib/searchkick/index.rb#191
  def reload_synonyms; end

  # source://searchkick//lib/searchkick/index.rb#138
  def remove(record); end

  # source://searchkick//lib/searchkick/index.rb#98
  def retrieve(record); end

  # source://searchkick//lib/searchkick/index.rb#175
  def search_id(record); end

  # call to_h for consistent results between elasticsearch gem 7 and 8
  #
  # source://searchkick//lib/searchkick/index.rb#48
  def settings; end

  # source://searchkick//lib/searchkick/index.rb#183
  def similar_record(record, **options); end

  # source://searchkick//lib/searchkick/index.rb#132
  def store(record); end

  # private
  #
  # source://searchkick//lib/searchkick/index.rb#295
  def suggest_fields; end

  # source://searchkick//lib/searchkick/index.rb#78
  def swap(new_name, update_refresh_interval: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#60
  def tokens(text, options = T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#64
  def total_docs; end

  # source://searchkick//lib/searchkick/index.rb#144
  def update_record(record, method_name); end

  # source://searchkick//lib/searchkick/index.rb#56
  def update_settings(settings); end

  # private
  #
  # source://searchkick//lib/searchkick/index.rb#308
  def uuid; end

  protected

  # safety check
  # still a chance for race condition since its called before promotion
  # ideal is for user to disable automatic index creation
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-creation
  #
  # source://searchkick//lib/searchkick/index.rb#433
  def check_uuid(old_uuid, new_uuid); end

  # source://searchkick//lib/searchkick/index.rb#314
  def client; end

  # https://gist.github.com/jarosan/3124884
  # http://www.elasticsearch.org/blog/changing-mapping-with-zero-downtime/
  #
  # source://searchkick//lib/searchkick/index.rb#353
  def full_reindex(relation, import: T.unsafe(nil), resume: T.unsafe(nil), retain: T.unsafe(nil), mode: T.unsafe(nil), refresh_interval: T.unsafe(nil), scope: T.unsafe(nil), wait: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#338
  def import_before_promotion(index, relation, **import_options); end

  # source://searchkick//lib/searchkick/index.rb#334
  def index_settings; end

  # source://searchkick//lib/searchkick/index.rb#439
  def notify(record, name); end

  # source://searchkick//lib/searchkick/index.rb#454
  def notify_bulk(records, name); end

  # source://searchkick//lib/searchkick/index.rb#322
  def queue_delete(records); end

  # source://searchkick//lib/searchkick/index.rb#318
  def queue_index(records); end

  # source://searchkick//lib/searchkick/index.rb#326
  def queue_update(records, method_name); end

  # source://searchkick//lib/searchkick/index.rb#342
  def reindex_records(object, mode: T.unsafe(nil), refresh: T.unsafe(nil), **options); end

  # source://searchkick//lib/searchkick/index.rb#330
  def relation_indexer; end
end

# source://searchkick//lib/searchkick/index_cache.rb#2
class Searchkick::IndexCache
  # @return [IndexCache] a new instance of IndexCache
  #
  # source://searchkick//lib/searchkick/index_cache.rb#3
  def initialize(max_size: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index_cache.rb#24
  def clear; end

  # probably a better pattern for this
  # but keep it simple
  #
  # source://searchkick//lib/searchkick/index_cache.rb#11
  def fetch(name); end
end

# source://searchkick//lib/searchkick/index_options.rb#2
class Searchkick::IndexOptions
  # @return [IndexOptions] a new instance of IndexOptions
  #
  # source://searchkick//lib/searchkick/index_options.rb#5
  def initialize(index); end

  # source://searchkick//lib/searchkick/index_options.rb#490
  def add_search_synonyms(settings); end

  # source://searchkick//lib/searchkick/index_options.rb#464
  def add_synonyms(settings); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index_options.rb#548
  def below73?; end

  # source://searchkick//lib/searchkick/index_options.rb#544
  def default_analyzer; end

  # source://searchkick//lib/searchkick/index_options.rb#540
  def default_type; end

  # source://searchkick//lib/searchkick/index_options.rb#343
  def generate_mappings; end

  # @raise [ArgumentError]
  #
  # source://searchkick//lib/searchkick/index_options.rb#30
  def generate_settings; end

  # source://searchkick//lib/searchkick/index_options.rb#9
  def index_options; end

  # source://searchkick//lib/searchkick/index_options.rb#532
  def index_type; end

  # Returns the value of attribute options.
  #
  # source://searchkick//lib/searchkick/index_options.rb#3
  def options; end

  # source://searchkick//lib/searchkick/index_options.rb#525
  def set_deep_paging(settings); end

  # source://searchkick//lib/searchkick/index_options.rb#190
  def update_language(settings, language); end

  # source://searchkick//lib/searchkick/index_options.rb#288
  def update_stemming(settings); end
end

# source://searchkick//lib/searchkick/indexer.rb#4
class Searchkick::Indexer
  # @return [Indexer] a new instance of Indexer
  #
  # source://searchkick//lib/searchkick/indexer.rb#7
  def initialize; end

  # source://searchkick//lib/searchkick/indexer.rb#16
  def perform; end

  # source://searchkick//lib/searchkick/indexer.rb#11
  def queue(items); end

  # Returns the value of attribute queued_items.
  #
  # source://searchkick//lib/searchkick/indexer.rb#5
  def queued_items; end
end

# source://searchkick//lib/searchkick.rb#53
class Searchkick::InvalidQueryError < ::Searchkick::Error; end

# source://searchkick//lib/searchkick/log_subscriber.rb#3
class Searchkick::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://searchkick//lib/searchkick/log_subscriber.rb#47
  def multi_search(event); end

  # source://searchkick//lib/searchkick/log_subscriber.rb#37
  def request(event); end

  # source://searchkick//lib/searchkick/log_subscriber.rb#18
  def search(event); end

  class << self
    # source://searchkick//lib/searchkick/log_subscriber.rb#12
    def reset_runtime; end

    # source://searchkick//lib/searchkick/log_subscriber.rb#8
    def runtime; end

    # source://searchkick//lib/searchkick/log_subscriber.rb#4
    def runtime=(value); end
  end
end

# source://searchkick//lib/searchkick/middleware.rb#4
class Searchkick::Middleware < ::Faraday::Middleware
  # source://searchkick//lib/searchkick/middleware.rb#5
  def call(env); end
end

# source://searchkick//lib/searchkick.rb#47
class Searchkick::MissingIndexError < ::Searchkick::Error; end

# source://searchkick//lib/searchkick/model.rb#2
module Searchkick::Model
  # @raise [ArgumentError]
  #
  # source://searchkick//lib/searchkick/model.rb#3
  def searchkick(**options); end
end

# source://searchkick//lib/searchkick/multi_search.rb#2
class Searchkick::MultiSearch
  # @return [MultiSearch] a new instance of MultiSearch
  #
  # source://searchkick//lib/searchkick/multi_search.rb#5
  def initialize(queries); end

  # source://searchkick//lib/searchkick/multi_search.rb#9
  def perform; end

  # Returns the value of attribute queries.
  #
  # source://searchkick//lib/searchkick/multi_search.rb#3
  def queries; end

  private

  # source://searchkick//lib/searchkick/multi_search.rb#37
  def client; end

  # source://searchkick//lib/searchkick/multi_search.rb#17
  def perform_search(search_queries, perform_retry: T.unsafe(nil)); end
end

# source://searchkick//lib/searchkick/process_batch_job.rb#2
class Searchkick::ProcessBatchJob < ::ActiveJob::Base
  # source://searchkick//lib/searchkick/process_batch_job.rb#5
  def perform(class_name:, record_ids:, index_name: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4.3/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# source://searchkick//lib/searchkick/process_queue_job.rb#2
class Searchkick::ProcessQueueJob < ::ActiveJob::Base
  # source://searchkick//lib/searchkick/process_queue_job.rb#5
  def perform(class_name:, index_name: T.unsafe(nil), inline: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4.3/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# source://searchkick//lib/searchkick/query.rb#2
class Searchkick::Query
  include ::Enumerable
  extend ::Forwardable

  # @raise [ArgumentError]
  # @return [Query] a new instance of Query
  #
  # source://searchkick//lib/searchkick/query.rb#19
  def initialize(klass, term = T.unsafe(nil), **options); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def aggregations(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def aggs(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def any?(*args, **_arg1, &block); end

  # Returns the value of attribute body.
  #
  # source://searchkick//lib/searchkick/query.rb#9
  def body; end

  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://searchkick//lib/searchkick/query.rb#9
  def body=(_arg0); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def clear_scroll(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def current_page(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each_with_hit(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def empty?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def entry_name(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def error(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/query.rb#93
  def execute; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def first(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def first_page?(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/query.rb#129
  def handle_response(response); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def highlights(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def hits(*args, **_arg1, &block); end

  # Returns the value of attribute klass.
  #
  # source://searchkick//lib/searchkick/query.rb#8
  def klass; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def last_page?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def length(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def limit_value(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def map(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def missing_records(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def misspellings?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def model_name(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def next_page(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def num_pages(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def offset(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def offset_value(*args, **_arg1, &block); end

  # Returns the value of attribute options.
  #
  # source://searchkick//lib/searchkick/query.rb#8
  def options; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def out_of_range?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def padding(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/query.rb#61
  def params; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def per_page(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def prev_page(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def previous_page(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def records(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def response(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def results(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#193
  def retry_misspellings?(response); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scroll(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def scroll_id(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/query.rb#49
  def searchkick_index; end

  # source://searchkick//lib/searchkick/query.rb#57
  def searchkick_klass; end

  # source://searchkick//lib/searchkick/query.rb#53
  def searchkick_options; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def size(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def slice(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def suggestions(*args, **_arg1, &block); end

  # Returns the value of attribute term.
  #
  # source://searchkick//lib/searchkick/query.rb#8
  def term; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def to_a(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def to_ary(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/query.rb#108
  def to_curl; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def took(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def total_count(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def total_entries(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def total_pages(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def with_details(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def with_highlights(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def with_hit(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def with_score(*args, **_arg1, &block); end

  private

  # source://searchkick//lib/searchkick/query.rb#1150
  def base_field(k); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1170
  def below710?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1162
  def below73?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1166
  def below75?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1174
  def below80?; end

  # source://searchkick//lib/searchkick/query.rb#1158
  def body_options; end

  # source://searchkick//lib/searchkick/query.rb#1090
  def boost_filter(field, factor: T.unsafe(nil), modifier: T.unsafe(nil), missing: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/query.rb#1112
  def boost_filters(boost_by, modifier: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/query.rb#593
  def build_query(query, filters, should, must_not, custom_filters, multiply_filters); end

  # Recursively descend through nesting of arrays until we reach either a lat/lon object or an array of numbers,
  # eventually returning the same structure with all values transformed to [lon, lat].
  #
  # source://searchkick//lib/searchkick/query.rb#1121
  def coordinate_array(value); end

  # source://searchkick//lib/searchkick/query.rb#1083
  def custom_filter(field, value, factor); end

  # provides *very* basic protection from unfiltered parameters
  # this is not meant to be comprehensive and may be expanded in the future
  #
  # source://searchkick//lib/searchkick/query.rb#892
  def ensure_permitted(obj); end

  # source://searchkick//lib/searchkick/query.rb#236
  def execute_search; end

  # source://searchkick//lib/searchkick/query.rb#1139
  def expand_range(range); end

  # source://searchkick//lib/searchkick/query.rb#199
  def handle_error(e); end

  # source://searchkick//lib/searchkick/query.rb#1131
  def location_value(value); end

  # source://searchkick//lib/searchkick/query.rb#247
  def prepare; end

  # source://searchkick//lib/searchkick/query.rb#232
  def reindex_command; end

  # source://searchkick//lib/searchkick/query.rb#806
  def set_aggregations(payload, filters, post_filters); end

  # source://searchkick//lib/searchkick/query.rb#706
  def set_boost_by(multiply_filters, custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#668
  def set_boost_by_distance(custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#735
  def set_boost_by_indices(payload); end

  # source://searchkick//lib/searchkick/query.rb#693
  def set_boost_by_recency(custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#719
  def set_boost_where(custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#626
  def set_conversions; end

  # source://searchkick//lib/searchkick/query.rb#655
  def set_exclude(field, analyzer); end

  # source://searchkick//lib/searchkick/query.rb#567
  def set_fields; end

  # source://searchkick//lib/searchkick/query.rb#774
  def set_highlights(payload, fields); end

  # source://searchkick//lib/searchkick/query.rb#886
  def set_order(payload); end

  # source://searchkick//lib/searchkick/query.rb#878
  def set_post_filters(payload, post_filters); end

  # source://searchkick//lib/searchkick/query.rb#746
  def set_suggestions(payload, suggest); end

  # source://searchkick//lib/searchkick/query.rb#1036
  def term_filters(field, value); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1154
  def track_total_hits?; end

  # source://searchkick//lib/searchkick/query.rb#896
  def where_filters(where); end
end

# source://searchkick//lib/searchkick/record_data.rb#2
class Searchkick::RecordData
  # @return [RecordData] a new instance of RecordData
  #
  # source://searchkick//lib/searchkick/record_data.rb#7
  def initialize(index, record); end

  # source://searchkick//lib/searchkick/record_data.rb#24
  def delete_data; end

  # source://searchkick//lib/searchkick/record_data.rb#34
  def document_type(ignore_type = T.unsafe(nil)); end

  # Returns the value of attribute index.
  #
  # source://searchkick//lib/searchkick/record_data.rb#5
  def index; end

  # source://searchkick//lib/searchkick/record_data.rb#12
  def index_data; end

  # Returns the value of attribute record.
  #
  # source://searchkick//lib/searchkick/record_data.rb#5
  def record; end

  # source://searchkick//lib/searchkick/record_data.rb#38
  def record_data; end

  # custom id can be useful for load: false
  #
  # source://searchkick//lib/searchkick/record_data.rb#29
  def search_id; end

  # source://searchkick//lib/searchkick/record_data.rb#18
  def update_data(method_name); end

  private

  # change all BigDecimal values to floats due to
  # https://github.com/rails/rails/issues/6033
  # possible loss of precision :/
  #
  # source://searchkick//lib/searchkick/record_data.rb#106
  def cast_big_decimal(obj); end

  # source://searchkick//lib/searchkick/record_data.rb#93
  def location_value(value); end

  # source://searchkick//lib/searchkick/record_data.rb#49
  def search_data(method_name = T.unsafe(nil)); end
end

# source://searchkick//lib/searchkick/record_data.rb#3
Searchkick::RecordData::TYPE_KEYS = T.let(T.unsafe(nil), Array)

# source://searchkick//lib/searchkick/record_indexer.rb#2
class Searchkick::RecordIndexer
  # @return [RecordIndexer] a new instance of RecordIndexer
  #
  # source://searchkick//lib/searchkick/record_indexer.rb#5
  def initialize(index); end

  # Returns the value of attribute index.
  #
  # source://searchkick//lib/searchkick/record_indexer.rb#3
  def index; end

  # source://searchkick//lib/searchkick/record_indexer.rb#9
  def reindex(records, mode:, method_name:, full: T.unsafe(nil), single: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/record_indexer.rb#63
  def reindex_items(klass, items, method_name:, single: T.unsafe(nil)); end

  private

  # source://searchkick//lib/searchkick/record_indexer.rb#139
  def construct_record(klass, id, routing); end

  # import in single request with retries
  #
  # source://searchkick//lib/searchkick/record_indexer.rb#89
  def import_inline(index_records, delete_records, method_name:, single:); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/record_indexer.rb#84
  def index_record?(record); end

  # source://searchkick//lib/searchkick/record_indexer.rb#107
  def maybe_bulk(index_records, delete_records, method_name, single); end

  # source://searchkick//lib/searchkick/record_indexer.rb#150
  def with_retries; end
end

# source://searchkick//lib/searchkick/reindex_queue.rb#2
class Searchkick::ReindexQueue
  # @raise [Error]
  # @return [ReindexQueue] a new instance of ReindexQueue
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#5
  def initialize(name); end

  # source://searchkick//lib/searchkick/reindex_queue.rb#49
  def clear; end

  # source://searchkick//lib/searchkick/reindex_queue.rb#53
  def length; end

  # Returns the value of attribute name.
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#3
  def name; end

  # supports single and multiple ids
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#12
  def push(record_ids); end

  # source://searchkick//lib/searchkick/reindex_queue.rb#16
  def push_records(records); end

  # TODO use reliable queuing
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#35
  def reserve(limit: T.unsafe(nil)); end

  private

  # source://searchkick//lib/searchkick/reindex_queue.rb#76
  def escape(value); end

  # source://searchkick//lib/searchkick/reindex_queue.rb#59
  def redis_key; end

  # source://searchkick//lib/searchkick/reindex_queue.rb#67
  def redis_version; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#63
  def supports_rpop_with_count?; end
end

# source://searchkick//lib/searchkick/reindex_v2_job.rb#2
class Searchkick::ReindexV2Job < ::ActiveJob::Base
  # source://searchkick//lib/searchkick/reindex_v2_job.rb#5
  def perform(class_name, id, method_name = T.unsafe(nil), routing: T.unsafe(nil), index_name: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4.3/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# source://searchkick//lib/searchkick/relation.rb#2
class Searchkick::Relation
  # @return [Relation] a new instance of Relation
  #
  # source://searchkick//lib/searchkick/relation.rb#14
  def initialize(model, term = T.unsafe(nil), **options); end

  # source://searchkick//lib/searchkick/relation.rb#8
  def body(*_arg0, **_arg1, &_arg2); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#196
  def except(*keys); end

  # source://searchkick//lib/searchkick/relation.rb#30
  def execute; end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#179
  def includes(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#184
  def includes!(*values); end

  # same as Active Record
  #
  # source://searchkick//lib/searchkick/relation.rb#24
  def inspect; end

  # Returns the value of attribute model.
  #
  # source://searchkick//lib/searchkick/relation.rb#11
  def klass; end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#36
  def limit(value); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#41
  def limit!(value); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#201
  def load; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/relation.rb#206
  def loaded?; end

  # source://activesupport/7.0.4.3/lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, **_arg2, &block); end

  # Returns the value of attribute model.
  #
  # source://searchkick//lib/searchkick/relation.rb#11
  def model; end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#48
  def offset(value = T.unsafe(nil)); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#58
  def offset!(value); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#191
  def only(*keys); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#126
  def order(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#131
  def order!(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#65
  def page(value); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#70
  def page!(value); end

  # source://searchkick//lib/searchkick/relation.rb#8
  def params(*_arg0, **_arg1, &_arg2); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#77
  def per_page(value = T.unsafe(nil)); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#87
  def per_page!(value); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#139
  def reorder(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#144
  def reorder!(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#167
  def reselect(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#172
  def reselect!(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#114
  def rewhere(value); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#119
  def rewhere!(value); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#151
  def select(*values, &block); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#160
  def select!(*values); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#94
  def where(value = T.unsafe(nil)); end

  # experimental
  #
  # source://searchkick//lib/searchkick/relation.rb#103
  def where!(value); end

  private

  # @raise [Error]
  #
  # source://searchkick//lib/searchkick/relation.rb#229
  def check_loaded; end

  # provides *very* basic protection from unfiltered parameters
  # this is not meant to be comprehensive and may be expanded in the future
  #
  # source://searchkick//lib/searchkick/relation.rb#238
  def ensure_permitted(obj); end

  # source://searchkick//lib/searchkick/relation.rb#242
  def initialize_copy(other); end

  # source://searchkick//lib/searchkick/relation.rb#221
  def private_execute; end

  # source://searchkick//lib/searchkick/relation.rb#225
  def query; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/relation.rb#210
  def respond_to_missing?(method_name, include_all); end
end

# source://searchkick//lib/searchkick/relation.rb#3
Searchkick::Relation::NO_DEFAULT_VALUE = T.let(T.unsafe(nil), Object)

# source://searchkick//lib/searchkick/relation_indexer.rb#2
class Searchkick::RelationIndexer
  # @return [RelationIndexer] a new instance of RelationIndexer
  #
  # source://searchkick//lib/searchkick/relation_indexer.rb#5
  def initialize(index); end

  # source://searchkick//lib/searchkick/relation_indexer.rb#53
  def batch_completed(batch_id); end

  # source://searchkick//lib/searchkick/relation_indexer.rb#49
  def batches_left; end

  # Returns the value of attribute index.
  #
  # source://searchkick//lib/searchkick/relation_indexer.rb#3
  def index; end

  # source://searchkick//lib/searchkick/relation_indexer.rb#9
  def reindex(relation, mode:, method_name: T.unsafe(nil), full: T.unsafe(nil), resume: T.unsafe(nil), scope: T.unsafe(nil)); end

  private

  # source://searchkick//lib/searchkick/relation_indexer.rb#141
  def batch_job(class_name, batch_id, record_ids); end

  # source://searchkick//lib/searchkick/relation_indexer.rb#127
  def batch_size; end

  # source://searchkick//lib/searchkick/relation_indexer.rb#151
  def batches_key; end

  # @yield [items]
  #
  # source://searchkick//lib/searchkick/relation_indexer.rb#113
  def each_batch(relation, batch_size:); end

  # source://searchkick//lib/searchkick/relation_indexer.rb#131
  def full_reindex_async(relation); end

  # source://searchkick//lib/searchkick/relation_indexer.rb#70
  def in_batches(relation); end

  # source://searchkick//lib/searchkick/relation_indexer.rb#59
  def resume_relation(relation); end
end

# source://searchkick//lib/searchkick/results.rb#2
class Searchkick::Results
  include ::Enumerable
  extend ::Forwardable

  # @return [Results] a new instance of Results
  #
  # source://searchkick//lib/searchkick/results.rb#11
  def initialize(klass, response, options = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/results.rb#44
  def aggregations; end

  # source://searchkick//lib/searchkick/results.rb#48
  def aggs; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def any?(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/results.rb#207
  def clear_scroll; end

  # source://searchkick//lib/searchkick/results.rb#100
  def current_page; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def empty?(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/results.rb#79
  def entry_name(options = T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/results.rb#67
  def error; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#132
  def first_page?; end

  # source://searchkick//lib/searchkick/results.rb#152
  def highlights(multiple: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/results.rb#144
  def hits; end

  # TODO remove klass and options in 6.0
  #
  # source://searchkick//lib/searchkick/results.rb#7
  def klass; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#136
  def last_page?; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def length(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/results.rb#104
  def limit_value; end

  # source://searchkick//lib/searchkick/results.rb#30
  def missing_records; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#174
  def misspellings?; end

  # source://searchkick//lib/searchkick/results.rb#71
  def model_name; end

  # source://searchkick//lib/searchkick/results.rb#128
  def next_page; end

  # source://searchkick//lib/searchkick/results.rb#113
  def num_pages; end

  # source://searchkick//lib/searchkick/results.rb#118
  def offset; end

  # source://searchkick//lib/searchkick/results.rb#118
  def offset_value; end

  # TODO remove klass and options in 6.0
  #
  # source://searchkick//lib/searchkick/results.rb#7
  def options; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#140
  def out_of_range?; end

  # source://searchkick//lib/searchkick/results.rb#109
  def padding; end

  # source://searchkick//lib/searchkick/results.rb#104
  def per_page; end

  # source://searchkick//lib/searchkick/results.rb#123
  def prev_page; end

  # source://searchkick//lib/searchkick/results.rb#123
  def previous_page; end

  # TODO remove klass and options in 6.0
  #
  # source://searchkick//lib/searchkick/results.rb#7
  def response; end

  # TODO make private in 6.0
  #
  # source://searchkick//lib/searchkick/results.rb#18
  def results; end

  # @raise [Error]
  #
  # source://searchkick//lib/searchkick/results.rb#182
  def scroll; end

  # source://searchkick//lib/searchkick/results.rb#178
  def scroll_id; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def size(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def slice(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/results.rb#34
  def suggestions; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def to_ary(*args, **_arg1, &block); end

  # source://searchkick//lib/searchkick/results.rb#63
  def took; end

  # source://searchkick//lib/searchkick/results.rb#89
  def total_count; end

  # source://searchkick//lib/searchkick/results.rb#89
  def total_entries; end

  # source://searchkick//lib/searchkick/results.rb#113
  def total_pages; end

  # source://searchkick//lib/searchkick/results.rb#158
  def with_highlights(multiple: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/results.rb#22
  def with_hit; end

  # source://searchkick//lib/searchkick/results.rb#166
  def with_score; end

  private

  # source://searchkick//lib/searchkick/results.rb#342
  def base_field(k); end

  # source://searchkick//lib/searchkick/results.rb#304
  def build_hits; end

  # source://searchkick//lib/searchkick/results.rb#332
  def combine_includes(result, inc); end

  # source://searchkick//lib/searchkick/results.rb#346
  def hit_highlights(hit, multiple: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/results.rb#313
  def results_query(records, hits); end

  # source://searchkick//lib/searchkick/results.rb#220
  def with_hit_and_missing_records; end
end

# source://searchkick//lib/searchkick.rb#48
class Searchkick::UnsupportedVersionError < ::Searchkick::Error
  # source://searchkick//lib/searchkick.rb#49
  def message; end
end

# source://searchkick//lib/searchkick/version.rb#2
Searchkick::VERSION = T.let(T.unsafe(nil), String)

# source://searchkick//lib/searchkick/where.rb#2
class Searchkick::Where
  # @return [Where] a new instance of Where
  #
  # source://searchkick//lib/searchkick/where.rb#3
  def initialize(relation); end

  # source://searchkick//lib/searchkick/where.rb#7
  def not(value); end
end

# source://searchkick//lib/searchkick/railtie.rb#1
module Searckick; end

# source://searchkick//lib/searchkick/railtie.rb#2
class Searckick::Railtie < ::Rails::Railtie; end
