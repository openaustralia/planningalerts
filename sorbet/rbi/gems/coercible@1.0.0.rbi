# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `coercible` gem.
# Please instead update this file by running `bin/tapioca gem coercible`.

# source://coercible//lib/coercible.rb#1
module Coercible
  class << self
    # Test for rubinius platform
    #
    # @api private
    # @return [true] if running under rubinius
    # @return [false] otherwise
    #
    # source://coercible//lib/coercible.rb#15
    def rbx?; end
  end
end

# Coercer object
#
# @api public
# @example
#
#   coercer = Coercible::Coercer.new
#
#   coercer[String].to_boolean('yes') # => true
#   coercer[Integer].to_string(1)     # => '1'
#
# source://coercible//lib/coercible/coercer.rb#14
class Coercible::Coercer
  # Initialize a new coercer instance
  #
  # @api private
  # @param coercers [Hash]
  # @param config [Configuration]
  # @return [undefined]
  #
  # source://coercible//lib/coercible/coercer.rb#84
  def initialize(config, coercers = T.unsafe(nil)); end

  # Access a specific coercer object for the given type
  #
  # @api public
  # @example
  #
  #   coercer[String] # => string coercer
  #   coercer[Integer] # => integer coercer
  # @param type [Class]
  # @return [Coercer::Object]
  #
  # source://coercible//lib/coercible/coercer.rb#101
  def [](klass); end

  # Return coercer instances
  #
  # @api private
  # @return [Array<Coercer::Object>]
  #
  # source://coercible//lib/coercible/coercer.rb#21
  def coercers; end

  # Returns global configuration for coercers
  #
  # @api private
  # @return [Configuration]
  #
  # source://coercible//lib/coercible/coercer.rb#28
  def config; end

  private

  # Find configuration for the given coercer type
  #
  # @api private
  # @return [Configuration]
  #
  # source://coercible//lib/coercible/coercer.rb#130
  def config_for(coercer); end

  # Initialize a new coercer instance for the given type
  #
  # If a coercer class supports configuration it will receive it from the
  # global configuration object
  #
  # @api private
  # @return [Coercer::Object]
  #
  # source://coercible//lib/coercible/coercer.rb#115
  def initialize_coercer(klass); end

  class << self
    # Build a new coercer
    #
    # @api public
    # @example
    #
    #   Coercible::Coercer.new { |config| # set configuration }
    # @return [Coercer]
    # @yieldparam [Configuration]
    #
    # source://coercible//lib/coercible/coercer.rb#41
    def new(&block); end

    private

    # Return configuration keys for Coercer instance
    #
    # @api private
    # @return [Array<Symbol>]
    #
    # source://coercible//lib/coercible/coercer.rb#58
    def config_keys; end

    # Return coercer classes that are configurable
    #
    # @api private
    # @return [Array<Class>]
    #
    # source://coercible//lib/coercible/coercer.rb#68
    def configurable_coercers(&block); end
  end
end

# Coerce Array values
#
# @api public
#
# source://coercible//lib/coercible/coercer/array.rb#5
class Coercible::Coercer::Array < ::Coercible::Coercer::Object
  # Creates a Set instance from an Array
  #
  # @api private
  # @param value [Array]
  # @return [Array]
  #
  # source://coercible//lib/coercible/coercer/array.rb#17
  def to_set(value); end
end

# @api public
#
# source://coercible//lib/coercible/coercer/array.rb#8
Coercible::Coercer::Array::TIME_SEGMENTS = T.let(T.unsafe(nil), Array)

# @api public
#
# source://coercible//lib/coercible/coercer/configurable.rb#4
module Coercible::Coercer::Configurable
  # Build configuration object for the coercer class
  #
  # @api public
  # @example
  #
  #   coercer_class = Class.new(Coercer::Object) do
  #   extend Configurable
  #
  #   config_keys [ :foo, :bar ]
  #   end
  #
  #   coercer_class.config do |config|
  #   config.foo = '1'
  #   config.bar = '2'
  #   end
  # @return [Configuration]
  # @yieldparam [Configuration]
  #
  # source://coercible//lib/coercible/coercer/configurable.rb#36
  def config(&block); end

  # Return configuration name in the global config
  #
  # @api private
  # @return [Symbol]
  #
  # source://coercible//lib/coercible/coercer/configurable.rb#47
  def config_name; end

  # Return configuration class
  #
  # @api private
  # @return [Class:Configuration]
  #
  # source://coercible//lib/coercible/coercer/configurable.rb#56
  def configuration_class; end

  class << self
    # Add configuration-specific option keys to the descendant
    #
    # @api private
    # @return [self]
    #
    # source://coercible//lib/coercible/coercer/configurable.rb#11
    def extended(coercer); end
  end
end

# Coerce Date values
#
# @api public
#
# source://coercible//lib/coercible/coercer/date.rb#5
class Coercible::Coercer::Date < ::Coercible::Coercer::Object
  include ::Coercible::Coercer::TimeCoercions

  # Passthrough the value
  #
  # @api public
  # @example
  #   coercer[DateTime].to_date(date)  # => Date object
  # @param value [DateTime]
  # @return [Date]
  #
  # source://coercible//lib/coercible/coercer/date.rb#20
  def to_date(value); end
end

# Coerce DateTime values
#
# @api public
#
# source://coercible//lib/coercible/coercer/date_time.rb#5
class Coercible::Coercer::DateTime < ::Coercible::Coercer::Object
  include ::Coercible::Coercer::TimeCoercions

  # Passthrough the value
  #
  # @api public
  # @example
  #   coercer[DateTime].to_datetime(datetime)  # => DateTime object
  # @param value [DateTime]
  # @return [Date]
  #
  # source://coercible//lib/coercible/coercer/date_time.rb#20
  def to_datetime(value); end
end

# Coerce BigDecimal values
#
# @api public
#
# source://coercible//lib/coercible/coercer/decimal.rb#5
class Coercible::Coercer::Decimal < ::Coercible::Coercer::Numeric
  # Passthrough the value
  #
  # @api public
  # @example
  #   Coercible::Coercion::BigDecimal.to_decimal(BigDecimal('1.0')) # => BigDecimal('1.0')
  # @param value [BigDecimal]
  # @return [Fixnum]
  #
  # source://coercible//lib/coercible/coercer/decimal.rb#34
  def to_decimal(value); end

  # Coerce given value to String
  #
  # @api public
  # @example
  #   coercer[BigDecimal].to_string(BigDecimal('1.0')) # => "1.0"
  # @param value [BigDecimal]
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/decimal.rb#20
  def to_string(value); end
end

# @api public
#
# source://coercible//lib/coercible/coercer/decimal.rb#8
Coercible::Coercer::Decimal::FLOAT_FORMAT = T.let(T.unsafe(nil), String)

# Coerce false values
#
# @api public
#
# source://coercible//lib/coercible/coercer/false_class.rb#5
class Coercible::Coercer::FalseClass < ::Coercible::Coercer::Object
  # Coerce given value to String
  #
  # @api public
  # @example
  #   coercer[FalseClass].to_string(false)  # => "false"
  # @param value [FalseClass]
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/false_class.rb#18
  def to_string(value); end
end

# Coerce Float values
#
# @api public
#
# source://coercible//lib/coercible/coercer/float.rb#5
class Coercible::Coercer::Float < ::Coercible::Coercer::Numeric
  # Coerce given value to a DateTime
  #
  # @api public
  # @example
  #   datetime = Coercible::Coercion::Float.to_datetime(1000000000.999)  # => Sun, 09 Sep 2001 01:46:40 +0000
  #   datetime.to_f  # => 1000000000.999
  # @param value [Float]
  # @return [DateTime]
  #
  # source://coercible//lib/coercible/coercer/float.rb#33
  def to_datetime(value); end

  # Passthrough the value
  #
  # @api public
  # @example
  #   coercer[Float].to_float(1.0)  # => 1.0
  # @param value [Float]
  # @return [Integer]
  #
  # source://coercible//lib/coercible/coercer/float.rb#18
  def to_float(value); end
end

# Coerce Hash values
#
# @api public
#
# source://coercible//lib/coercible/coercer/hash.rb#5
class Coercible::Coercer::Hash < ::Coercible::Coercer::Object
  # Creates a Date instance from a Hash
  #
  # Valid keys are: :year, :month, :day, :hour
  #
  # @api private
  # @param value [Hash]
  # @return [Date]
  #
  # source://coercible//lib/coercible/coercer/hash.rb#32
  def to_date(value); end

  # Creates a DateTime instance from a Hash
  #
  # Valid keys are: :year, :month, :day, :hour, :min, :sec
  #
  # @api private
  # @param value [Hash]
  # @return [DateTime]
  #
  # source://coercible//lib/coercible/coercer/hash.rb#45
  def to_datetime(value); end

  # Creates a Time instance from a Hash
  #
  # Valid keys are: :year, :month, :day, :hour, :min, :sec
  #
  # @api private
  # @param value [Hash]
  # @return [Time]
  #
  # source://coercible//lib/coercible/coercer/hash.rb#19
  def to_time(value); end

  private

  # Extracts the given args from a Hash
  #
  # If a value does not exist, it uses the value of Time.now
  #
  # @api private
  # @param value [Hash]
  # @return [Array]
  #
  # source://coercible//lib/coercible/coercer/hash.rb#60
  def extract(value); end
end

# @api public
#
# source://coercible//lib/coercible/coercer/hash.rb#8
Coercible::Coercer::Hash::TIME_SEGMENTS = T.let(T.unsafe(nil), Array)

# Coerce Fixnum values
#
# @api public
#
# source://coercible//lib/coercible/coercer/integer.rb#5
class Coercible::Coercer::Integer < ::Coercible::Coercer::Numeric
  extend ::Coercible::Coercer::Configurable

  # Initialize a new Integer coercer instance and set its configuration
  #
  # @api private
  # @return [undefined]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#59
  def initialize(coercer = T.unsafe(nil), config = T.unsafe(nil)); end

  # Return boolean map from config
  #
  # @api private
  # @return [::Hash]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#52
  def boolean_map; end

  # Return datetime format from config
  #
  # @api private
  # @return [::String]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#38
  def datetime_format; end

  # Return datetime proc from config
  #
  # @api private
  # @return [Proc]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#45
  def datetime_proc; end

  # Coerce given value to a Boolean
  #
  # @api public
  # @example with a 1
  #   coercer[Integer].to_boolean(1)  # => true
  # @example with a 0
  #   coercer[Integer].to_boolean(0)  # => false
  # @param value [Fixnum]
  # @return [BigDecimal]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#107
  def to_boolean(value); end

  # Coerce given value to a DateTime
  #
  # @api public
  # @example
  #   coercer[Integer].to_datetime(0)  # => Thu, 01 Jan 1970 00:00:00 +0000
  # @param value [Integer]
  # @return [DateTime]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#123
  def to_datetime(value); end

  # Passthrough the value
  #
  # @api public
  # @example
  #   coercer[Integer].to_integer(1)  # => 1
  # @param value [Fixnum]
  # @return [Float]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#90
  def to_integer(value); end

  # Coerce given value to String
  #
  # @api public
  # @example
  #   coercer[Integer].to_string(1)  # => "1"
  # @param value [Fixnum]
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/integer.rb#76
  def to_string(value); end

  class << self
    # Return default config for Integer coercer type
    #
    # @api private
    # @return [Configuration]
    # @see Configurable#config
    #
    # source://coercible//lib/coercible/coercer/integer.rb#19
    def config; end

    # source://coercible//lib/support/options.rb#75
    def config_keys(value = T.unsafe(nil)); end
  end
end

# Base class for all numeric Coercion classes
#
# @api public
#
# source://coercible//lib/coercible/coercer/numeric.rb#5
class Coercible::Coercer::Numeric < ::Coercible::Coercer::Object
  # Coerce a BigDecimal instance from a numeric object
  #
  # @api public
  # @example
  #   coercer[Numeric].to_decimal(Rational(2, 2))  # => BigDecimal('1.0')
  # @param value [Numeric]
  # @return [BigDecimal]
  #
  # source://coercible//lib/coercible/coercer/numeric.rb#60
  def to_decimal(value); end

  # Creates a Float instance from a numeric object
  #
  # @api public
  # @example
  #   coercer[Numeric].to_float(Rational(2, 2))  # => 1.0
  # @param value [Numeric]
  # @return [Float]
  #
  # source://coercible//lib/coercible/coercer/numeric.rb#46
  def to_float(value); end

  # Creates an Integer instance from a numeric object
  #
  # @api public
  # @example
  #   coercer[Numeric].to_integer(Rational(2, 2))  # => 1
  # @param value [Numeric]
  # @return [Integer]
  #
  # source://coercible//lib/coercible/coercer/numeric.rb#32
  def to_integer(value); end

  # Coerce given value to String
  #
  # @api public
  # @example
  #   coercer[Numeric].to_string(Rational(2, 2))  # => "1.0"
  # @param value [Numeric]
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/numeric.rb#18
  def to_string(value); end
end

# Coerce Object values
#
# @api public
#
# source://coercible//lib/coercible/coercer/object.rb#5
class Coercible::Coercer::Object
  extend ::Coercible::Options
  extend ::DescendantsTracker
  extend ::Coercible::TypeLookup

  # Initialize a new coercer instance
  #
  # @api private
  # @param coercers [Coercer]
  # @return [undefined]
  #
  # source://coercible//lib/coercible/coercer/object.rb#28
  def initialize(coercers = T.unsafe(nil)); end

  # Return if the value was successfuly coerced
  #
  # @api public
  # @example when coercion was successful
  #   coercer[String].coerced?(1) # => true
  # @example when coercion was NOT successful
  #   coercer[String].coerced?("foo") # => false
  # @return [TrueClass, FalseClass]
  #
  # source://coercible//lib/coercible/coercer/object.rb#136
  def coerced?(value); end

  # Return coercers object
  #
  # @api private
  # @return [Coercer]
  #
  # source://coercible//lib/coercible/coercer/object.rb#19
  def coercers; end

  # Inspect the coercer object
  #
  # @api public
  # @example
  #   coercer[Object].inspect # => "<Coercer::Object primitive=Object>"
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/object.rb#40
  def inspect; end

  # Create an Array from any Object
  #
  # @api public
  # @example with an object that does not respond to #to_a or #to_ary
  #   coercer[Object].to_array(value)         # => [ value ]
  # @example with an object that responds to #to_a
  #   coercer[Object].to_array(Set[ value ])  # => [ value ]
  # @example with n object that responds to #to_ary
  #   coercer[Object].to_array([ value ])     # => [ value ]
  # @param value [#to_a, #to_ary, Object]
  # @param value [#to_a, #to_ary, Object]
  # @return [Array]
  #
  # source://coercible//lib/coercible/coercer/object.rb#61
  def to_array(value); end

  # Create a Hash from the Object if possible
  #
  # @api public
  # @example with a coercible object
  #   coercer[Object].to_hash(key => value)  # => { key => value }
  # @example with an object that is not coercible
  #   coercer[Object].to_hash(value)  # => value
  # @param value [#to_hash, Object]
  # @return [Hash] returns a Hash when the object can be coerced
  # @return [Object] returns the value when the object cannot be coerced
  #
  # source://coercible//lib/coercible/coercer/object.rb#81
  def to_hash(value); end

  # Create an Integer from the Object if possible
  #
  # @api public
  # @example with a coercible object
  #   coercer[Object].to_integer(1)  # => 1
  # @example with an object that is not coercible
  #   coercer[Object].to_integer(value)  # => value
  # @param value [#to_int, Object]
  # @return [Integer] returns an Integer when the object can be coerced
  # @return [Object] returns the value when the object cannot be coerced
  #
  # source://coercible//lib/coercible/coercer/object.rb#121
  def to_integer(value); end

  # Create a String from the Object if possible
  #
  # @api public
  # @example with a coercible object
  #   coercer[Object].to_string("string")  # => "string"
  # @example with an object that is not coercible
  #   coercer[Object].to_string(value)  # => value
  # @param value [#to_str, Object]
  # @return [String] returns a String when the object can be coerced
  # @return [Object] returns the value when the object cannot be coerced
  #
  # source://coercible//lib/coercible/coercer/object.rb#101
  def to_string(value); end

  private

  # Try to use native coercion method on the given value
  #
  # @api private
  # @param value [Object]
  # @param method [Symbol]
  # @return [Object]
  #
  # source://coercible//lib/coercible/coercer/object.rb#180
  def coerce_with_method(value, method, ref_method); end

  # Passthrough given value
  #
  # @api private
  # @param value [Object]
  # @return [Object]
  #
  # source://coercible//lib/coercible/coercer/object.rb#163
  def method_missing(method, *args); end

  # Raise an unsupported coercion error
  #
  # @api private
  # @raise [UnsupportedCoercion]
  # @return [undefined]
  #
  # source://coercible//lib/coercible/coercer/object.rb#149
  def raise_unsupported_coercion(value, method); end

  class << self
    # source://coercible//lib/support/options.rb#75
    def primitive(value = T.unsafe(nil)); end
  end
end

# @api public
#
# source://coercible//lib/coercible/coercer/object.rb#12
Coercible::Coercer::Object::COERCION_METHOD_REGEXP = T.let(T.unsafe(nil), Regexp)

# Coerce String values
#
# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#5
class Coercible::Coercer::String < ::Coercible::Coercer::Object
  extend ::Coercible::Coercer::Configurable

  # Initialize a new string coercer instance
  #
  # @api private
  # @param [Coercer]
  # @param [Configuration]
  # @return [undefined]
  #
  # source://coercible//lib/coercible/coercer/string.rb#50
  def initialize(coercer = T.unsafe(nil), config = T.unsafe(nil)); end

  # Return boolean map from the config
  #
  # @api private
  # @return [::Hash]
  #
  # source://coercible//lib/coercible/coercer/string.rb#39
  def boolean_map; end

  # Coerce value to TrueClass or FalseClass
  #
  # @api public
  # @example with "T"
  #   coercer[String].to_boolean('T')  # => true
  # @example with "F"
  #   coercer[String].to_boolean('F')  # => false
  # @param [#to_s]
  # @return [Boolean]
  #
  # source://coercible//lib/coercible/coercer/string.rb#140
  def to_boolean(value); end

  # Coerce give value to a constant
  #
  # @api public
  # @example
  #   coercer[String].to_constant('String') # => String
  # @param value [String]
  # @return [Object]
  #
  # source://coercible//lib/coercible/coercer/string.rb#65
  def to_constant(value); end

  # Coerce given value to Date
  #
  # @api public
  # @example
  #   coercer[String].to_date(string)  # => Date object
  # @param value [String]
  # @return [Date]
  #
  # source://coercible//lib/coercible/coercer/string.rb#109
  def to_date(value); end

  # Coerce given value to DateTime
  #
  # @api public
  # @example
  #   coercer[String].to_datetime(string)  # => DateTime object
  # @param value [String]
  # @return [DateTime]
  #
  # source://coercible//lib/coercible/coercer/string.rb#123
  def to_datetime(value); end

  # Coerce value to decimal
  #
  # @api public
  # @example
  #   coercer[String].to_decimal('1.2')  # => #<BigDecimal:b72157d4,'0.12E1',8(8)>
  # @param value [Object]
  # @return [BigDecimal]
  #
  # source://coercible//lib/coercible/coercer/string.rb#194
  def to_decimal(value); end

  # Coerce value to float
  #
  # @api public
  # @example
  #   coercer[String].to_float('1.2')  # => 1.2
  # @param value [Object]
  # @return [Float]
  #
  # source://coercible//lib/coercible/coercer/string.rb#178
  def to_float(value); end

  # Coerce value to integer
  #
  # @api public
  # @example
  #   coercer[String].to_integer('1')  # => 1
  # @param value [Object]
  # @return [Integer]
  #
  # source://coercible//lib/coercible/coercer/string.rb#156
  def to_integer(value); end

  # Coerce give value to a symbol
  #
  # @api public
  # @example
  #   coercer[String].to_symbol('string') # => :string
  # @param value [String]
  # @return [Symbol]
  #
  # source://coercible//lib/coercible/coercer/string.rb#81
  def to_symbol(value); end

  # Coerce given value to Time
  #
  # @api public
  # @example
  #   coercer[String].to_time(string)  # => Time object
  # @param value [String]
  # @return [Time]
  #
  # source://coercible//lib/coercible/coercer/string.rb#95
  def to_time(value); end

  private

  # Lookup a constant within a module
  #
  # @api private
  # @param mod [Module]
  # @param name [String]
  # @return [Object]
  #
  # source://coercible//lib/coercible/coercer/string.rb#211
  def constant_lookup(mod, name); end

  # Parse the value or return it as-is if it is invalid
  #
  # @api private
  # @param parser [#parse]
  # @param value [String]
  # @return [Time]
  #
  # source://coercible//lib/coercible/coercer/string.rb#247
  def parse_value(parser, value, method); end

  # Match numeric string
  #
  # @api private
  # @param value [String] value to typecast
  # @param method [Symbol] method to typecast with
  # @return [Numeric] number if matched, value if no match
  #
  # source://coercible//lib/coercible/coercer/string.rb#230
  def to_numeric(value, method); end

  class << self
    # Return default configuration for string coercer type
    #
    # @api private
    # @return [Configuration]
    #
    # source://coercible//lib/coercible/coercer/string.rb#30
    def config; end

    # source://coercible//lib/support/options.rb#75
    def config_keys(value = T.unsafe(nil)); end
  end
end

# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#14
Coercible::Coercer::String::BOOLEAN_MAP = T.let(T.unsafe(nil), Hash)

# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#17
Coercible::Coercer::String::EXPONENT_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#13
Coercible::Coercer::String::FALSE_VALUES = T.let(T.unsafe(nil), Array)

# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#18
Coercible::Coercer::String::FRACTIONAL_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#16
Coercible::Coercer::String::INTEGER_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#20
Coercible::Coercer::String::NUMERIC_REGEXP = T.let(T.unsafe(nil), Regexp)

# @api public
#
# source://coercible//lib/coercible/coercer/string.rb#12
Coercible::Coercer::String::TRUE_VALUES = T.let(T.unsafe(nil), Array)

# Coerce Symbol values
#
# @api public
#
# source://coercible//lib/coercible/coercer/symbol.rb#5
class Coercible::Coercer::Symbol < ::Coercible::Coercer::Object
  # Coerce given value to String
  #
  # @api public
  # @example
  #   coercer[Symbol].to_string(:name)  # => "name"
  # @param value [Symbol]
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/symbol.rb#18
  def to_string(value); end
end

# Coerce Time values
#
# @api public
#
# source://coercible//lib/coercible/coercer/time.rb#5
class Coercible::Coercer::Time < ::Coercible::Coercer::Object
  include ::Coercible::Coercer::TimeCoercions

  # Creates a Fixnum instance from a Time object
  #
  # @api public
  # @example
  #   Coercible::Coercion::Time.to_integer(time)  # => Fixnum object
  # @param value [Time]
  # @return [Fixnum]
  #
  # source://coercible//lib/coercible/coercer/time.rb#34
  def to_integer(value); end

  # Passthrough the value
  #
  # @api public
  # @example
  #   coercer[DateTime].to_time(time)  # => Time object
  # @param value [DateTime]
  # @return [Date]
  #
  # source://coercible//lib/coercible/coercer/time.rb#20
  def to_time(value); end
end

# Common time coercion methods
#
# @api public
#
# source://coercible//lib/coercible/coercer/time_coercions.rb#5
module Coercible::Coercer::TimeCoercions
  # Coerce given value to Date
  #
  # @api public
  # @example
  #   coercer[Time].to_date(time)  # => Date object
  # @param value [Time, DateTime]
  # @return [Date]
  #
  # source://coercible//lib/coercible/coercer/time_coercions.rb#59
  def to_date(value); end

  # Coerce given value to DateTime
  #
  # @api public
  # @example
  #   coercer[Time].to_datetime(time)  # => DateTime object
  # @param value [Date, Time]
  # @return [DateTime]
  #
  # source://coercible//lib/coercible/coercer/time_coercions.rb#45
  def to_datetime(value); end

  # Coerce given value to String
  #
  # @api public
  # @example
  #   coercer[Time].to_string(time)  # => "Wed Jul 20 10:30:41 -0700 2011"
  # @param value [Date, Time, DateTime]
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/time_coercions.rb#17
  def to_string(value); end

  # Coerce given value to Time
  #
  # @api public
  # @example
  #   coercer[DateTime].to_time(datetime)  # => Time object
  # @param value [Date, DateTime]
  # @return [Time]
  #
  # source://coercible//lib/coercible/coercer/time_coercions.rb#31
  def to_time(value); end

  private

  # Try to use native coercion method on the given value
  #
  # Falls back to String-based parsing
  #
  # @api private
  # @param value [Date, DateTime, Time]
  # @param method [Symbol]
  # @return [Date, DateTime, Time]
  #
  # source://coercible//lib/coercible/coercer/time_coercions.rb#75
  def coerce_with_method(value, method); end
end

# Coerce true values
#
# @api public
#
# source://coercible//lib/coercible/coercer/true_class.rb#5
class Coercible::Coercer::TrueClass < ::Coercible::Coercer::Object
  # Coerce given value to String
  #
  # @api public
  # @example
  #   coercer[TrueClass].to_string(true)  # => "true"
  # @param value [TrueClass]
  # @return [String]
  #
  # source://coercible//lib/coercible/coercer/true_class.rb#18
  def to_string(value); end
end

# Configuration object for global and per coercer type settings
#
# source://coercible//lib/coercible/configuration.rb#5
class Coercible::Configuration
  class << self
    # Build a configuration instance
    #
    # @api private
    # @param list [Array] of accessor keys
    # @return [Configuration]
    # @yield [config]
    #
    # source://coercible//lib/coercible/configuration.rb#14
    def build(keys, &block); end
  end
end

# source://coercible//lib/coercible.rb#2
Coercible::EXTRA_CONST_ARGS = T.let(T.unsafe(nil), Array)

# A module that adds class and instance level options
#
# source://coercible//lib/support/options.rb#4
module Coercible::Options
  # Defines which options are valid for a given attribute class
  #
  # @api public
  # @example
  #   class MyAttribute < Virtus::Attribute::Object
  #   accept_options :foo, :bar
  #   end
  # @return [self]
  #
  # source://coercible//lib/support/options.rb#59
  def accept_options(*new_options); end

  # Returns an array of valid options
  #
  # @api public
  # @example
  #   Virtus::Attribute::String.accepted_options
  #   # => [:primitive, :accessor, :reader, :writer]
  # @return [Array] the array of valid option names
  #
  # source://coercible//lib/support/options.rb#45
  def accepted_options; end

  # Returns default options hash for a given attribute class
  #
  # @api public
  # @example
  #   Virtus::Attribute::String.options
  #   # => {:primitive => String}
  # @return [Hash] a hash of default option values
  #
  # source://coercible//lib/support/options.rb#28
  def options; end

  protected

  # Adds new options that an attribute class can accept
  #
  # @api private
  # @param new_options [#to_ary] new options to be added
  # @return [self]
  #
  # source://coercible//lib/support/options.rb#104
  def add_accepted_options(new_options); end

  # Adds a reader/writer method for the give option name
  #
  # @api private
  # @return [undefined]
  #
  # source://coercible//lib/support/options.rb#73
  def define_option_method(option); end

  # Sets default options
  #
  # @api private
  # @param new_options [#each] options to be set
  # @return [self]
  #
  # source://coercible//lib/support/options.rb#91
  def set_options(new_options); end

  private

  # Adds descendant to descendants array and inherits default options
  #
  # @api private
  # @param descendant [Class]
  # @return [undefined]
  #
  # source://coercible//lib/support/options.rb#118
  def inherited(descendant); end

  class << self
    # Hook called when descendant was extended
    #
    # @api private
    # @param descendant [Class, Module]
    # @return [undefined]
    #
    # source://coercible//lib/support/options.rb#14
    def extended(descendant); end
  end
end

# source://coercible//lib/support/options.rb#5
class Coercible::Options::Undefined; end

# A module that adds type lookup to a class
#
# source://coercible//lib/support/type_lookup.rb#4
module Coercible::TypeLookup
  # Returns a descendant based on a name or class
  #
  # @api public
  # @example
  #   MyClass.determine_type('String')  # => MyClass::String
  # @param class_or_name [Class, #to_s] name of a class or a class itself
  # @return [Class] a descendant
  # @return [nil] nil if the type cannot be determined by the class_or_name
  #
  # source://coercible//lib/support/type_lookup.rb#34
  def determine_type(class_or_name); end

  # Return the default primitive supported
  #
  # @api private
  # @raise [NotImplementedError]
  # @return [Class]
  #
  # source://coercible//lib/support/type_lookup.rb#43
  def primitive; end

  private

  # Determine type and cache the class
  #
  # @api private
  # @return [Class]
  #
  # source://coercible//lib/support/type_lookup.rb#54
  def determine_type_and_cache(class_or_name); end

  # Return the class given a descendant
  #
  # @api private
  # @param descendant [Class]
  # @return [Class]
  #
  # source://coercible//lib/support/type_lookup.rb#72
  def determine_type_from_descendant(descendant); end

  # Return the class given a primitive
  #
  # @api private
  # @param primitive [Class]
  # @return [Class]
  # @return [nil] nil if the type cannot be determined by the primitive
  #
  # source://coercible//lib/support/type_lookup.rb#86
  def determine_type_from_primitive(primitive); end

  # Return the class given a string
  #
  # @api private
  # @param string [String]
  # @return [Class]
  # @return [nil] nil if the type cannot be determined by the string
  #
  # source://coercible//lib/support/type_lookup.rb#106
  def determine_type_from_string(string); end

  class << self
    # Set cache ivar on the model
    #
    # @api private
    # @param model [Class]
    # @return [undefined]
    #
    # source://coercible//lib/support/type_lookup.rb#15
    def extended(model); end
  end
end

# source://coercible//lib/support/type_lookup.rb#6
Coercible::TypeLookup::TYPE_FORMAT = T.let(T.unsafe(nil), Regexp)

# source://coercible//lib/coercible.rb#4
class Coercible::UnsupportedCoercion < ::StandardError; end

# source://coercible//lib/coercible/version.rb#2
Coercible::VERSION = T.let(T.unsafe(nil), String)
