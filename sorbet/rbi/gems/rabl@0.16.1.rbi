# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rabl` gem.
# Please instead update this file by running `bin/tapioca gem rabl`.

# Defines the default cache engine for RABL when caching is invoked for a template.
# You can define your own caching engines by creating an object that responds to fetch and
# setting the configuration option:
#
#     config.cache_engine = AdvancedCacheEngine.new
#
# source://rabl//lib/rabl/cache_engine.rb#8
class LRU < ::Hash
  # @return [LRU] a new instance of LRU
  #
  # source://rabl//lib/rabl/cache_engine.rb#11
  def initialize; end

  # source://rabl//lib/rabl/cache_engine.rb#16
  def []=(k, v); end

  # source://rabl//lib/rabl/cache_engine.rb#22
  def limit_size; end

  # Returns the value of attribute max_size.
  #
  # source://rabl//lib/rabl/cache_engine.rb#9
  def max_size; end

  # Sets the attribute max_size
  #
  # @param value the value to set the attribute max_size to.
  #
  # source://rabl//lib/rabl/cache_engine.rb#9
  def max_size=(_arg0); end
end

# Rabl.register!
#
# source://rabl//lib/rabl/version.rb#1
module Rabl
  class << self
    # Returns the configuration options set for RABL
    # Rabl.configuration.include_json_root => false
    #
    # source://rabl//lib/rabl.rb#47
    def configuration; end

    # Yields a RABL configuration block
    # Rabl.configure do |config|
    #  config.include_json_root     = false
    #  config.enable_json_callbacks = true
    # end
    #
    # @yield [configuration]
    #
    # source://rabl//lib/rabl.rb#40
    def configure(&block); end

    # Initialize RABL within an application
    # Rabl.register!
    #
    # source://rabl//lib/rabl.rb#31
    def register!; end

    # Renders an object using a specified template within an application.
    # render(@post, 'posts/show', :view_path => "/path/to/app/views")
    #
    # source://rabl//lib/rabl.rb#76
    def render(object, source, options = T.unsafe(nil)); end

    # Resets the RABL configuration back to the defaults.
    #
    # source://rabl//lib/rabl.rb#52
    def reset_configuration!; end

    # Resets the RABL source cache
    #
    # source://rabl//lib/rabl.rb#70
    def reset_source_cache!; end

    # Fetches from the source_cache, stores block result in cache if nil
    # Used to cache the contents and paths to various rabl templates
    # source_cache("users/index", "path/to/view") { "/full/path/to/template/users/index" }
    #
    # source://rabl//lib/rabl.rb#59
    def source_cache(file, view_path, &block); end
  end
end

# source://rabl//lib/rabl/builder.rb#4
class Rabl::Builder
  include ::Rabl::Helpers
  include ::Rabl::Sources
  include ::Rabl::Partials

  # Constructs a new rabl hash based on given object and options
  # options = { :format => "json", :root => true, :child_root => true,
  #   :attributes, :node, :child, :glue, :extends }
  #
  # @return [Builder] a new instance of Builder
  #
  # source://rabl//lib/rabl/builder.rb#20
  def initialize(object, settings = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rabl//lib/rabl/builder.rb#29
  def engines; end

  # source://rabl//lib/rabl/builder.rb#42
  def replace_engine(engine, value); end

  # source://rabl//lib/rabl/builder.rb#46
  def to_hash(object = T.unsafe(nil), settings = T.unsafe(nil), options = T.unsafe(nil)); end

  protected

  # Indicates an attribute or method should be included in the json output
  # attribute :foo, :as => "bar"
  # attribute :foo, :as => "bar", :if => lambda { |m| m.foo }
  #
  # source://rabl//lib/rabl/builder.rb#139
  def attribute(name, options = T.unsafe(nil)); end

  # Indicates an attribute or method should be included in the json output
  # attribute :foo, :as => "bar"
  # attribute :foo, :as => "bar", :if => lambda { |m| m.foo }
  #
  # source://rabl//lib/rabl/builder.rb#139
  def attributes(name, options = T.unsafe(nil)); end

  # Evaluate conditions given a symbol/proc/lambda/variable to evaluate
  #
  # source://rabl//lib/rabl/builder.rb#206
  def call_condition_proc(condition, object); end

  # Creates a child node that is included in json output
  # child(@user) { attribute :full_name }
  # child(@user => :person) { ... }
  # child(@users => :people) { ... }
  #
  # source://rabl//lib/rabl/builder.rb#171
  def child(data, options = T.unsafe(nil), &block); end

  # Creates an arbitrary node that is included in the json output
  # node(:foo) { "bar" }
  # node(:foo, :if => lambda { |m| m.foo.present? }) { "bar" }
  #
  # source://rabl//lib/rabl/builder.rb#154
  def code(name, options = T.unsafe(nil), &block); end

  # source://rabl//lib/rabl/builder.rb#111
  def compile_settings(type); end

  # source://rabl//lib/rabl/builder.rb#92
  def deep_replace_empty_string_values(hash); end

  # source://rabl//lib/rabl/builder.rb#77
  def deep_replace_nil_values(hash); end

  # Extends an existing rabl template with additional attributes in the block
  # extends("users/show") { attribute :full_name }
  #
  # source://rabl//lib/rabl/builder.rb#198
  def extends(file, options = T.unsafe(nil), &block); end

  # Glues data from a child node to the json_output
  # glue(@user) { attribute :full_name => :user_full_name }
  #
  # source://rabl//lib/rabl/builder.rb#188
  def glue(data, options = T.unsafe(nil), &block); end

  # source://rabl//lib/rabl/builder.rb#120
  def merge_engines_into_result; end

  # Creates an arbitrary node that is included in the json output
  # node(:foo) { "bar" }
  # node(:foo, :if => lambda { |m| m.foo.present? }) { "bar" }
  #
  # source://rabl//lib/rabl/builder.rb#154
  def node(name, options = T.unsafe(nil), &block); end

  # source://rabl//lib/rabl/builder.rb#104
  def remove_nil_values; end

  # source://rabl//lib/rabl/builder.rb#88
  def replace_empty_string_values; end

  # source://rabl//lib/rabl/builder.rb#73
  def replace_nil_values; end

  # resolve_condition(:if => true) => true
  # resolve_condition(:if => 'Im truthy') => true
  # resolve_condition(:if => lambda { |m| false }) => false
  # resolve_condition(:unless => lambda { |m| false }) => true
  # resolve_condition(:unless => lambda { |m| false }, :if => proc { true}) => true
  #
  # source://rabl//lib/rabl/builder.rb#219
  def resolve_condition(options); end

  private

  # Checks if an attribute is present. If not, check if the configuration specifies that this is an error
  # attribute_present?(created_at) => true
  #
  # @return [Boolean]
  #
  # source://rabl//lib/rabl/builder.rb#231
  def attribute_present?(name); end

  # Caches the results of the block based on object cache_key
  # cache_results { compile_hash(options) }
  #
  # source://rabl//lib/rabl/builder.rb#247
  def cache_results(&block); end

  # source://rabl//lib/rabl/builder.rb#257
  def create_key(name); end

  # Returns a guess at the format in this context_scope
  # request_format => "xml"
  #
  # source://rabl//lib/rabl/builder.rb#239
  def request_format; end
end

# source://rabl//lib/rabl/builder.rb#8
Rabl::Builder::SETTING_TYPES = T.let(T.unsafe(nil), Hash)

# source://rabl//lib/rabl/cache_engine.rb#30
class Rabl::CacheEngine
  # @return [CacheEngine] a new instance of CacheEngine
  #
  # source://rabl//lib/rabl/cache_engine.rb#31
  def initialize; end

  # Fetch given a key and options and a fallback block attempts to find the key in the cache
  # and stores the block result in there if no key is found.
  #
  # cache = Rabl::CacheEngine.new; cache.fetch("some_key") { "fallback data" }
  #
  # source://rabl//lib/rabl/cache_engine.rb#43
  def fetch(key, cache_options, &block); end

  # source://rabl//lib/rabl/cache_engine.rb#59
  def read_multi(*keys); end

  # source://rabl//lib/rabl/cache_engine.rb#51
  def write(key, value, options = T.unsafe(nil)); end
end

# Rabl.host
#
# source://rabl//lib/rabl/configuration.rb#28
class Rabl::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://rabl//lib/rabl/configuration.rb#59
  def initialize; end

  # Allows config options to be read like a hash
  #
  # @param option [Symbol] Key for a given attribute
  #
  # source://rabl//lib/rabl/configuration.rb#114
  def [](option); end

  # Returns the value of attribute bson_check_keys.
  #
  # source://rabl//lib/rabl/configuration.rb#36
  def bson_check_keys; end

  # Sets the attribute bson_check_keys
  #
  # @param value the value to set the attribute bson_check_keys to.
  #
  # source://rabl//lib/rabl/configuration.rb#36
  def bson_check_keys=(_arg0); end

  # @return the Bson encoder/engine to use.
  #
  # source://rabl//lib/rabl/configuration.rb#101
  def bson_engine; end

  # Sets the attribute bson_engine
  #
  # @param value the value to set the attribute bson_engine to.
  #
  # source://rabl//lib/rabl/configuration.rb#40
  def bson_engine=(_arg0); end

  # Returns the value of attribute bson_move_id.
  #
  # source://rabl//lib/rabl/configuration.rb#37
  def bson_move_id; end

  # Sets the attribute bson_move_id
  #
  # @param value the value to set the attribute bson_move_id to.
  #
  # source://rabl//lib/rabl/configuration.rb#37
  def bson_move_id=(_arg0); end

  # Returns the value of attribute cache_all_output.
  #
  # source://rabl//lib/rabl/configuration.rb#44
  def cache_all_output; end

  # Sets the attribute cache_all_output
  #
  # @param value the value to set the attribute cache_all_output to.
  #
  # source://rabl//lib/rabl/configuration.rb#44
  def cache_all_output=(_arg0); end

  # Returns the value of attribute cache_engine.
  #
  # source://rabl//lib/rabl/configuration.rb#47
  def cache_engine; end

  # Sets the attribute cache_engine
  #
  # @param value the value to set the attribute cache_engine to.
  #
  # source://rabl//lib/rabl/configuration.rb#47
  def cache_engine=(_arg0); end

  # Returns the value of attribute cache_sources.
  #
  # source://rabl//lib/rabl/configuration.rb#43
  def cache_sources; end

  # Sets the attribute cache_sources
  #
  # @param value the value to set the attribute cache_sources to.
  #
  # source://rabl//lib/rabl/configuration.rb#43
  def cache_sources=(_arg0); end

  # Returns the value of attribute camelize_keys.
  #
  # source://rabl//lib/rabl/configuration.rb#55
  def camelize_keys; end

  # Sets the attribute camelize_keys
  #
  # @param value the value to set the attribute camelize_keys to.
  #
  # source://rabl//lib/rabl/configuration.rb#55
  def camelize_keys=(_arg0); end

  # Returns merged default and inputted xml options
  #
  # source://rabl//lib/rabl/configuration.rb#119
  def default_xml_options; end

  # Returns the value of attribute enable_json_callbacks.
  #
  # source://rabl//lib/rabl/configuration.rb#35
  def enable_json_callbacks; end

  # Sets the attribute enable_json_callbacks
  #
  # @param value the value to set the attribute enable_json_callbacks to.
  #
  # source://rabl//lib/rabl/configuration.rb#35
  def enable_json_callbacks=(_arg0); end

  # Returns the value of attribute escape_all_output.
  #
  # source://rabl//lib/rabl/configuration.rb#45
  def escape_all_output; end

  # Sets the attribute escape_all_output
  #
  # @param value the value to set the attribute escape_all_output to.
  #
  # source://rabl//lib/rabl/configuration.rb#45
  def escape_all_output=(_arg0); end

  # Returns the value of attribute exclude_empty_values_in_collections.
  #
  # source://rabl//lib/rabl/configuration.rb#54
  def exclude_empty_values_in_collections; end

  # Sets the attribute exclude_empty_values_in_collections
  #
  # @param value the value to set the attribute exclude_empty_values_in_collections to.
  #
  # source://rabl//lib/rabl/configuration.rb#54
  def exclude_empty_values_in_collections=(_arg0); end

  # Returns the value of attribute exclude_nil_values.
  #
  # source://rabl//lib/rabl/configuration.rb#53
  def exclude_nil_values; end

  # Sets the attribute exclude_nil_values
  #
  # @param value the value to set the attribute exclude_nil_values to.
  #
  # source://rabl//lib/rabl/configuration.rb#53
  def exclude_nil_values=(_arg0); end

  # Returns the value of attribute include_bson_root.
  #
  # source://rabl//lib/rabl/configuration.rb#34
  def include_bson_root; end

  # Sets the attribute include_bson_root
  #
  # @param value the value to set the attribute include_bson_root to.
  #
  # source://rabl//lib/rabl/configuration.rb#34
  def include_bson_root=(_arg0); end

  # Returns the value of attribute include_child_root.
  #
  # source://rabl//lib/rabl/configuration.rb#30
  def include_child_root; end

  # Sets the attribute include_child_root
  #
  # @param value the value to set the attribute include_child_root to.
  #
  # source://rabl//lib/rabl/configuration.rb#30
  def include_child_root=(_arg0); end

  # Returns the value of attribute include_json_root.
  #
  # source://rabl//lib/rabl/configuration.rb#29
  def include_json_root; end

  # Sets the attribute include_json_root
  #
  # @param value the value to set the attribute include_json_root to.
  #
  # source://rabl//lib/rabl/configuration.rb#29
  def include_json_root=(_arg0); end

  # Returns the value of attribute include_msgpack_root.
  #
  # source://rabl//lib/rabl/configuration.rb#31
  def include_msgpack_root; end

  # Sets the attribute include_msgpack_root
  #
  # @param value the value to set the attribute include_msgpack_root to.
  #
  # source://rabl//lib/rabl/configuration.rb#31
  def include_msgpack_root=(_arg0); end

  # Returns the value of attribute include_plist_root.
  #
  # source://rabl//lib/rabl/configuration.rb#32
  def include_plist_root; end

  # Sets the attribute include_plist_root
  #
  # @param value the value to set the attribute include_plist_root to.
  #
  # source://rabl//lib/rabl/configuration.rb#32
  def include_plist_root=(_arg0); end

  # Returns the value of attribute include_xml_root.
  #
  # source://rabl//lib/rabl/configuration.rb#33
  def include_xml_root; end

  # Sets the attribute include_xml_root
  #
  # @param value the value to set the attribute include_xml_root to.
  #
  # source://rabl//lib/rabl/configuration.rb#33
  def include_xml_root=(_arg0); end

  # @return The JSON engine used to encode Rabl templates into JSON
  #
  # source://rabl//lib/rabl/configuration.rb#89
  def json_engine; end

  # Sets the attribute json_engine
  #
  # @param value the value to set the attribute json_engine to.
  #
  # source://rabl//lib/rabl/configuration.rb#38
  def json_engine=(_arg0); end

  # @return the MessagePack encoder/engine to use.
  #
  # source://rabl//lib/rabl/configuration.rb#95
  def msgpack_engine; end

  # Sets the attribute msgpack_engine
  #
  # @param value the value to set the attribute msgpack_engine to.
  #
  # source://rabl//lib/rabl/configuration.rb#39
  def msgpack_engine=(_arg0); end

  # Returns the value of attribute perform_caching.
  #
  # source://rabl//lib/rabl/configuration.rb#49
  def perform_caching; end

  # Sets the attribute perform_caching
  #
  # @param value the value to set the attribute perform_caching to.
  #
  # source://rabl//lib/rabl/configuration.rb#49
  def perform_caching=(_arg0); end

  # @return the Plist encoder/engine to use.
  #
  # source://rabl//lib/rabl/configuration.rb#107
  def plist_engine; end

  # Sets the attribute plist_engine
  #
  # @param value the value to set the attribute plist_engine to.
  #
  # source://rabl//lib/rabl/configuration.rb#41
  def plist_engine=(_arg0); end

  # Returns the value of attribute raise_on_missing_attribute.
  #
  # source://rabl//lib/rabl/configuration.rb#48
  def raise_on_missing_attribute; end

  # Sets the attribute raise_on_missing_attribute
  #
  # @param value the value to set the attribute raise_on_missing_attribute to.
  #
  # source://rabl//lib/rabl/configuration.rb#48
  def raise_on_missing_attribute=(_arg0); end

  # Returns the value of attribute replace_empty_string_values_with_nil_values.
  #
  # source://rabl//lib/rabl/configuration.rb#52
  def replace_empty_string_values_with_nil_values; end

  # Sets the attribute replace_empty_string_values_with_nil_values
  #
  # @param value the value to set the attribute replace_empty_string_values_with_nil_values to.
  #
  # source://rabl//lib/rabl/configuration.rb#52
  def replace_empty_string_values_with_nil_values=(_arg0); end

  # Returns the value of attribute replace_nil_values_with_empty_strings.
  #
  # source://rabl//lib/rabl/configuration.rb#51
  def replace_nil_values_with_empty_strings; end

  # Sets the attribute replace_nil_values_with_empty_strings
  #
  # @param value the value to set the attribute replace_nil_values_with_empty_strings to.
  #
  # source://rabl//lib/rabl/configuration.rb#51
  def replace_nil_values_with_empty_strings=(_arg0); end

  # Returns the value of attribute use_read_multi.
  #
  # source://rabl//lib/rabl/configuration.rb#50
  def use_read_multi; end

  # Sets the attribute use_read_multi
  #
  # @param value the value to set the attribute use_read_multi to.
  #
  # source://rabl//lib/rabl/configuration.rb#50
  def use_read_multi=(_arg0); end

  # Returns the value of attribute view_paths.
  #
  # source://rabl//lib/rabl/configuration.rb#46
  def view_paths; end

  # Sets the attribute view_paths
  #
  # @param value the value to set the attribute view_paths to.
  #
  # source://rabl//lib/rabl/configuration.rb#46
  def view_paths=(_arg0); end

  # Sets the attribute xml_options
  #
  # @param value the value to set the attribute xml_options to.
  #
  # source://rabl//lib/rabl/configuration.rb#42
  def xml_options=(_arg0); end
end

# source://rabl//lib/rabl/configuration.rb#57
Rabl::Configuration::DEFAULT_XML_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://rabl//lib/rabl/digestor.rb#6
class Rabl::Digestor < ::ActionView::Digestor
  private

  # source://rabl//lib/rabl/digestor.rb#16
  def dependency_digest; end
end

# source://rabl//lib/rabl/engine.rb#2
class Rabl::Engine
  include ::Rabl::Helpers
  include ::Rabl::Sources
  include ::Rabl::Partials
  include ::Rabl::Helpers::Escaper

  # Constructs a new ejs engine based on given vars, handler and declarations
  # Rabl::Engine.new("...source...", { :format => "xml", :root => true, :view_path => "/path/to/views" })
  #
  # @return [Engine] a new instance of Engine
  #
  # source://rabl//lib/rabl/engine.rb#13
  def initialize(source, options = T.unsafe(nil)); end

  # Renders the representation based on source, object, context_scope and locals
  # Rabl::Engine.new("...source...", { :format => "xml" }).apply(context_scope, { :foo => "bar", :object => @user })
  #
  # source://rabl//lib/rabl/engine.rb#30
  def apply(context_scope, locals, &block); end

  # Indicates an attribute or method should be included in the json output
  # attribute :foo, :as => "bar"
  # attribute :foo => :bar, :bar => :baz
  # attribute :foo => :bar, :bar => :baz, :if => lambda { |r| r.foo }
  #
  # source://rabl//lib/rabl/engine.rb#230
  def attribute(*args); end

  # Indicates an attribute or method should be included in the json output
  # attribute :foo, :as => "bar"
  # attribute :foo => :bar, :bar => :baz
  # attribute :foo => :bar, :bar => :baz, :if => lambda { |r| r.foo }
  #
  # source://rabl//lib/rabl/engine.rb#230
  def attributes(*args); end

  # Sets the cache key to be used by ActiveSupport::Cache.expand_cache_key
  # cache @user            # calls @user.cache_key
  # cache ['rabl', @user]  # calls @user.cache_key and prefixes with rabl/
  # cache 'user'           # explicit key of 'user'
  # cache                  # uses the current item within a collection
  # cache 'user', expires_in: 1.hour
  # options is passed through to the cache store
  #
  # source://rabl//lib/rabl/engine.rb#220
  def cache(key = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rabl//lib/rabl/engine.rb#55
  def cache_key; end

  # Disables reading (but not writing) from the cache when rendering.
  #
  # source://rabl//lib/rabl/engine.rb#293
  def cache_read_on_render=(read); end

  # @return [Boolean]
  #
  # source://rabl//lib/rabl/engine.rb#297
  def cache_read_on_render?; end

  # Creates a child node that is included in json output
  # child(@user) { attribute :full_name }
  #
  # source://rabl//lib/rabl/engine.rb#257
  def child(data, options = T.unsafe(nil), &block); end

  # Creates an arbitrary node that is included in the json output.
  # node(:foo) { "bar" }
  # node(:foo, :if => lambda { ... }) { "bar" }
  #
  # source://rabl//lib/rabl/engine.rb#250
  def code(name = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Sets the object as a collection casted to a simple array
  # collection @users
  # collection @users => :people
  # collection @users, :root => :person
  # collection @users, :object_root => :person
  #
  # source://rabl//lib/rabl/engine.rb#204
  def collection(data, options = T.unsafe(nil)); end

  # Extends an existing rabl template with additional attributes in the block
  # extends("users/show", :object => @user) { attribute :full_name }
  #
  # source://rabl//lib/rabl/engine.rb#269
  def extends(file, options = T.unsafe(nil), &block); end

  # Glues data from a child node to the json_output
  # glue(@user) { attribute :full_name => :user_full_name }
  #
  # source://rabl//lib/rabl/engine.rb#263
  def glue(data, options = T.unsafe(nil), &block); end

  # Includes a helper module with a RABL template
  # helper ExampleHelper
  #
  # source://rabl//lib/rabl/engine.rb#277
  def helper(*klasses); end

  # Includes a helper module with a RABL template
  # helper ExampleHelper
  #
  # source://rabl//lib/rabl/engine.rb#277
  def helpers(*klasses); end

  # Creates an arbitrary node that is included in the json output.
  # node(:foo) { "bar" }
  # node(:foo, :if => lambda { ... }) { "bar" }
  #
  # source://rabl//lib/rabl/engine.rb#250
  def node(name = T.unsafe(nil), options = T.unsafe(nil), &block); end

  # Sets the object to be used as the data source for this template
  # object(@user)
  # object @user => :person
  # object @users
  #
  # source://rabl//lib/rabl/engine.rb#166
  def object(template_data); end

  # Returns a hash representing the partial
  # partial("users/show", :object => @user)
  # options must have :object
  # options can have :view_path, :child_root, :root
  #
  # source://rabl//lib/rabl/engine.rb#286
  def partial(file, options = T.unsafe(nil), &block); end

  # Renders the representation based on a previous apply
  # Rabl::Engine.new("...source...", { :format => "xml" }).apply(context_scope, { :foo => "bar", :object => @user }).render
  #
  # source://rabl//lib/rabl/engine.rb#47
  def render(context_scope = T.unsafe(nil), locals = T.unsafe(nil), &block); end

  # source://rabl//lib/rabl/engine.rb#190
  def root_name; end

  # Returns the current object that is the topic of this template
  # Can be the collection or the object depending on topic assigned
  # root_object => @user
  #
  # source://rabl//lib/rabl/engine.rb#183
  def root_object; end

  # source://rabl//lib/rabl/engine.rb#24
  def source=(source); end

  # Returns a bson representation of the data object
  # to_bson(:root => true)
  #
  # source://rabl//lib/rabl/engine.rb#151
  def to_bson(options = T.unsafe(nil)); end

  # source://rabl//lib/rabl/engine.rb#101
  def to_dumpable(options = T.unsafe(nil)); end

  # Returns a hash representation of the data object
  # to_hash(:root => true, :child_root => true)
  #
  # source://rabl//lib/rabl/engine.rb#82
  def to_hash(options = T.unsafe(nil)); end

  # Returns a json representation of the data object
  # to_json(:root => true)
  #
  # source://rabl//lib/rabl/engine.rb#111
  def to_json(options = T.unsafe(nil)); end

  # Returns a msgpack representation of the data object
  # to_msgpack(:root => true)
  #
  # source://rabl//lib/rabl/engine.rb#119
  def to_mpac(options = T.unsafe(nil)); end

  # Returns a msgpack representation of the data object
  # to_msgpack(:root => true)
  #
  # source://rabl//lib/rabl/engine.rb#119
  def to_msgpack(options = T.unsafe(nil)); end

  # Returns a plist representation of the data object
  # to_plist(:root => true)
  #
  # source://rabl//lib/rabl/engine.rb#128
  def to_plist(options = T.unsafe(nil)); end

  # Returns an xml representation of the data object
  # to_xml(:root => true)
  #
  # source://rabl//lib/rabl/engine.rb#136
  def to_xml(options = T.unsafe(nil)); end

  protected

  # Caches the results of the block based on object cache_key
  # cache_results { compile_hash(options) }
  #
  # source://rabl//lib/rabl/engine.rb#391
  def cache_results(&block); end

  # source://rabl//lib/rabl/engine.rb#369
  def copy_instance_variables_from(object, exclude = T.unsafe(nil)); end

  # Returns a guess at the default object for this template
  # default_object => @user
  #
  # source://rabl//lib/rabl/engine.rb#304
  def default_object; end

  # @return [Boolean]
  #
  # source://rabl//lib/rabl/engine.rb#401
  def digestor_available?; end

  # source://rabl//lib/rabl/engine.rb#428
  def eval_source(locals, &block); end

  # Returns data as json embraced with callback when detected
  # format_json({ :foo => "bar" }) => "test({ foo : 'bar' })"
  # format_json("{ foo : "bar" }") => "test({ foo : 'bar' })"
  #
  # source://rabl//lib/rabl/engine.rb#337
  def format_json(json_output); end

  # Supports calling helpers defined for the template context_scope using method_missing hook
  #
  # source://rabl//lib/rabl/engine.rb#359
  def method_missing(name, *args, **kwargs, &block); end

  # Returns a guess at the format in this context_scope
  # request_format => "xml"
  #
  # source://rabl//lib/rabl/engine.rb#315
  def request_format; end

  # Returns the request parameters if available in the context_scope
  # request_params => { :foo => "bar" }
  #
  # source://rabl//lib/rabl/engine.rb#330
  def request_params; end

  # Resets the options parsed from a rabl template.
  #
  # source://rabl//lib/rabl/engine.rb#383
  def reset_options!; end

  # source://rabl//lib/rabl/engine.rb#374
  def reset_settings!; end

  # Augments respond to supporting context_scope methods
  #
  # @return [Boolean]
  #
  # source://rabl//lib/rabl/engine.rb#354
  def respond_to?(name, include_private = T.unsafe(nil)); end

  # source://rabl//lib/rabl/engine.rb#409
  def set_instance_variables!(context_scope, locals); end

  # source://rabl//lib/rabl/engine.rb#423
  def set_locals(locals); end

  # @return [Boolean]
  #
  # source://rabl//lib/rabl/engine.rb#405
  def valid_format?(format); end
end

# List of supported rendering formats
#
# source://rabl//lib/rabl/engine.rb#8
Rabl::Engine::FORMATS = T.let(T.unsafe(nil), Array)

# source://rabl//lib/rabl/engine.rb#9
Rabl::Engine::SAFE_FORMATS = T.let(T.unsafe(nil), Array)

# source://rabl//lib/rabl/helpers.rb#4
module Rabl::Helpers
  # Returns the root for the collection
  # Sets the name of the collection i.e "people"
  #  => { "people" : [] }
  #
  # source://rabl//lib/rabl/helpers.rb#112
  def collection_root_name; end

  # Returns the context_scope wrapping this engine, used for retrieving data, invoking methods, etc
  # In Rails, this is the controller and in Padrino this is the request context
  #
  # source://rabl//lib/rabl/helpers.rb#94
  def context_scope; end

  # data_name(data) => "user"
  # data_name(@user => :person) => :person
  # data_name(@users) => :user
  # data_name([@user]) => "users"
  # data_name([]) => "array"
  #
  # source://rabl//lib/rabl/helpers.rb#28
  def data_name(data_token); end

  # data_object(data) => <AR Object>
  # data_object(@user => :person) => @user
  # data_object(:user => :person) => @_object.send(:user)
  #
  # source://rabl//lib/rabl/helpers.rb#8
  def data_object(data); end

  # data_object_attribute(data) => @_object.send(data)
  #
  # source://rabl//lib/rabl/helpers.rb#15
  def data_object_attribute(data); end

  # Returns the object rootname based on if the root should be included
  # Can be called with data as a collection or object
  # determine_object_root(@user, :user, true) => "user"
  # determine_object_root(@user, :person) => "person"
  # determine_object_root([@user, @user]) => "user"
  #
  # source://rabl//lib/rabl/helpers.rb#62
  def determine_object_root(data_token, data_name = T.unsafe(nil), include_root = T.unsafe(nil)); end

  # Fetches a key from the cache and stores rabl template result otherwise
  # fetch_from_cache('some_key') { ...rabl template result... }
  #
  # source://rabl//lib/rabl/helpers.rb#141
  def fetch_result_from_cache(cache_key, cache_options = T.unsafe(nil), &block); end

  # Returns true if the obj is a collection of items
  # is_collection?(@user) => false
  # is_collection?([]) => true
  #
  # @return [Boolean]
  #
  # source://rabl//lib/rabl/helpers.rb#84
  def is_collection?(obj, follow_symbols = T.unsafe(nil)); end

  # Returns true if the value is a name value (symbol or string)
  #
  # @return [Boolean]
  #
  # source://rabl//lib/rabl/helpers.rb#117
  def is_name_value?(val); end

  # Returns true if obj is not a collection
  # is_object?(@user) => true
  # is_object?([]) => false
  # is_object?({}) => false
  #
  # @return [Boolean]
  #
  # source://rabl//lib/rabl/helpers.rb#77
  def is_object?(obj, follow_symbols = T.unsafe(nil)); end

  # Returns the root (if any) name for an object within a collection
  # Sets the name of the object i.e "person"
  # => { "users" : [{ "person" : {} }] }
  #
  # source://rabl//lib/rabl/helpers.rb#105
  def object_root_name; end

  # Returns an Engine based representation of any data object given ejs template block
  # object_to_engine(@user) { attribute :full_name } => { ... }
  # object_to_engine(@user, :source => "...") { attribute :full_name } => { ... }
  # object_to_engine([@user], :source => "...") { attribute :full_name } => { ... }
  # options must have :source (rabl file contents)
  # options can have :source_location (source filename)
  #
  # source://rabl//lib/rabl/helpers.rb#127
  def object_to_engine(object, options = T.unsafe(nil), &block); end

  # Returns true if the cache has been enabled for the application
  #
  # @return [Boolean]
  #
  # source://rabl//lib/rabl/helpers.rb#154
  def template_cache_configured?; end

  # source://rabl//lib/rabl/helpers.rb#98
  def view_path; end

  # source://rabl//lib/rabl/helpers.rb#146
  def write_result_to_cache(cache_key, cache_options = T.unsafe(nil), &block); end
end

# source://rabl//lib/rabl/helpers.rb#162
module Rabl::Helpers::Escaper
  # source://rabl//lib/rabl/helpers.rb#163
  def escape_output(response); end

  # source://rabl//lib/rabl/helpers.rb#174
  def escape_value(value); end
end

# source://rabl//lib/rabl/multi_builder.rb#2
class Rabl::MultiBuilder
  include ::Rabl::Helpers

  # Constructs a new MultiBuilder given the data and options.
  # The options will be re-used for all Rabl::Builders.
  # Rabl::MultiBuilder.new([#<User ...>, #<User ...>, ...], { :format => 'json', :child_root => true })
  #
  # @return [MultiBuilder] a new instance of MultiBuilder
  #
  # source://rabl//lib/rabl/multi_builder.rb#8
  def initialize(data, settings = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the result of all of the builders as an array
  #
  # source://rabl//lib/rabl/multi_builder.rb#18
  def to_a; end

  private

  # source://rabl//lib/rabl/multi_builder.rb#71
  def cache_key_for(engine); end

  # source://rabl//lib/rabl/multi_builder.rb#62
  def disable_cache_read_on_render(engine); end

  # Creates a builder for each of the data objects
  # and maps the cache keys for each of the engines
  # the builders generated
  #
  # source://rabl//lib/rabl/multi_builder.rb#37
  def generate_builders; end

  # Maps a cache key to an engine
  #
  # source://rabl//lib/rabl/multi_builder.rb#54
  def map_cache_key_to_engine(engine); end

  # source://rabl//lib/rabl/multi_builder.rb#43
  def map_engines_to_builders; end

  # Returns the items that were found in the cache
  #
  # source://rabl//lib/rabl/multi_builder.rb#81
  def read_cache_results; end

  # Maps the results from the cache back to the builders
  #
  # source://rabl//lib/rabl/multi_builder.rb#93
  def replace_engines_with_cache_results; end
end

# source://rabl//lib/rabl/partials.rb#2
module Rabl::Partials
  include ::Rabl::Helpers
  include ::Rabl::Sources

  # @raise [ArgumentError]
  #
  # source://rabl//lib/rabl/partials.rb#6
  def partial_as_engine(file, options = T.unsafe(nil), &block); end
end

# source://rabl//lib/rabl/railtie.rb#2
class Rabl::Railtie < ::Rails::Railtie; end

# source://rabl//lib/rabl/renderer.rb#2
class Rabl::Renderer
  # Public: Instantiate a new renderer
  # This is a standalone class used for rendering rabl templates
  # outside of a framework like Rails. You may want to use
  # this when using Rabl to render the request objects passed to
  # message queues.
  #
  # Example:
  #   renderer = Rabl::Renderer.new('template_name', user, { :format => 'json', :view_path => 'app/views' })
  #   renderer.render # => '{"user":{"name": "ivan" }}'
  #
  # @return [Renderer] a new instance of Renderer
  #
  # source://rabl//lib/rabl/renderer.rb#26
  def initialize(source, object = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute object.
  #
  # source://rabl//lib/rabl/renderer.rb#14
  def object; end

  # Returns the value of attribute options.
  #
  # source://rabl//lib/rabl/renderer.rb#14
  def options; end

  # Public: Actually render the template to the requested output format.
  #
  # - context_scope:
  #     Override the render context_scope to the 'context_scope' object. Defaults to self.
  #
  # Returns: And object representing the tranformed object in the requested format.
  #   e.g. json, xml, bson, plist
  #
  # source://rabl//lib/rabl/renderer.rb#47
  def render(context_scope = T.unsafe(nil)); end

  protected

  # source://rabl//lib/rabl/renderer.rb#58
  def engine; end

  # Internal: Returns the model name for an object
  #
  # Example:
  #   object.class.name # => User
  #   object_model_name => "user"
  #
  # source://rabl//lib/rabl/renderer.rb#86
  def object_model_name; end

  # Returns the source given a relative template path
  #
  # source://rabl//lib/rabl/renderer.rb#63
  def process_source(source); end

  # Internal: Sets an instance variable named after the class of `object`
  #
  # Example:
  #   object.class.name # => User
  #   set_object_instance_variable # => @user == object
  #
  # source://rabl//lib/rabl/renderer.rb#76
  def set_object_instance_variable; end

  class << self
    def bson(object, source, options = T.unsafe(nil)); end
    def json(object, source, options = T.unsafe(nil)); end
    def msgpack(object, source, options = T.unsafe(nil)); end
    def plist(object, source, options = T.unsafe(nil)); end
    def xml(object, source, options = T.unsafe(nil)); end
  end
end

# source://rabl//lib/rabl/sources.rb#2
module Rabl::Sources
  include ::Rabl::Helpers

  # Returns source for a given relative file
  # fetch_source("show", :view_path => "...") => "...contents..."
  #
  # source://rabl//lib/rabl/sources.rb#7
  def fetch_source(file, options = T.unsafe(nil)); end

  private

  # Returns the rabl template by looking up files within the view_path and specified file path
  #
  # source://rabl//lib/rabl/sources.rb#75
  def fetch_manual_template(view_path, file); end

  # Returns the rabl template path for padrino views using configured views
  #
  # source://rabl//lib/rabl/sources.rb#33
  def fetch_padrino_source(file, options = T.unsafe(nil)); end

  # Returns the rabl template path for Rails, including special lookups for Rails 2 and 3
  #
  # source://rabl//lib/rabl/sources.rb#44
  def fetch_rails_source(file, options = T.unsafe(nil)); end

  # Returns the rabl template path for sinatra views using configured views
  #
  # source://rabl//lib/rabl/sources.rb#69
  def fetch_sinatra_source(file, options = T.unsafe(nil)); end

  # Returns a partialized version of a file path
  # partialized("v1/variants/variant") => "v1/variants/_variant"
  #
  # source://rabl//lib/rabl/sources.rb#81
  def partialized(file); end
end

# DependencyTracker for ActionView to support cache digest
#
# source://rabl//lib/rabl/tracker.rb#3
class Rabl::Tracker
  # @return [Tracker] a new instance of Tracker
  #
  # source://rabl//lib/rabl/tracker.rb#24
  def initialize(name, template); end

  # source://rabl//lib/rabl/tracker.rb#28
  def dependencies; end

  private

  # source://rabl//lib/rabl/tracker.rb#41
  def directory; end

  # source://rabl//lib/rabl/tracker.rb#45
  def extends_dependencies; end

  # Returns the value of attribute name.
  #
  # source://rabl//lib/rabl/tracker.rb#32
  def name; end

  # source://rabl//lib/rabl/tracker.rb#49
  def partial_dependencies; end

  # source://rabl//lib/rabl/tracker.rb#37
  def source; end

  # Returns the value of attribute template.
  #
  # source://rabl//lib/rabl/tracker.rb#32
  def template; end

  class << self
    # source://rabl//lib/rabl/tracker.rb#20
    def call(name, template); end
  end
end

# Matches:
#   extends "categories/show"
#
# source://rabl//lib/rabl/tracker.rb#6
Rabl::Tracker::EXTENDS_DEPENDENCY = T.let(T.unsafe(nil), Regexp)

# Matches:
#   partial "categories/show"
#
# source://rabl//lib/rabl/tracker.rb#14
Rabl::Tracker::PARTIAL_DEPENDENCY = T.let(T.unsafe(nil), Regexp)

# source://rabl//lib/rabl/version.rb#2
Rabl::VERSION = T.let(T.unsafe(nil), String)
