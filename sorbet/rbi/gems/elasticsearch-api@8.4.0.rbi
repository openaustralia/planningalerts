# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `elasticsearch-api` gem.
# Please instead update this file by running `bin/tapioca gem elasticsearch-api`.

# source://elasticsearch-api//lib/elasticsearch/api/version.rb#18
module Elasticsearch; end

# source://elasticsearch-api//lib/elasticsearch/api/version.rb#19
module Elasticsearch::API
  class << self
    # Auto-include all namespaces in the receiver
    #
    # source://elasticsearch-api//lib/elasticsearch/api.rb#44
    def included(base); end

    # The serializer class
    #
    # source://elasticsearch-api//lib/elasticsearch/api.rb#87
    def serializer; end

    # Access the module settings
    #
    # source://elasticsearch-api//lib/elasticsearch/api.rb#93
    def settings; end
  end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/search_shards.rb#23
module Elasticsearch::API::Actions
  # Allows to perform multiple index/update/delete operations in a single request.
  #
  # or the conveniency "combined" format can be passed, refer to Elasticsearch::API::Utils.__bulkify documentation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/bulk.rb#43
  def bulk(arguments = T.unsafe(nil)); end

  # Explicitly clears the search context for a scroll.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/clear-scroll-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/clear_scroll.rb#37
  def clear_scroll(arguments = T.unsafe(nil)); end

  # Close a point in time
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/point-in-time-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/close_point_in_time.rb#31
  def close_point_in_time(arguments = T.unsafe(nil)); end

  # Returns number of documents matching a query.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/count.rb#46
  def count(arguments = T.unsafe(nil)); end

  # Creates a new document in the index.
  #
  # Returns a 409 response when a document with a same ID already exists in the index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/create.rb#42
  def create(arguments = T.unsafe(nil)); end

  # Removes a document from the index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/delete.rb#40
  def delete(arguments = T.unsafe(nil)); end

  # Deletes documents matching the provided query.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/delete_by_query.rb#61
  def delete_by_query(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Delete By Query operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/delete_by_query_rethrottle.rb#32
  def delete_by_query_rethrottle(arguments = T.unsafe(nil)); end

  # Deletes a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/delete_script.rb#33
  def delete_script(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/exists.rb#42
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a document exists in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/exists.rb#42
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/exists_source.rb#41
  def exists_source(arguments = T.unsafe(nil)); end

  # Returns information about whether a document source exists in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/exists_source.rb#41
  def exists_source?(arguments = T.unsafe(nil)); end

  # Returns information about why a specific matches (or doesn't match) a query.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/explain.rb#45
  def explain(arguments = T.unsafe(nil)); end

  # Returns the information about the capabilities of fields among multiple indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/field_caps.rb#39
  def field_caps(arguments = T.unsafe(nil)); end

  # Returns a document.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/get.rb#43
  def get(arguments = T.unsafe(nil)); end

  # Returns a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/get_script.rb#32
  def get_script(arguments = T.unsafe(nil)); end

  # Returns all script contexts.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-contexts.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/get_script_context.rb#30
  def get_script_context(arguments = T.unsafe(nil)); end

  # Returns available script types, languages and contexts
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/get_script_languages.rb#30
  def get_script_languages(arguments = T.unsafe(nil)); end

  # Returns the source of a document.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/get_source.rb#41
  def get_source(arguments = T.unsafe(nil)); end

  # Creates or updates a document in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index.rb#44
  def index(arguments = T.unsafe(nil)); end

  # Returns basic information about the cluster.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/info.rb#30
  def info(arguments = T.unsafe(nil)); end

  # Performs a kNN search.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/knn_search.rb#37
  def knn_search(arguments = T.unsafe(nil)); end

  # Allows to get multiple documents in one request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/mget.rb#41
  def mget(arguments = T.unsafe(nil)); end

  # Allows to execute several search operations in one request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/msearch.rb#39
  def msearch(arguments = T.unsafe(nil)); end

  # Allows to execute several search template operations in one request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/msearch_template.rb#37
  def msearch_template(arguments = T.unsafe(nil)); end

  # Returns multiple termvectors in one request.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/mtermvectors.rb#44
  def mtermvectors(arguments = T.unsafe(nil)); end

  # Open a point in time that can be used in subsequent searches
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/point-in-time-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/open_point_in_time.rb#36
  def open_point_in_time(arguments = T.unsafe(nil)); end

  # Returns whether the cluster is running.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ping.rb#30
  def ping(arguments = T.unsafe(nil)); end

  # Creates or updates a script.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/put_script.rb#35
  def put_script(arguments = T.unsafe(nil)); end

  # Allows to evaluate the quality of ranked search results over a set of typical search queries
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rank_eval.rb#36
  def rank_eval(arguments = T.unsafe(nil)); end

  # Allows to copy documents from one index to another, optionally filtering the source
  # documents by a query, changing the destination index settings, or fetching the
  # documents from a remote cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/reindex.rb#41
  def reindex(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Reindex operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/reindex_rethrottle.rb#32
  def reindex_rethrottle(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/render-search-template-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/render_search_template.rb#32
  def render_search_template(arguments = T.unsafe(nil)); end

  # Allows an arbitrary script to be executed and a result to be returned
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/painless/current/painless-execute-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/scripts_painless_execute.rb#35
  def scripts_painless_execute(arguments = T.unsafe(nil)); end

  # Allows to retrieve a large numbers of results from a single search request.
  #
  # *Deprecation notice*:
  # A scroll id can be quite large and should be specified as part of the body
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html#request-body-search-scroll
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/scroll.rb#39
  def scroll(arguments = T.unsafe(nil)); end

  # Returns results matching a query.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/search.rb#76
  def search(arguments = T.unsafe(nil)); end

  # Searches a vector tile for geospatial values. Returns results as a binary Mapbox vector tile.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-vector-tile-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/search_mvt.rb#47
  def search_mvt(arguments = T.unsafe(nil)); end

  # Returns information about the indices and shards that a search request would be executed against.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-shards.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/search_shards.rb#37
  def search_shards(arguments = T.unsafe(nil)); end

  # Allows to use the Mustache language to pre-render a search definition.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/search_template.rb#45
  def search_template(arguments = T.unsafe(nil)); end

  # The terms enum API  can be used to discover terms in the index that begin with the provided string. It is designed for low-latency look-ups used in auto-complete scenarios.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-terms-enum.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/terms_enum.rb#32
  def terms_enum(arguments = T.unsafe(nil)); end

  # Deprecated: Use the plural version, {#termvectors}
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/termvectors.rb#77
  def termvector(arguments = T.unsafe(nil)); end

  # Returns information and statistics about terms in the fields of a particular document.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/termvectors.rb#44
  def termvectors(arguments = T.unsafe(nil)); end

  # Updates a document with a script or partial document.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/update.rb#45
  def update(arguments = T.unsafe(nil)); end

  # Performs an update on every document in the index without changing the source,
  # for example to pick up a mapping change.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/update_by_query.rb#64
  def update_by_query(arguments = T.unsafe(nil)); end

  # Changes the number of requests per second for a particular Update By Query operation.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/update_by_query_rethrottle.rb#32
  def update_by_query_rethrottle(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/async_search/submit.rb#23
module Elasticsearch::API::AsyncSearch
  # Proxy method for {AsyncSearchClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/async_search.rb#31
  def async_search; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/async_search/submit.rb#24
module Elasticsearch::API::AsyncSearch::Actions
  # Deletes an async search by ID. If the search is still running, the search request will be cancelled. Otherwise, the saved search results are deleted.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/async_search/delete.rb#32
  def delete(arguments = T.unsafe(nil)); end

  # Retrieves the results of a previously submitted async search request given its ID.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/async_search/get.rb#35
  def get(arguments = T.unsafe(nil)); end

  # Retrieves the status of a previously submitted async search request given its ID.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/async_search/status.rb#32
  def status(arguments = T.unsafe(nil)); end

  # Executes a search request asynchronously.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/async_search/submit.rb#74
  def submit(arguments = T.unsafe(nil)); end
end

# Client for the "async_search" namespace (includes the {AsyncSearch::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/async_search.rb#25
class Elasticsearch::API::AsyncSearch::AsyncSearchClient
  include ::Elasticsearch::API::AsyncSearch::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/autoscaling/get_autoscaling_capacity.rb#23
module Elasticsearch::API::Autoscaling
  # Proxy method for {AutoscalingClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/autoscaling.rb#31
  def autoscaling; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/autoscaling/get_autoscaling_capacity.rb#24
module Elasticsearch::API::Autoscaling::Actions
  # Deletes an autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-delete-autoscaling-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/autoscaling/delete_autoscaling_policy.rb#32
  def delete_autoscaling_policy(arguments = T.unsafe(nil)); end

  # Gets the current autoscaling capacity based on the configured autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-get-autoscaling-capacity.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/autoscaling/get_autoscaling_capacity.rb#31
  def get_autoscaling_capacity(arguments = T.unsafe(nil)); end

  # Retrieves an autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-get-autoscaling-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/autoscaling/get_autoscaling_policy.rb#32
  def get_autoscaling_policy(arguments = T.unsafe(nil)); end

  # Creates a new autoscaling policy. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/autoscaling-put-autoscaling-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/autoscaling/put_autoscaling_policy.rb#33
  def put_autoscaling_policy(arguments = T.unsafe(nil)); end
end

# Client for the "autoscaling" namespace (includes the {Autoscaling::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/autoscaling.rb#25
class Elasticsearch::API::Autoscaling::AutoscalingClient
  include ::Elasticsearch::API::Autoscaling::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/cat/shards.rb#23
module Elasticsearch::API::Cat
  # Proxy method for {CatClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/cat.rb#31
  def cat; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/cat/shards.rb#24
module Elasticsearch::API::Cat::Actions
  # Shows information about currently configured aliases to indices including filter and routing infos.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-alias.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/aliases.rb#39
  def aliases(arguments = T.unsafe(nil)); end

  # Provides a snapshot of how many shards are allocated to each data node and how much disk space they are using.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-allocation.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/allocation.rb#40
  def allocation(arguments = T.unsafe(nil)); end

  # Returns information about existing component_templates templates.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-compoentn-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/component_templates.rb#39
  def component_templates(arguments = T.unsafe(nil)); end

  # Provides quick access to the document count of the entire cluster, or individual indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-count.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/count.rb#37
  def count(arguments = T.unsafe(nil)); end

  # Shows how much heap memory is currently being used by fielddata on every data node in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-fielddata.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/fielddata.rb#38
  def fielddata(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster health.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-health.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/health.rb#38
  def health(arguments = T.unsafe(nil)); end

  # Returns help for the Cat APIs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/help.rb#33
  def help(arguments = T.unsafe(nil)); end

  # Returns information about indices: number of primaries and replicas, document counts, disk size, ...
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/indices.rb#44
  def indices(arguments = T.unsafe(nil)); end

  # Returns information about the master node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-master.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/master.rb#38
  def master(arguments = T.unsafe(nil)); end

  # Gets configuration and usage information about data frame analytics jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/ml_data_frame_analytics.rb#40
  def ml_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Gets configuration and usage information about datafeeds.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-datafeeds.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/ml_datafeeds.rb#39
  def ml_datafeeds(arguments = T.unsafe(nil)); end

  # Gets configuration and usage information about anomaly detection jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/current/cat-anomaly-detectors.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/ml_jobs.rb#40
  def ml_jobs(arguments = T.unsafe(nil)); end

  # Gets configuration and usage information about inference trained models.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-trained-model.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/ml_trained_models.rb#42
  def ml_trained_models(arguments = T.unsafe(nil)); end

  # Returns information about custom node attributes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-nodeattrs.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/nodeattrs.rb#38
  def nodeattrs(arguments = T.unsafe(nil)); end

  # Returns basic statistics about performance of cluster nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-nodes.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/nodes.rb#41
  def nodes(arguments = T.unsafe(nil)); end

  # Returns a concise representation of the cluster pending tasks.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-pending-tasks.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/pending_tasks.rb#39
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Returns information about installed plugins across nodes node.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-plugins.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/plugins.rb#39
  def plugins(arguments = T.unsafe(nil)); end

  # Returns information about index shard recoveries, both on-going completed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-recovery.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/recovery.rb#41
  def recovery(arguments = T.unsafe(nil)); end

  # Returns information about snapshot repositories registered in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-repositories.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/repositories.rb#38
  def repositories(arguments = T.unsafe(nil)); end

  # Provides low-level information about the segments in the shards of an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-segments.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/segments.rb#38
  def segments(arguments = T.unsafe(nil)); end

  # Provides a detailed view of shard allocation on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-shards.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/shards.rb#40
  def shards(arguments = T.unsafe(nil)); end

  # Returns all snapshots in a specific repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/snapshots.rb#40
  def snapshots(arguments = T.unsafe(nil)); end

  # Returns information about the tasks currently executing on one or more nodes in the cluster.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/tasks.rb#45
  def tasks(arguments = T.unsafe(nil)); end

  # Returns information about existing templates.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/templates.rb#39
  def templates(arguments = T.unsafe(nil)); end

  # Returns cluster-wide thread pool statistics per node.
  # By default the active, queue and rejected statistics are returned for all thread pools.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-thread-pool.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/thread_pool.rb#41
  def thread_pool(arguments = T.unsafe(nil)); end

  # Gets configuration and usage information about transforms.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-transforms.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cat/transforms.rb#41
  def transforms(arguments = T.unsafe(nil)); end
end

# Client for the "cat" namespace (includes the {Cat::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/cat.rb#25
class Elasticsearch::API::Cat::CatClient
  include ::Elasticsearch::API::Cat::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/post_voting_config_exclusions.rb#23
module Elasticsearch::API::Cluster
  # Proxy method for {ClusterClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/cluster.rb#31
  def cluster; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/post_voting_config_exclusions.rb#24
module Elasticsearch::API::Cluster::Actions
  # Provides explanations for shard allocations in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-allocation-explain.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/allocation_explain.rb#34
  def allocation_explain(arguments = T.unsafe(nil)); end

  # Deletes a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/delete_component_template.rb#34
  def delete_component_template(arguments = T.unsafe(nil)); end

  # Clears cluster voting config exclusions.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/voting-config-exclusions.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/delete_voting_config_exclusions.rb#33
  def delete_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/exists_component_template.rb#34
  def exists_component_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular component template exist
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/exists_component_template.rb#34
  def exists_component_template?(arguments = T.unsafe(nil)); end

  # Returns one or more component templates
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/get_component_template.rb#34
  def get_component_template(arguments = T.unsafe(nil)); end

  # Returns cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-get-settings.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/get_settings.rb#35
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns basic information about the health of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/health.rb#43
  def health(arguments = T.unsafe(nil)); end

  # Returns a list of any cluster-level changes (e.g. create index, update mapping,
  # allocate or fail shard) which have not yet been executed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-pending.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/pending_tasks.rb#34
  def pending_tasks(arguments = T.unsafe(nil)); end

  # Updates the cluster voting config exclusions by node ids or node names.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/voting-config-exclusions.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/post_voting_config_exclusions.rb#35
  def post_voting_config_exclusions(arguments = T.unsafe(nil)); end

  # Creates or updates a component template
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/put_component_template.rb#36
  def put_component_template(arguments = T.unsafe(nil)); end

  # Updates the cluster settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/put_settings.rb#35
  def put_settings(arguments = T.unsafe(nil)); end

  # Returns the information about configured remote clusters.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-remote-info.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/remote_info.rb#31
  def remote_info(arguments = T.unsafe(nil)); end

  # Allows to manually change the allocation of individual shards in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-reroute.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/reroute.rb#38
  def reroute(arguments = T.unsafe(nil)); end

  # Returns a comprehensive information about the state of the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-state.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/state.rb#41
  def state(arguments = T.unsafe(nil)); end

  # Returns high-level overview of cluster statistics.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cluster/stats.rb#34
  def stats(arguments = T.unsafe(nil)); end
end

# Client for the "cluster" namespace (includes the {Cluster::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/cluster.rb#25
class Elasticsearch::API::Cluster::ClusterClient
  include ::Elasticsearch::API::Cluster::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/common.rb#20
module Elasticsearch::API::Common; end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/common.rb#21
module Elasticsearch::API::Common::Actions; end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/common.rb#23
module Elasticsearch::API::Common::Client
  # Delegates the `perform_request` method to the wrapped client
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/common.rb#37
  def perform_request(method, path, params = T.unsafe(nil), body = T.unsafe(nil), headers = T.unsafe(nil)); end
end

# Base client wrapper
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/common.rb#27
module Elasticsearch::API::Common::Client::Base
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/common.rb#30
  def initialize(client); end

  # Returns the value of attribute client.
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/common.rb#28
  def client; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/forget_follower.rb#23
module Elasticsearch::API::CrossClusterReplication
  # Proxy method for {CrossClusterReplicationClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/cross_cluster_replication.rb#31
  def ccr; end

  # Proxy method for {CrossClusterReplicationClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/cross_cluster_replication.rb#31
  def cross_cluster_replication; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/forget_follower.rb#24
module Elasticsearch::API::CrossClusterReplication::Actions
  # Deletes auto-follow patterns.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-delete-auto-follow-pattern.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/delete_auto_follow_pattern.rb#32
  def delete_auto_follow_pattern(arguments = T.unsafe(nil)); end

  # Creates a new follower index configured to follow the referenced leader index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-follow.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/follow.rb#34
  def follow(arguments = T.unsafe(nil)); end

  # Retrieves information about all follower indices, including parameters and status for each follower index
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-info.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/follow_info.rb#32
  def follow_info(arguments = T.unsafe(nil)); end

  # Retrieves follower stats. return shard-level stats about the following tasks associated with each shard for the specified indices.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-follow-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/follow_stats.rb#32
  def follow_stats(arguments = T.unsafe(nil)); end

  # Removes the follower retention leases from the leader.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-forget-follower.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/forget_follower.rb#33
  def forget_follower(arguments = T.unsafe(nil)); end

  # Gets configured auto-follow patterns. Returns the specified auto-follow pattern collection.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-auto-follow-pattern.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/get_auto_follow_pattern.rb#32
  def get_auto_follow_pattern(arguments = T.unsafe(nil)); end

  # Pauses an auto-follow pattern
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-pause-auto-follow-pattern.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/pause_auto_follow_pattern.rb#32
  def pause_auto_follow_pattern(arguments = T.unsafe(nil)); end

  # Pauses a follower index. The follower index will not fetch any additional operations from the leader index.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-pause-follow.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/pause_follow.rb#32
  def pause_follow(arguments = T.unsafe(nil)); end

  # Creates a new named collection of auto-follow patterns against a specified remote cluster. Newly created indices on the remote cluster matching any of the specified patterns will be automatically configured as follower indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-put-auto-follow-pattern.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/put_auto_follow_pattern.rb#33
  def put_auto_follow_pattern(arguments = T.unsafe(nil)); end

  # Resumes an auto-follow pattern that has been paused
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-resume-auto-follow-pattern.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/resume_auto_follow_pattern.rb#32
  def resume_auto_follow_pattern(arguments = T.unsafe(nil)); end

  # Resumes a follower index that has been paused
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-resume-follow.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/resume_follow.rb#33
  def resume_follow(arguments = T.unsafe(nil)); end

  # Gets all stats related to cross-cluster replication.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-get-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/stats.rb#31
  def stats(arguments = T.unsafe(nil)); end

  # Stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ccr-post-unfollow.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/cross_cluster_replication/unfollow.rb#32
  def unfollow(arguments = T.unsafe(nil)); end
end

# Client for the "cross_cluster_replication" namespace (includes the {CrossClusterReplication::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/cross_cluster_replication.rb#25
class Elasticsearch::API::CrossClusterReplication::CrossClusterReplicationClient
  include ::Elasticsearch::API::CrossClusterReplication::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api.rb#40
Elasticsearch::API::DEFAULT_DOC = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api.rb#31
Elasticsearch::API::DEFAULT_SERIALIZER = MultiJson

# source://elasticsearch-api//lib/elasticsearch/api/actions/dangling_indices/delete_dangling_index.rb#23
module Elasticsearch::API::DanglingIndices
  # Proxy method for {DanglingIndicesClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/dangling_indices.rb#30
  def dangling_indices; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/dangling_indices/delete_dangling_index.rb#24
module Elasticsearch::API::DanglingIndices::Actions
  # Deletes the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-gateway-dangling-indices.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/dangling_indices/delete_dangling_index.rb#35
  def delete_dangling_index(arguments = T.unsafe(nil)); end

  # Imports the specified dangling index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-gateway-dangling-indices.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/dangling_indices/import_dangling_index.rb#35
  def import_dangling_index(arguments = T.unsafe(nil)); end

  # Returns all dangling indices.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-gateway-dangling-indices.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/dangling_indices/list_dangling_indices.rb#31
  def list_dangling_indices(arguments = T.unsafe(nil)); end
end

# Client for the "dangling_indices" namespace (includes the {DanglingIndices::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/dangling_indices.rb#24
class Elasticsearch::API::DanglingIndices::DanglingIndicesClient
  include ::Elasticsearch::API::DanglingIndices::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/data_frame_transform_deprecated.rb#20
module Elasticsearch::API::DataFrameTransformDeprecated
  # Proxy method for {DataFrameTransformDeprecatedClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/data_frame_transform_deprecated.rb#31
  def data_frame_transform_deprecated; end
end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/data_frame_transform_deprecated.rb#21
module Elasticsearch::API::DataFrameTransformDeprecated::Actions; end

# Client for the "data_frame_transform_deprecated" namespace (includes the {DataFrameTransformDeprecated::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/data_frame_transform_deprecated.rb#25
class Elasticsearch::API::DataFrameTransformDeprecated::DataFrameTransformDeprecatedClient
  include ::Elasticsearch::API::DataFrameTransformDeprecated::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/enrich/stats.rb#23
module Elasticsearch::API::Enrich
  # Proxy method for {EnrichClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/enrich.rb#31
  def enrich; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/enrich/stats.rb#24
module Elasticsearch::API::Enrich::Actions
  # Deletes an existing enrich policy and its enrich index.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-enrich-policy-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/enrich/delete_policy.rb#32
  def delete_policy(arguments = T.unsafe(nil)); end

  # Creates the enrich index for an existing enrich policy.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/execute-enrich-policy-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/enrich/execute_policy.rb#33
  def execute_policy(arguments = T.unsafe(nil)); end

  # Gets information about an enrich policy.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-enrich-policy-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/enrich/get_policy.rb#32
  def get_policy(arguments = T.unsafe(nil)); end

  # Creates a new enrich policy.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-enrich-policy-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/enrich/put_policy.rb#33
  def put_policy(arguments = T.unsafe(nil)); end

  # Gets enrich coordinator statistics and information about enrich policies that are currently executing.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/enrich-stats-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/enrich/stats.rb#31
  def stats(arguments = T.unsafe(nil)); end
end

# Client for the "enrich" namespace (includes the {Enrich::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/enrich.rb#25
class Elasticsearch::API::Enrich::EnrichClient
  include ::Elasticsearch::API::Enrich::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/eql/delete.rb#23
module Elasticsearch::API::Eql
  # Proxy method for {EqlClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/eql.rb#31
  def eql; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/eql/delete.rb#24
module Elasticsearch::API::Eql::Actions
  # Deletes an async EQL search by ID. If the search is still running, the search request will be cancelled. Otherwise, the saved search results are deleted.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/eql/delete.rb#32
  def delete(arguments = T.unsafe(nil)); end

  # Returns async results from previously executed Event Query Language (EQL) search
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/eql/get.rb#34
  def get(arguments = T.unsafe(nil)); end

  # Returns the status of a previously submitted async or stored Event Query Language (EQL) search
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/eql/get_status.rb#32
  def get_status(arguments = T.unsafe(nil)); end

  # Returns results matching a query expressed in Event Query Language (EQL)
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/eql/search.rb#36
  def search(arguments = T.unsafe(nil)); end
end

# Client for the "eql" namespace (includes the {Eql::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/eql.rb#25
class Elasticsearch::API::Eql::EqlClient
  include ::Elasticsearch::API::Eql::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/features/get_features.rb#23
module Elasticsearch::API::Features
  # Proxy method for {FeaturesClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/features.rb#31
  def features; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/features/get_features.rb#24
module Elasticsearch::API::Features::Actions
  # Gets a list of features which can be included in snapshots using the feature_states field when creating a snapshot
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-features-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/features/get_features.rb#32
  def get_features(arguments = T.unsafe(nil)); end

  # Resets the internal state of features, usually by deleting system indices
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/features/reset_features.rb#35
  def reset_features(arguments = T.unsafe(nil)); end
end

# Client for the "features" namespace (includes the {Features::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/features.rb#25
class Elasticsearch::API::Features::FeaturesClient
  include ::Elasticsearch::API::Features::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/fleet/msearch.rb#23
module Elasticsearch::API::Fleet
  # Proxy method for {FleetClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/fleet.rb#31
  def fleet; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/fleet/msearch.rb#24
module Elasticsearch::API::Fleet::Actions
  # Returns the current global checkpoints for an index. This API is design for internal use by the fleet server project.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-global-checkpoints.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/fleet/global_checkpoints.rb#36
  def global_checkpoints(arguments = T.unsafe(nil)); end

  # Multi Search API where the search will only be executed after specified checkpoints are available due to a refresh. This API is designed for internal use by the fleet server project.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see [TODO]
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/fleet/msearch.rb#37
  def msearch(arguments = T.unsafe(nil)); end

  # Search API where the search will only be executed after specified checkpoints are available due to a refresh. This API is designed for internal use by the fleet server project.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see [TODO]
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/fleet/search.rb#40
  def search(arguments = T.unsafe(nil)); end
end

# Client for the "fleet" namespace (includes the {Fleet::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/fleet.rb#25
class Elasticsearch::API::Fleet::FleetClient
  include ::Elasticsearch::API::Fleet::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/graph/explore.rb#23
module Elasticsearch::API::Graph
  # Proxy method for {GraphClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/graph.rb#31
  def graph; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/graph/explore.rb#24
module Elasticsearch::API::Graph::Actions
  # Explore extracted and summarized information about the documents and terms in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/graph-explore-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/graph/explore.rb#35
  def explore(arguments = T.unsafe(nil)); end
end

# Client for the "graph" namespace (includes the {Graph::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/graph.rb#25
class Elasticsearch::API::Graph::GraphClient
  include ::Elasticsearch::API::Graph::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api.rb#37
Elasticsearch::API::HTTP_DELETE = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api.rb#33
Elasticsearch::API::HTTP_GET = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api.rb#34
Elasticsearch::API::HTTP_HEAD = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api.rb#35
Elasticsearch::API::HTTP_POST = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api.rb#36
Elasticsearch::API::HTTP_PUT = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/explain_lifecycle.rb#23
module Elasticsearch::API::IndexLifecycleManagement
  # Proxy method for {IndexLifecycleManagementClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/index_lifecycle_management.rb#31
  def ilm; end

  # Proxy method for {IndexLifecycleManagementClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/index_lifecycle_management.rb#31
  def index_lifecycle_management; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/explain_lifecycle.rb#24
module Elasticsearch::API::IndexLifecycleManagement::Actions
  # Deletes the specified lifecycle policy definition. A currently used policy cannot be deleted.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-delete-lifecycle.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/delete_lifecycle.rb#32
  def delete_lifecycle(arguments = T.unsafe(nil)); end

  # Retrieves information about the index's current lifecycle state, such as the currently executing phase, action, and step.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-explain-lifecycle.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/explain_lifecycle.rb#34
  def explain_lifecycle(arguments = T.unsafe(nil)); end

  # Returns the specified policy definition. Includes the policy version and last modified date.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-get-lifecycle.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/get_lifecycle.rb#32
  def get_lifecycle(arguments = T.unsafe(nil)); end

  # Retrieves the current index lifecycle management (ILM) status.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-get-status.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/get_status.rb#31
  def get_status(arguments = T.unsafe(nil)); end

  # Migrates the indices and ILM policies away from custom node attribute allocation routing to data tiers routing
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-migrate-to-data-tiers.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/migrate_to_data_tiers.rb#33
  def migrate_to_data_tiers(arguments = T.unsafe(nil)); end

  # Manually moves an index into the specified step and executes that step.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-move-to-step.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/move_to_step.rb#33
  def move_to_step(arguments = T.unsafe(nil)); end

  # Creates a lifecycle policy
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/put_lifecycle.rb#33
  def put_lifecycle(arguments = T.unsafe(nil)); end

  # Removes the assigned lifecycle policy and stops managing the specified index
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-remove-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/remove_policy.rb#32
  def remove_policy(arguments = T.unsafe(nil)); end

  # Retries executing the policy for an index that is in the ERROR step.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-retry-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/retry.rb#32
  def retry(arguments = T.unsafe(nil)); end

  # Start the index lifecycle management (ILM) plugin.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-start.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/start.rb#31
  def start(arguments = T.unsafe(nil)); end

  # Halts all lifecycle management operations and stops the index lifecycle management (ILM) plugin
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-stop.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/index_lifecycle_management/stop.rb#31
  def stop(arguments = T.unsafe(nil)); end
end

# Client for the "index_lifecycle_management" namespace (includes the {IndexLifecycleManagement::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/index_lifecycle_management.rb#25
class Elasticsearch::API::IndexLifecycleManagement::IndexLifecycleManagementClient
  include ::Elasticsearch::API::IndexLifecycleManagement::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_data_stream.rb#23
module Elasticsearch::API::Indices
  # Proxy method for {IndicesClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/indices.rb#31
  def indices; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_data_stream.rb#24
module Elasticsearch::API::Indices::Actions
  # Adds a block to an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-blocks.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/add_block.rb#38
  def add_block(arguments = T.unsafe(nil)); end

  # Performs the analysis process on a text and return the tokens breakdown of the text.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/analyze.rb#33
  def analyze(arguments = T.unsafe(nil)); end

  # Clears all or specific caches for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/clear_cache.rb#39
  def clear_cache(arguments = T.unsafe(nil)); end

  # Clones an index
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clone-index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/clone.rb#37
  def clone(arguments = T.unsafe(nil)); end

  # Closes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/close.rb#38
  def close(arguments = T.unsafe(nil)); end

  # Creates an index with optional settings and mappings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/create.rb#36
  def create(arguments = T.unsafe(nil)); end

  # Creates a data stream
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/data-streams.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/create_data_stream.rb#32
  def create_data_stream(arguments = T.unsafe(nil)); end

  # Provides statistics on operations happening in a data stream.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/data-streams.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/data_streams_stats.rb#32
  def data_streams_stats(arguments = T.unsafe(nil)); end

  # Deletes an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/delete.rb#37
  def delete(arguments = T.unsafe(nil)); end

  # Deletes an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/delete_alias.rb#35
  def delete_alias(arguments = T.unsafe(nil)); end

  # Deletes a data stream.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/data-streams.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/delete_data_stream.rb#33
  def delete_data_stream(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/delete_index_template.rb#34
  def delete_index_template(arguments = T.unsafe(nil)); end

  # Deletes an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/delete_template.rb#34
  def delete_template(arguments = T.unsafe(nil)); end

  # Analyzes the disk usage of each field of an index or data stream
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-disk-usage.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/disk_usage.rb#41
  def disk_usage(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists.rb#38
  def exists(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists.rb#38
  def exists?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists_alias.rb#37
  def exists_alias(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular alias exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists_alias.rb#37
  def exists_alias?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists_index_template.rb#35
  def exists_index_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists_index_template.rb#35
  def exists_index_template?(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists_template.rb#35
  def exists_template(arguments = T.unsafe(nil)); end

  # Returns information about whether a particular index template exists.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/exists_template.rb#35
  def exists_template?(arguments = T.unsafe(nil)); end

  # Returns the field usage stats for each field of an index
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/field-usage-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/field_usage_stats.rb#40
  def field_usage_stats(arguments = T.unsafe(nil)); end

  # Performs the flush operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-flush.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/flush.rb#37
  def flush(arguments = T.unsafe(nil)); end

  # Performs the force merge operation on one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/forcemerge.rb#39
  def forcemerge(arguments = T.unsafe(nil)); end

  # Returns information about one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get.rb#40
  def get(arguments = T.unsafe(nil)); end

  # Returns an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_alias.rb#37
  def get_alias(arguments = T.unsafe(nil)); end

  # Returns data streams.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/data-streams.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_data_stream.rb#33
  def get_data_stream(arguments = T.unsafe(nil)); end

  # Returns mapping for one or more fields.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_field_mapping.rb#38
  def get_field_mapping(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_index_template.rb#35
  def get_index_template(arguments = T.unsafe(nil)); end

  # Returns mappings for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_mapping.rb#37
  def get_mapping(arguments = T.unsafe(nil)); end

  # Returns settings for one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_settings.rb#40
  def get_settings(arguments = T.unsafe(nil)); end

  # Returns an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/get_template.rb#35
  def get_template(arguments = T.unsafe(nil)); end

  # Migrates an alias to a data stream
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/data-streams.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/migrate_to_data_stream.rb#32
  def migrate_to_data_stream(arguments = T.unsafe(nil)); end

  # Modifies a data stream
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/data-streams.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/modify_data_stream.rb#32
  def modify_data_stream(arguments = T.unsafe(nil)); end

  # Opens an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/open.rb#38
  def open(arguments = T.unsafe(nil)); end

  # Promotes a data stream from a replicated data stream managed by CCR to a regular data stream
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/data-streams.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/promote_data_stream.rb#32
  def promote_data_stream(arguments = T.unsafe(nil)); end

  # Creates or updates an alias.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/put_alias.rb#36
  def put_alias(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/put_index_template.rb#36
  def put_index_template(arguments = T.unsafe(nil)); end

  # Updates the index mappings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/put_mapping.rb#39
  def put_mapping(arguments = T.unsafe(nil)); end

  # Updates the index settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/put_settings.rb#40
  def put_settings(arguments = T.unsafe(nil)); end

  # Creates or updates an index template.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/put_template.rb#36
  def put_template(arguments = T.unsafe(nil)); end

  # Returns information about ongoing index shard recoveries.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-recovery.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/recovery.rb#34
  def recovery(arguments = T.unsafe(nil)); end

  # Performs the refresh operation in one or more indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/refresh.rb#35
  def refresh(arguments = T.unsafe(nil)); end

  # Reloads an index's search analyzers and their resources.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-reload-analyzers.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/reload_search_analyzers.rb#35
  def reload_search_analyzers(arguments = T.unsafe(nil)); end

  # Returns information about any matching indices, aliases, and data streams
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-resolve-index-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/resolve_index.rb#33
  def resolve_index(arguments = T.unsafe(nil)); end

  # Updates an alias to point to a new index when the existing index
  # is considered to be too large or too old.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/rollover.rb#39
  def rollover(arguments = T.unsafe(nil)); end

  # Provides low-level information about segments in a Lucene index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-segments.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/segments.rb#36
  def segments(arguments = T.unsafe(nil)); end

  # Provides store information for shard copies of indices.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-shards-stores.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/shard_stores.rb#36
  def shard_stores(arguments = T.unsafe(nil)); end

  # Allow to shrink an existing index into a new index with fewer primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-shrink-index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/shrink.rb#37
  def shrink(arguments = T.unsafe(nil)); end

  # Simulate matching the given index name against the index templates in the system
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/simulate_index_template.rb#36
  def simulate_index_template(arguments = T.unsafe(nil)); end

  # Simulate resolving the given template name or body
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/simulate_template.rb#36
  def simulate_template(arguments = T.unsafe(nil)); end

  # Allows you to split an existing index into a new index with more primary shards.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-split-index.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/split.rb#37
  def split(arguments = T.unsafe(nil)); end

  # Provides statistics on operations happening in an index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/stats.rb#42
  def stats(arguments = T.unsafe(nil)); end

  # Unfreezes an index. When a frozen index is unfrozen, the index goes through the normal recovery process and becomes writeable again.
  #
  # *Deprecation notice*:
  # Frozen indices are deprecated because they provide no benefit given improvements in heap memory utilization. They will be removed in a future release.
  # Deprecated since version 7.14.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/unfreeze-index-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/unfreeze.rb#43
  def unfreeze(arguments = T.unsafe(nil)); end

  # Updates index aliases.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/update_aliases.rb#34
  def update_aliases(arguments = T.unsafe(nil)); end

  # Allows a user to validate a potentially expensive query without executing it.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/indices/validate_query.rb#45
  def validate_query(arguments = T.unsafe(nil)); end
end

# Client for the "indices" namespace (includes the {Indices::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/indices.rb#25
class Elasticsearch::API::Indices::IndicesClient
  include ::Elasticsearch::API::Indices::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/simulate.rb#23
module Elasticsearch::API::Ingest
  # Proxy method for {IngestClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/ingest.rb#31
  def ingest; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/simulate.rb#24
module Elasticsearch::API::Ingest::Actions
  # Deletes a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-pipeline-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/delete_pipeline.rb#34
  def delete_pipeline(arguments = T.unsafe(nil)); end

  # Returns statistical information about geoip databases
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-stats-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/geo_ip_stats.rb#31
  def geo_ip_stats(arguments = T.unsafe(nil)); end

  # Returns a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-pipeline-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/get_pipeline.rb#34
  def get_pipeline(arguments = T.unsafe(nil)); end

  # Returns a list of the built-in patterns.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/grok-processor.html#grok-processor-rest-get
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/processor_grok.rb#31
  def processor_grok(arguments = T.unsafe(nil)); end

  # Creates or updates a pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-pipeline-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/put_pipeline.rb#36
  def put_pipeline(arguments = T.unsafe(nil)); end

  # Allows to simulate a pipeline with example documents.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/simulate-pipeline-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ingest/simulate.rb#34
  def simulate(arguments = T.unsafe(nil)); end
end

# Client for the "ingest" namespace (includes the {Ingest::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/ingest.rb#25
class Elasticsearch::API::Ingest::IngestClient
  include ::Elasticsearch::API::Ingest::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/license/post_start_basic.rb#23
module Elasticsearch::API::License
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/license.rb#31
  def license; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/license/post_start_basic.rb#24
module Elasticsearch::API::License::Actions
  # Deletes licensing information for the cluster
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-license.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/license/delete.rb#31
  def delete(arguments = T.unsafe(nil)); end

  # Retrieves licensing information for the cluster
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-license.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/license/get.rb#33
  def get(arguments = T.unsafe(nil)); end

  # source://elasticsearch-api//lib/elasticsearch/api/actions/license/get_basic_status.rb#31
  def get_basic_status(arguments = T.unsafe(nil)); end

  # source://elasticsearch-api//lib/elasticsearch/api/actions/license/get_trial_status.rb#31
  def get_trial_status(arguments = T.unsafe(nil)); end

  # source://elasticsearch-api//lib/elasticsearch/api/actions/license/post.rb#33
  def post(arguments = T.unsafe(nil)); end

  # source://elasticsearch-api//lib/elasticsearch/api/actions/license/post_start_basic.rb#32
  def post_start_basic(arguments = T.unsafe(nil)); end

  # source://elasticsearch-api//lib/elasticsearch/api/actions/license/post_start_trial.rb#33
  def post_start_trial(arguments = T.unsafe(nil)); end
end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/license.rb#25
class Elasticsearch::API::License::LicenseClient
  include ::Elasticsearch::API::License::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/logstash/get_pipeline.rb#23
module Elasticsearch::API::Logstash
  # Proxy method for {LogstashClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/logstash.rb#31
  def logstash; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/logstash/get_pipeline.rb#24
module Elasticsearch::API::Logstash::Actions
  # Deletes Logstash Pipelines used by Central Management
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-api-delete-pipeline.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/logstash/delete_pipeline.rb#32
  def delete_pipeline(arguments = T.unsafe(nil)); end

  # Retrieves Logstash Pipelines used by Central Management
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-api-get-pipeline.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/logstash/get_pipeline.rb#32
  def get_pipeline(arguments = T.unsafe(nil)); end

  # Adds and updates Logstash Pipelines used for Central Management
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/logstash-api-put-pipeline.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/logstash/put_pipeline.rb#33
  def put_pipeline(arguments = T.unsafe(nil)); end
end

# Client for the "logstash" namespace (includes the {Logstash::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/logstash.rb#25
class Elasticsearch::API::Logstash::LogstashClient
  include ::Elasticsearch::API::Logstash::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/explain_data_frame_analytics.rb#23
module Elasticsearch::API::MachineLearning
  # Proxy method for {MachineLearningClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/machine_learning.rb#31
  def machine_learning; end

  # Proxy method for {MachineLearningClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/machine_learning.rb#31
  def ml; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/explain_data_frame_analytics.rb#24
module Elasticsearch::API::MachineLearning::Actions
  # Closes one or more anomaly detection jobs. A job can be opened and closed multiple times throughout its lifecycle.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-close-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/close_job.rb#36
  def close_job(arguments = T.unsafe(nil)); end

  # Deletes a calendar.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_calendar.rb#32
  def delete_calendar(arguments = T.unsafe(nil)); end

  # Deletes scheduled events from a calendar.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar-event.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_calendar_event.rb#33
  def delete_calendar_event(arguments = T.unsafe(nil)); end

  # Deletes anomaly detection jobs from a calendar.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-calendar-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_calendar_job.rb#33
  def delete_calendar_job(arguments = T.unsafe(nil)); end

  # Deletes an existing data frame analytics job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_data_frame_analytics.rb#34
  def delete_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Deletes an existing datafeed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-datafeed.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_datafeed.rb#33
  def delete_datafeed(arguments = T.unsafe(nil)); end

  # Deletes expired and unused machine learning data.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-expired-data.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_expired_data.rb#35
  def delete_expired_data(arguments = T.unsafe(nil)); end

  # Deletes a filter.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-filter.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_filter.rb#32
  def delete_filter(arguments = T.unsafe(nil)); end

  # Deletes forecasts from a machine learning job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-forecast.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_forecast.rb#35
  def delete_forecast(arguments = T.unsafe(nil)); end

  # Deletes an existing anomaly detection job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_job.rb#34
  def delete_job(arguments = T.unsafe(nil)); end

  # Deletes an existing model snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-snapshot.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_model_snapshot.rb#33
  def delete_model_snapshot(arguments = T.unsafe(nil)); end

  # Deletes an existing trained inference model that is currently not referenced by an ingest pipeline.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-trained-models.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_trained_model.rb#34
  def delete_trained_model(arguments = T.unsafe(nil)); end

  # Deletes a model alias that refers to the trained model
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-trained-models-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/delete_trained_model_alias.rb#33
  def delete_trained_model_alias(arguments = T.unsafe(nil)); end

  # Estimates the model memory
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-apis.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/estimate_model_memory.rb#32
  def estimate_model_memory(arguments = T.unsafe(nil)); end

  # Evaluates the data frame analytics for an annotated index.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/evaluate-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/evaluate_data_frame.rb#32
  def evaluate_data_frame(arguments = T.unsafe(nil)); end

  # Explains a data frame analytics config.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/current/explain-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/explain_data_frame_analytics.rb#33
  def explain_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Forces any buffered data to be processed by the job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-flush-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/flush_job.rb#38
  def flush_job(arguments = T.unsafe(nil)); end

  # Predicts the future behavior of a time series by using its historical behavior.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-forecast.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/forecast.rb#36
  def forecast(arguments = T.unsafe(nil)); end

  # Retrieves anomaly detection job results for one or more buckets.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-bucket.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_buckets.rb#43
  def get_buckets(arguments = T.unsafe(nil)); end

  # Retrieves information about the scheduled events in calendars.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-calendar-event.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_calendar_events.rb#37
  def get_calendar_events(arguments = T.unsafe(nil)); end

  # Retrieves configuration information for calendars.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-calendar.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_calendars.rb#35
  def get_calendars(arguments = T.unsafe(nil)); end

  # Retrieves anomaly detection job results for one or more categories.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-category.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_categories.rb#37
  def get_categories(arguments = T.unsafe(nil)); end

  # Retrieves configuration information for data frame analytics jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_data_frame_analytics.rb#36
  def get_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Retrieves usage information for data frame analytics jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-dfanalytics-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_data_frame_analytics_stats.rb#36
  def get_data_frame_analytics_stats(arguments = T.unsafe(nil)); end

  # Retrieves usage information for datafeeds.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_datafeed_stats.rb#33
  def get_datafeed_stats(arguments = T.unsafe(nil)); end

  # Retrieves configuration information for datafeeds.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_datafeeds.rb#34
  def get_datafeeds(arguments = T.unsafe(nil)); end

  # Retrieves filters.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-filter.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_filters.rb#34
  def get_filters(arguments = T.unsafe(nil)); end

  # Retrieves anomaly detection job results for one or more influencers.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-influencer.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_influencers.rb#41
  def get_influencers(arguments = T.unsafe(nil)); end

  # Retrieves usage information for anomaly detection jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_job_stats.rb#33
  def get_job_stats(arguments = T.unsafe(nil)); end

  # Retrieves configuration information for anomaly detection jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_jobs.rb#34
  def get_jobs(arguments = T.unsafe(nil)); end

  # Returns information on how ML is using memory.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-ml-memory.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_memory_stats.rb#34
  def get_memory_stats(arguments = T.unsafe(nil)); end

  # Gets stats for anomaly detection job model snapshot upgrades that are in progress.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job-model-snapshot-upgrade-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_model_snapshot_upgrade_stats.rb#34
  def get_model_snapshot_upgrade_stats(arguments = T.unsafe(nil)); end

  # Retrieves information about model snapshots.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-snapshot.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_model_snapshots.rb#40
  def get_model_snapshots(arguments = T.unsafe(nil)); end

  # Retrieves overall bucket results that summarize the bucket results of multiple anomaly detection jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-overall-buckets.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_overall_buckets.rb#40
  def get_overall_buckets(arguments = T.unsafe(nil)); end

  # Retrieves anomaly records for an anomaly detection job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-record.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_records.rb#41
  def get_records(arguments = T.unsafe(nil)); end

  # Retrieves configuration information for a trained inference model.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-trained-models.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_trained_models.rb#40
  def get_trained_models(arguments = T.unsafe(nil)); end

  # Retrieves usage information for trained inference models.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-trained-models-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/get_trained_models_stats.rb#35
  def get_trained_models_stats(arguments = T.unsafe(nil)); end

  # Evaluate a trained model.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # *Deprecation notice*:
  # /_ml/trained_models/{model_id}/deployment/_infer is deprecated. Use /_ml/trained_models/{model_id}/_infer instead
  # Deprecated since version 8.3.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/infer-trained-model.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/infer_trained_model.rb#43
  def infer_trained_model(arguments = T.unsafe(nil)); end

  # Returns defaults and limits used by machine learning.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-ml-info.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/info.rb#31
  def info(arguments = T.unsafe(nil)); end

  # Opens one or more anomaly detection jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-open-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/open_job.rb#33
  def open_job(arguments = T.unsafe(nil)); end

  # Posts scheduled events in a calendar.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-calendar-event.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/post_calendar_events.rb#33
  def post_calendar_events(arguments = T.unsafe(nil)); end

  # Sends data to an anomaly detection job for analysis.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-data.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/post_data.rb#35
  def post_data(arguments = T.unsafe(nil)); end

  # Previews that will be analyzed given a data frame analytics config.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see http://www.elastic.co/guide/en/elasticsearch/reference/current/preview-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/preview_data_frame_analytics.rb#33
  def preview_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Previews a datafeed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-preview-datafeed.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/preview_datafeed.rb#35
  def preview_datafeed(arguments = T.unsafe(nil)); end

  # Instantiates a calendar.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-calendar.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_calendar.rb#33
  def put_calendar(arguments = T.unsafe(nil)); end

  # Adds an anomaly detection job to a calendar.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-calendar-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_calendar_job.rb#33
  def put_calendar_job(arguments = T.unsafe(nil)); end

  # Instantiates a data frame analytics job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_data_frame_analytics.rb#33
  def put_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Instantiates a datafeed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-datafeed.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_datafeed.rb#37
  def put_datafeed(arguments = T.unsafe(nil)); end

  # Instantiates a filter.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-filter.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_filter.rb#33
  def put_filter(arguments = T.unsafe(nil)); end

  # Instantiates an anomaly detection job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_job.rb#37
  def put_job(arguments = T.unsafe(nil)); end

  # Creates an inference trained model.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-models.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_trained_model.rb#34
  def put_trained_model(arguments = T.unsafe(nil)); end

  # Creates a new model alias (or reassigns an existing one) to refer to the trained model
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-models-aliases.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_trained_model_alias.rb#34
  def put_trained_model_alias(arguments = T.unsafe(nil)); end

  # Creates part of a trained model definition
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-model-definition-part.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_trained_model_definition_part.rb#38
  def put_trained_model_definition_part(arguments = T.unsafe(nil)); end

  # Creates a trained model vocabulary
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-trained-model-vocabulary.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/put_trained_model_vocabulary.rb#37
  def put_trained_model_vocabulary(arguments = T.unsafe(nil)); end

  # Resets an existing anomaly detection job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-reset-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/reset_job.rb#33
  def reset_job(arguments = T.unsafe(nil)); end

  # Reverts to a specific snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-revert-snapshot.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/revert_model_snapshot.rb#35
  def revert_model_snapshot(arguments = T.unsafe(nil)); end

  # Sets a cluster wide upgrade_mode setting that prepares machine learning indices for an upgrade.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-set-upgrade-mode.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/set_upgrade_mode.rb#33
  def set_upgrade_mode(arguments = T.unsafe(nil)); end

  # Starts a data frame analytics job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/start-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/start_data_frame_analytics.rb#34
  def start_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Starts one or more datafeeds.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-start-datafeed.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/start_datafeed.rb#36
  def start_datafeed(arguments = T.unsafe(nil)); end

  # Start a trained model deployment.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/start-trained-model-deployment.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/start_trained_model_deployment.rb#42
  def start_trained_model_deployment(arguments = T.unsafe(nil)); end

  # Stops one or more data frame analytics jobs.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/stop-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/stop_data_frame_analytics.rb#36
  def stop_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Stops one or more datafeeds.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-stop-datafeed.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/stop_datafeed.rb#37
  def stop_datafeed(arguments = T.unsafe(nil)); end

  # Stop a trained model deployment.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/stop-trained-model-deployment.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/stop_trained_model_deployment.rb#39
  def stop_trained_model_deployment(arguments = T.unsafe(nil)); end

  # Updates certain properties of a data frame analytics job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/update-dfanalytics.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/update_data_frame_analytics.rb#33
  def update_data_frame_analytics(arguments = T.unsafe(nil)); end

  # Updates certain properties of a datafeed.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-datafeed.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/update_datafeed.rb#37
  def update_datafeed(arguments = T.unsafe(nil)); end

  # Updates the description of a filter, adds items, or removes items.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-filter.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/update_filter.rb#33
  def update_filter(arguments = T.unsafe(nil)); end

  # Updates certain properties of an anomaly detection job.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/update_job.rb#33
  def update_job(arguments = T.unsafe(nil)); end

  # Updates certain properties of a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-snapshot.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/update_model_snapshot.rb#34
  def update_model_snapshot(arguments = T.unsafe(nil)); end

  # Upgrades a given job snapshot to the current major version.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-upgrade-job-model-snapshot.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/upgrade_job_snapshot.rb#35
  def upgrade_job_snapshot(arguments = T.unsafe(nil)); end

  # Validates an anomaly detection job.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/machine-learning/current/ml-jobs.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/validate.rb#32
  def validate(arguments = T.unsafe(nil)); end

  # Validates an anomaly detection detector.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/machine-learning/current/ml-jobs.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/machine_learning/validate_detector.rb#32
  def validate_detector(arguments = T.unsafe(nil)); end
end

# Client for the "machine_learning" namespace (includes the {MachineLearning::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/machine_learning.rb#25
class Elasticsearch::API::MachineLearning::MachineLearningClient
  include ::Elasticsearch::API::MachineLearning::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/migration/get_feature_upgrade_status.rb#23
module Elasticsearch::API::Migration
  # Proxy method for {MigrationClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/migration.rb#31
  def migration; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/migration/get_feature_upgrade_status.rb#24
module Elasticsearch::API::Migration::Actions
  # Retrieves information about different cluster, node, and index level settings that use deprecated features that will be removed or changed in the next major version.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/migration-api-deprecation.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/migration/deprecations.rb#32
  def deprecations(arguments = T.unsafe(nil)); end

  # Find out whether system features need to be upgraded or not
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/migration-api-feature-upgrade.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/migration/get_feature_upgrade_status.rb#31
  def get_feature_upgrade_status(arguments = T.unsafe(nil)); end

  # Begin upgrades for system features
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/migration-api-feature-upgrade.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/migration/post_feature_upgrade.rb#31
  def post_feature_upgrade(arguments = T.unsafe(nil)); end
end

# Client for the "migration" namespace (includes the {Migration::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/migration.rb#25
class Elasticsearch::API::Migration::MigrationClient
  include ::Elasticsearch::API::Migration::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/monitoring/bulk.rb#23
module Elasticsearch::API::Monitoring
  # Proxy method for {MonitoringClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/monitoring.rb#31
  def monitoring; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/monitoring/bulk.rb#24
module Elasticsearch::API::Monitoring::Actions
  # Used by the monitoring features to send monitoring data.
  #
  # or the conveniency "combined" format can be passed, refer to Elasticsearch::API::Utils.__bulkify documentation.
  #
  # *Deprecation notice*:
  # Specifying types in urls has been deprecated
  # Deprecated since version 7.0.0
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/monitor-elasticsearch-cluster.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/monitoring/bulk.rb#42
  def bulk(arguments = T.unsafe(nil)); end
end

# Client for the "monitoring" namespace (includes the {Monitoring::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/monitoring.rb#25
class Elasticsearch::API::Monitoring::MonitoringClient
  include ::Elasticsearch::API::Monitoring::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/info.rb#23
module Elasticsearch::API::Nodes
  # Proxy method for {NodesClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/nodes.rb#31
  def nodes; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/info.rb#24
module Elasticsearch::API::Nodes::Actions
  # Removes the archived repositories metering information present in the cluster.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/clear-repositories-metering-archive-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/clear_repositories_metering_archive.rb#37
  def clear_repositories_metering_archive(arguments = T.unsafe(nil)); end

  # Returns cluster repositories metering information.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-repositories-metering-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/get_repositories_metering_info.rb#36
  def get_repositories_metering_info(arguments = T.unsafe(nil)); end

  # Returns information about hot threads on each node in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-hot-threads.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/hot_threads.rb#39
  def hot_threads(arguments = T.unsafe(nil)); end

  # Returns information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/info.rb#35
  def info(arguments = T.unsafe(nil)); end

  # Reloads secure settings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html#reloadable-secure-settings
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/reload_secure_settings.rb#34
  def reload_secure_settings(arguments = T.unsafe(nil)); end

  # Returns statistical information about nodes in the cluster.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/stats.rb#43
  def stats(arguments = T.unsafe(nil)); end

  # Returns low-level information about REST actions usage on nodes.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-usage.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/nodes/usage.rb#34
  def usage(arguments = T.unsafe(nil)); end
end

# Client for the "nodes" namespace (includes the {Nodes::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/nodes.rb#25
class Elasticsearch::API::Nodes::NodesClient
  include ::Elasticsearch::API::Nodes::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/remote.rb#20
module Elasticsearch::API::Remote
  # Proxy method for {RemoteClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/remote.rb#31
  def remote; end
end

# source://elasticsearch-api//lib/elasticsearch/api/namespace/remote.rb#21
module Elasticsearch::API::Remote::Actions; end

# Client for the "remote" namespace (includes the {Remote::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/remote.rb#25
class Elasticsearch::API::Remote::RemoteClient
  include ::Elasticsearch::API::Remote::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# Elasticsearch client API Response object. Receives an Elastic::Transport::Transport::Response in
# the initializer and behaves like a Hash, except when status or headers are called upon it, in
# which case it returns the original object's status and headers.
#
# source://elasticsearch-api//lib/elasticsearch/api/response.rb#23
class Elasticsearch::API::Response
  # @return [Response] a new instance of Response
  #
  # source://elasticsearch-api//lib/elasticsearch/api/response.rb#26
  def initialize(response); end

  # source://elasticsearch-api//lib/elasticsearch/api/response.rb#30
  def method_missing(method, *args, &block); end

  # source://elasticsearch-api//lib/elasticsearch/api/response.rb#43
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://elasticsearch-api//lib/elasticsearch/api/response.rb#38
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://elasticsearch-api//lib/elasticsearch/api/response.rb#24
Elasticsearch::API::Response::RESPONSE_METHODS = T.let(T.unsafe(nil), Array)

# source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/rollup_search.rb#23
module Elasticsearch::API::Rollup
  # Proxy method for {RollupClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/rollup.rb#31
  def rollup; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/rollup_search.rb#24
module Elasticsearch::API::Rollup::Actions
  # Deletes an existing rollup job.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-delete-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/delete_job.rb#36
  def delete_job(arguments = T.unsafe(nil)); end

  # Retrieves the configuration, stats, and status of rollup jobs.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/get_jobs.rb#36
  def get_jobs(arguments = T.unsafe(nil)); end

  # Returns the capabilities of any rollup jobs that have been configured for a specific index or index pattern.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-rollup-caps.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/get_rollup_caps.rb#36
  def get_rollup_caps(arguments = T.unsafe(nil)); end

  # Returns the rollup capabilities of all jobs inside of a rollup index (e.g. the index where rollup data is stored).
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-rollup-index-caps.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/get_rollup_index_caps.rb#36
  def get_rollup_index_caps(arguments = T.unsafe(nil)); end

  # Creates a rollup job.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-put-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/put_job.rb#37
  def put_job(arguments = T.unsafe(nil)); end

  # Rollup an index
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/xpack-rollup.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/rollup.rb#38
  def rollup(arguments = T.unsafe(nil)); end

  # Enables searching rolled-up data using the standard query DSL.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-search.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/rollup_search.rb#39
  def rollup_search(arguments = T.unsafe(nil)); end

  # Starts an existing, stopped rollup job.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-start-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/start_job.rb#36
  def start_job(arguments = T.unsafe(nil)); end

  # Stops an existing, started rollup job.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-stop-job.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/rollup/stop_job.rb#38
  def stop_job(arguments = T.unsafe(nil)); end
end

# Client for the "rollup" namespace (includes the {Rollup::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/rollup.rb#25
class Elasticsearch::API::Rollup::RollupClient
  include ::Elasticsearch::API::Rollup::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/sql/clear_cursor.rb#23
module Elasticsearch::API::SQL
  # Proxy method for {SQLClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/sql.rb#31
  def sql; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/sql/clear_cursor.rb#24
module Elasticsearch::API::SQL::Actions
  # Clears the SQL cursor
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/clear-sql-cursor-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/sql/clear_cursor.rb#32
  def clear_cursor(arguments = T.unsafe(nil)); end

  # Deletes an async SQL search or a stored synchronous SQL search. If the search is still running, the API cancels it.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-async-sql-search-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/sql/delete_async.rb#32
  def delete_async(arguments = T.unsafe(nil)); end

  # Returns the current status and available results for an async SQL search or stored synchronous SQL search
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-async-sql-search-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/sql/get_async.rb#36
  def get_async(arguments = T.unsafe(nil)); end

  # Returns the current status of an async SQL search or a stored synchronous SQL search
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-async-sql-search-status-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/sql/get_async_status.rb#32
  def get_async_status(arguments = T.unsafe(nil)); end

  # Executes a SQL request
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-search-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/sql/query.rb#33
  def query(arguments = T.unsafe(nil)); end

  # Translates SQL into Elasticsearch queries
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-translate-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/sql/translate.rb#32
  def translate(arguments = T.unsafe(nil)); end
end

# Client for the "sql" namespace (includes the {SQL::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/sql.rb#25
class Elasticsearch::API::SQL::SQLClient
  include ::Elasticsearch::API::SQL::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/ssl/certificates.rb#23
module Elasticsearch::API::SSL
  # Proxy method for {SSLClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/ssl.rb#31
  def ssl; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/ssl/certificates.rb#24
module Elasticsearch::API::SSL::Actions
  # Retrieves information about the X.509 certificates used to encrypt communications in the cluster.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-ssl.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/ssl/certificates.rb#31
  def certificates(arguments = T.unsafe(nil)); end
end

# Client for the "ssl" namespace (includes the {SSL::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/ssl.rb#25
class Elasticsearch::API::SSL::SSLClient
  include ::Elasticsearch::API::SSL::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/searchable_snapshots/cache_stats.rb#23
module Elasticsearch::API::SearchableSnapshots
  # Proxy method for {SearchableSnapshotsClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/searchable_snapshots.rb#31
  def searchable_snapshots; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/searchable_snapshots/cache_stats.rb#24
module Elasticsearch::API::SearchableSnapshots::Actions
  # Retrieve node-level cache statistics about searchable snapshots.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/searchable-snapshots-apis.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/searchable_snapshots/cache_stats.rb#36
  def cache_stats(arguments = T.unsafe(nil)); end

  # Clear the cache of searchable snapshots.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/searchable-snapshots-apis.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/searchable_snapshots/clear_cache.rb#39
  def clear_cache(arguments = T.unsafe(nil)); end

  # Mount a snapshot as a searchable index.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/searchable-snapshots-api-mount-snapshot.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/searchable_snapshots/mount.rb#37
  def mount(arguments = T.unsafe(nil)); end

  # Retrieve shard-level statistics about searchable snapshots.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/searchable-snapshots-apis.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/searchable_snapshots/stats.rb#33
  def stats(arguments = T.unsafe(nil)); end
end

# Client for the "searchable_snapshots" namespace (includes the {SearchableSnapshots::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/searchable_snapshots.rb#25
class Elasticsearch::API::SearchableSnapshots::SearchableSnapshotsClient
  include ::Elasticsearch::API::SearchableSnapshots::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_complete_logout.rb#23
module Elasticsearch::API::Security
  # Proxy method for {SecurityClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/security.rb#31
  def security; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_complete_logout.rb#24
module Elasticsearch::API::Security::Actions
  # Creates or updates the user profile on behalf of another user.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-activate-user-profile.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/activate_user_profile.rb#36
  def activate_user_profile(arguments = T.unsafe(nil)); end

  # Enables authentication as a user and retrieve information about the authenticated user.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-authenticate.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/authenticate.rb#31
  def authenticate(arguments = T.unsafe(nil)); end

  # Changes the passwords of users in the native realm and built-in users.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/change_password.rb#34
  def change_password(arguments = T.unsafe(nil)); end

  # Clear a subset or all entries from the API key cache.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-api-key-cache.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/clear_api_key_cache.rb#32
  def clear_api_key_cache(arguments = T.unsafe(nil)); end

  # Evicts application privileges from the native application privileges cache.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-privilege-cache.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/clear_cached_privileges.rb#32
  def clear_cached_privileges(arguments = T.unsafe(nil)); end

  # Evicts users from the user cache. Can completely clear the cache or evict specific users.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-cache.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/clear_cached_realms.rb#33
  def clear_cached_realms(arguments = T.unsafe(nil)); end

  # Evicts roles from the native role cache.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-role-cache.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/clear_cached_roles.rb#32
  def clear_cached_roles(arguments = T.unsafe(nil)); end

  # Evicts tokens from the service account token caches.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-service-token-caches.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/clear_cached_service_tokens.rb#34
  def clear_cached_service_tokens(arguments = T.unsafe(nil)); end

  # Creates an API key for access without requiring basic authentication.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/create_api_key.rb#33
  def create_api_key(arguments = T.unsafe(nil)); end

  # Creates a service account token for access without requiring basic authentication.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-service-token.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/create_service_token.rb#35
  def create_service_token(arguments = T.unsafe(nil)); end

  # Removes application privileges.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-privilege.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/delete_privileges.rb#34
  def delete_privileges(arguments = T.unsafe(nil)); end

  # Removes roles in the native realm.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-role.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/delete_role.rb#33
  def delete_role(arguments = T.unsafe(nil)); end

  # Removes role mappings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-role-mapping.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/delete_role_mapping.rb#33
  def delete_role_mapping(arguments = T.unsafe(nil)); end

  # Deletes a service account token.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-service-token.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/delete_service_token.rb#35
  def delete_service_token(arguments = T.unsafe(nil)); end

  # Deletes users from the native realm.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-delete-user.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/delete_user.rb#33
  def delete_user(arguments = T.unsafe(nil)); end

  # Disables users in the native realm.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/disable_user.rb#33
  def disable_user(arguments = T.unsafe(nil)); end

  # Disables a user profile so it's not visible in user profile searches.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-disable-user-profile.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/disable_user_profile.rb#37
  def disable_user_profile(arguments = T.unsafe(nil)); end

  # Enables users in the native realm.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/enable_user.rb#33
  def enable_user(arguments = T.unsafe(nil)); end

  # Enables a user profile so it's visible in user profile searches.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-enable-user-profile.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/enable_user_profile.rb#37
  def enable_user_profile(arguments = T.unsafe(nil)); end

  # Allows a kibana instance to configure itself to communicate with a secured elasticsearch cluster.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-kibana-enrollment.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/enroll_kibana.rb#31
  def enroll_kibana(arguments = T.unsafe(nil)); end

  # Allows a new node to enroll to an existing cluster with security enabled.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-node-enrollment.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/enroll_node.rb#31
  def enroll_node(arguments = T.unsafe(nil)); end

  # Retrieves information for one or more API keys.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-api-key.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_api_key.rb#36
  def get_api_key(arguments = T.unsafe(nil)); end

  # Retrieves the list of cluster privileges and index privileges that are available in this version of Elasticsearch.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-builtin-privileges.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_builtin_privileges.rb#31
  def get_builtin_privileges(arguments = T.unsafe(nil)); end

  # Retrieves application privileges.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-privileges.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_privileges.rb#33
  def get_privileges(arguments = T.unsafe(nil)); end

  # Retrieves roles in the native realm.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_role.rb#32
  def get_role(arguments = T.unsafe(nil)); end

  # Retrieves role mappings.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-role-mapping.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_role_mapping.rb#32
  def get_role_mapping(arguments = T.unsafe(nil)); end

  # Retrieves information about service accounts.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-service-accounts.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_service_accounts.rb#33
  def get_service_accounts(arguments = T.unsafe(nil)); end

  # Retrieves information of all service credentials for a service account.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-service-credentials.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_service_credentials.rb#33
  def get_service_credentials(arguments = T.unsafe(nil)); end

  # Creates a bearer token for access without requiring basic authentication.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-token.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_token.rb#32
  def get_token(arguments = T.unsafe(nil)); end

  # Retrieves information about users in the native realm and built-in users.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_user.rb#32
  def get_user(arguments = T.unsafe(nil)); end

  # Retrieves security privileges for the logged in user.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user-privileges.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_user_privileges.rb#31
  def get_user_privileges(arguments = T.unsafe(nil)); end

  # Retrieves user profile for the given unique ID.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-get-user-profile.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/get_user_profile.rb#37
  def get_user_profile(arguments = T.unsafe(nil)); end

  # Creates an API key on behalf of another user.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-grant-api-key.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/grant_api_key.rb#33
  def grant_api_key(arguments = T.unsafe(nil)); end

  # Determines whether the specified user has a specified list of privileges.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/has_privileges.rb#33
  def has_privileges(arguments = T.unsafe(nil)); end

  # Determines whether the users associated with the specified profile IDs have all the requested privileges.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-has-privileges-user-profile.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/has_privileges_user_profile.rb#36
  def has_privileges_user_profile(arguments = T.unsafe(nil)); end

  # Invalidates one or more API keys.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-invalidate-api-key.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/invalidate_api_key.rb#32
  def invalidate_api_key(arguments = T.unsafe(nil)); end

  # Invalidates one or more access tokens or refresh tokens.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-invalidate-token.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/invalidate_token.rb#32
  def invalidate_token(arguments = T.unsafe(nil)); end

  # Exchanges an OpenID Connection authentication response message for an Elasticsearch access token and refresh token pair
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-oidc-authenticate.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/oidc_authenticate.rb#32
  def oidc_authenticate(arguments = T.unsafe(nil)); end

  # Invalidates a refresh token and access token that was generated from the OpenID Connect Authenticate API
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-oidc-logout.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/oidc_logout.rb#32
  def oidc_logout(arguments = T.unsafe(nil)); end

  # Creates an OAuth 2.0 authentication request as a URL string
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-oidc-prepare-authentication.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/oidc_prepare_authentication.rb#32
  def oidc_prepare_authentication(arguments = T.unsafe(nil)); end

  # Adds or updates application privileges.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-privileges.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/put_privileges.rb#33
  def put_privileges(arguments = T.unsafe(nil)); end

  # Adds and updates roles in the native realm.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/put_role.rb#34
  def put_role(arguments = T.unsafe(nil)); end

  # Creates and updates role mappings.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role-mapping.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/put_role_mapping.rb#34
  def put_role_mapping(arguments = T.unsafe(nil)); end

  # Adds and updates users in the native realm. These users are commonly referred to as native users.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/put_user.rb#34
  def put_user(arguments = T.unsafe(nil)); end

  # Retrieves information for API keys using a subset of query DSL
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-query-api-key.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/query_api_keys.rb#32
  def query_api_keys(arguments = T.unsafe(nil)); end

  # Exchanges a SAML Response message for an Elasticsearch access token and refresh token pair
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-authenticate.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_authenticate.rb#32
  def saml_authenticate(arguments = T.unsafe(nil)); end

  # Verifies the logout response sent from the SAML IdP
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-complete-logout.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_complete_logout.rb#32
  def saml_complete_logout(arguments = T.unsafe(nil)); end

  # Consumes a SAML LogoutRequest
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-invalidate.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_invalidate.rb#32
  def saml_invalidate(arguments = T.unsafe(nil)); end

  # Invalidates an access token and a refresh token that were generated via the SAML Authenticate API
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-logout.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_logout.rb#32
  def saml_logout(arguments = T.unsafe(nil)); end

  # Creates a SAML authentication request
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-prepare-authentication.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_prepare_authentication.rb#32
  def saml_prepare_authentication(arguments = T.unsafe(nil)); end

  # Generates SAML metadata for the Elastic stack SAML 2.0 Service Provider
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-saml-sp-metadata.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/saml_service_provider_metadata.rb#32
  def saml_service_provider_metadata(arguments = T.unsafe(nil)); end

  # Get suggestions for user profiles that match specified search criteria.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-suggest-user-profile.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/suggest_user_profiles.rb#37
  def suggest_user_profiles(arguments = T.unsafe(nil)); end

  # Updates attributes of an existing API key.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-update-api-key.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/update_api_key.rb#33
  def update_api_key(arguments = T.unsafe(nil)); end

  # Update application specific data for the user profile of the given unique ID.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-update-user-profile-data.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/security/update_user_profile_data.rb#40
  def update_user_profile_data(arguments = T.unsafe(nil)); end
end

# Client for the "security" namespace (includes the {Security::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/security.rb#25
class Elasticsearch::API::Security::SecurityClient
  include ::Elasticsearch::API::Security::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/shutdown/get_node.rb#23
module Elasticsearch::API::Shutdown
  # Proxy method for {ShutdownClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/shutdown.rb#31
  def shutdown; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/shutdown/get_node.rb#24
module Elasticsearch::API::Shutdown::Actions
  # Removes a node from the shutdown list. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/shutdown/delete_node.rb#32
  def delete_node(arguments = T.unsafe(nil)); end

  # Retrieve status of a node or nodes that are currently marked as shutting down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/shutdown/get_node.rb#32
  def get_node(arguments = T.unsafe(nil)); end

  # Adds a node to be shut down. Designed for indirect use by ECE/ESS and ECK. Direct use is not supported.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/shutdown/put_node.rb#33
  def put_node(arguments = T.unsafe(nil)); end
end

# Client for the "shutdown" namespace (includes the {Shutdown::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/shutdown.rb#25
class Elasticsearch::API::Shutdown::ShutdownClient
  include ::Elasticsearch::API::Shutdown::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/get_repository.rb#23
module Elasticsearch::API::Snapshot
  # Proxy method for {SnapshotClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/snapshot.rb#31
  def snapshot; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/get_repository.rb#24
module Elasticsearch::API::Snapshot::Actions
  # Removes stale data from repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/clean-up-snapshot-repo-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/cleanup_repository.rb#34
  def cleanup_repository(arguments = T.unsafe(nil)); end

  # Clones indices from one snapshot into another snapshot in the same repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/clone.rb#36
  def clone(arguments = T.unsafe(nil)); end

  # Creates a snapshot in a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/create.rb#36
  def create(arguments = T.unsafe(nil)); end

  # Creates a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/create_repository.rb#36
  def create_repository(arguments = T.unsafe(nil)); end

  # Deletes one or more snapshots.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/delete.rb#34
  def delete(arguments = T.unsafe(nil)); end

  # Deletes a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/delete_repository.rb#34
  def delete_repository(arguments = T.unsafe(nil)); end

  # Returns information about a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/get.rb#46
  def get(arguments = T.unsafe(nil)); end

  # Returns information about a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/get_repository.rb#34
  def get_repository(arguments = T.unsafe(nil)); end

  # Analyzes a repository for correctness and performance
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/repository_analyze.rb#43
  def repository_analyze(arguments = T.unsafe(nil)); end

  # Restores a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/restore.rb#36
  def restore(arguments = T.unsafe(nil)); end

  # Returns information about the status of a snapshot.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/status.rb#35
  def status(arguments = T.unsafe(nil)); end

  # Verifies a repository.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot/verify_repository.rb#34
  def verify_repository(arguments = T.unsafe(nil)); end
end

# Client for the "snapshot" namespace (includes the {Snapshot::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/snapshot.rb#25
class Elasticsearch::API::Snapshot::SnapshotClient
  include ::Elasticsearch::API::Snapshot::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/get_stats.rb#23
module Elasticsearch::API::SnapshotLifecycleManagement
  # Proxy method for {SnapshotLifecycleManagementClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/snapshot_lifecycle_management.rb#31
  def slm; end

  # Proxy method for {SnapshotLifecycleManagementClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/snapshot_lifecycle_management.rb#31
  def snapshot_lifecycle_management; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/get_stats.rb#24
module Elasticsearch::API::SnapshotLifecycleManagement::Actions
  # Deletes an existing snapshot lifecycle policy.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-delete-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/delete_lifecycle.rb#32
  def delete_lifecycle(arguments = T.unsafe(nil)); end

  # Immediately creates a snapshot according to the lifecycle policy, without waiting for the scheduled time.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-lifecycle.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/execute_lifecycle.rb#32
  def execute_lifecycle(arguments = T.unsafe(nil)); end

  # Deletes any snapshots that are expired according to the policy's retention rules.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-execute-retention.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/execute_retention.rb#31
  def execute_retention(arguments = T.unsafe(nil)); end

  # Retrieves one or more snapshot lifecycle policy definitions and information about the latest snapshot attempts.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/get_lifecycle.rb#32
  def get_lifecycle(arguments = T.unsafe(nil)); end

  # Returns global and policy-level statistics about actions taken by snapshot lifecycle management.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/get_stats.rb#31
  def get_stats(arguments = T.unsafe(nil)); end

  # Retrieves the status of snapshot lifecycle management (SLM).
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-get-status.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/get_status.rb#31
  def get_status(arguments = T.unsafe(nil)); end

  # Creates or updates a snapshot lifecycle policy.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/put_lifecycle.rb#33
  def put_lifecycle(arguments = T.unsafe(nil)); end

  # Turns on snapshot lifecycle management (SLM).
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-start.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/start.rb#31
  def start(arguments = T.unsafe(nil)); end

  # Turns off snapshot lifecycle management (SLM).
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-stop.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/snapshot_lifecycle_management/stop.rb#31
  def stop(arguments = T.unsafe(nil)); end
end

# Client for the "snapshot_lifecycle_management" namespace (includes the {SnapshotLifecycleManagement::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/snapshot_lifecycle_management.rb#25
class Elasticsearch::API::SnapshotLifecycleManagement::SnapshotLifecycleManagementClient
  include ::Elasticsearch::API::SnapshotLifecycleManagement::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/tasks/list.rb#23
module Elasticsearch::API::Tasks
  # Proxy method for {TasksClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/tasks.rb#31
  def tasks; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/tasks/list.rb#24
module Elasticsearch::API::Tasks::Actions
  # Cancels a task, if it can be cancelled through an API.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/tasks/cancel.rb#40
  def cancel(arguments = T.unsafe(nil)); end

  # Returns information about a task.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/tasks/get.rb#38
  def get(arguments = T.unsafe(nil)); end

  # Returns a list of tasks.
  # This functionality is Experimental and may be changed or removed
  # completely in a future release. Elastic will take a best effort approach
  # to fix any issues, but experimental features are not subject to the
  # support SLA of official GA features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/tasks/list.rb#42
  def list(arguments = T.unsafe(nil)); end
end

# Client for the "tasks" namespace (includes the {Tasks::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/tasks.rb#25
class Elasticsearch::API::Tasks::TasksClient
  include ::Elasticsearch::API::Tasks::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/text_structure/find_structure.rb#23
module Elasticsearch::API::TextStructure
  # Proxy method for {TextStructureClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/text_structure.rb#31
  def text_structure; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/text_structure/find_structure.rb#24
module Elasticsearch::API::TextStructure::Actions
  # Finds the structure of a text file. The text file must contain data that is suitable to be ingested into Elasticsearch.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/find-structure.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/text_structure/find_structure.rb#46
  def find_structure(arguments = T.unsafe(nil)); end
end

# Client for the "text_structure" namespace (includes the {TextStructure::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/text_structure.rb#25
class Elasticsearch::API::TextStructure::TextStructureClient
  include ::Elasticsearch::API::TextStructure::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/transform/start_transform.rb#23
module Elasticsearch::API::Transform
  # Proxy method for {TransformClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/transform.rb#31
  def transform; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/transform/start_transform.rb#24
module Elasticsearch::API::Transform::Actions
  # Deletes an existing transform.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/delete-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/delete_transform.rb#34
  def delete_transform(arguments = T.unsafe(nil)); end

  # Retrieves configuration information for transforms.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/get_transform.rb#36
  def get_transform(arguments = T.unsafe(nil)); end

  # Retrieves usage information for transforms.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/get-transform-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/get_transform_stats.rb#35
  def get_transform_stats(arguments = T.unsafe(nil)); end

  # Previews a transform.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/preview-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/preview_transform.rb#34
  def preview_transform(arguments = T.unsafe(nil)); end

  # Instantiates a transform.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/put-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/put_transform.rb#35
  def put_transform(arguments = T.unsafe(nil)); end

  # Resets an existing transform.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/reset-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/reset_transform.rb#34
  def reset_transform(arguments = T.unsafe(nil)); end

  # Starts one or more transforms.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/start-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/start_transform.rb#33
  def start_transform(arguments = T.unsafe(nil)); end

  # Stops one or more transforms.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/stop-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/stop_transform.rb#37
  def stop_transform(arguments = T.unsafe(nil)); end

  # Updates certain properties of a transform.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/update-transform.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/update_transform.rb#35
  def update_transform(arguments = T.unsafe(nil)); end

  # Upgrades all transforms.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/upgrade-transforms.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/transform/upgrade_transforms.rb#33
  def upgrade_transforms(arguments = T.unsafe(nil)); end
end

# Client for the "transform" namespace (includes the {Transform::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/transform.rb#25
class Elasticsearch::API::Transform::TransformClient
  include ::Elasticsearch::API::Transform::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api.rb#39
Elasticsearch::API::UNDERSCORE_ALL = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api.rb#38
Elasticsearch::API::UNDERSCORE_SEARCH = T.let(T.unsafe(nil), String)

# Generic utility methods
#
# source://elasticsearch-api//lib/elasticsearch/api/utils.rb#23
module Elasticsearch::API::Utils
  extend ::Elasticsearch::API::Utils

  # Convert an array of payloads into Elasticsearch `header\ndata` format
  #
  # Supports various different formats of the payload: Array of Strings, Header/Data pairs,
  # or the conveniency "combined" format where data is passed along with the header
  # in a single item.
  #
  #     Elasticsearch::API::Utils.__bulkify [
  #       { :index =>  { :_index => 'myindexA', :_type => 'mytype', :_id => '1', :data => { :title => 'Test' } } },
  #       { :update => { :_index => 'myindexB', :_type => 'mytype', :_id => '2', :data => { :doc => { :title => 'Update' } } } }
  #     ]
  #
  #     # => {"index":{"_index":"myindexA","_type":"mytype","_id":"1"}}
  #     # => {"title":"Test"}
  #     # => {"update":{"_index":"myindexB","_type":"mytype","_id":"2"}}
  #     # => {"doc":{"title":"Update"}}
  #
  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#99
  def __bulkify(payload); end

  # URL-escape a string
  #
  # @api private
  # @example
  #   __escape('foo/bar') # => 'foo%2Fbar'
  #   __escape('bar^bam') # => 'bar%5Ebam'
  #
  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#31
  def __escape(string); end

  # Extracts the valid parts of the URL from the arguments
  #
  # @api private
  # @example Extract parts
  #   __extract_parts { :foo => true }, [:foo, :bar]
  #   # => [:foo]
  # @note Mutates the `arguments` argument, to prevent failures in `__validate_and_extract_params`.
  # @param arguments [Hash] Hash of arguments to verify and extract, **with symbolized keys**
  # @param valid_parts [Array<Symbol>] An array of symbol with valid keys
  # @return [Array<String>] Valid parts of the URL as an array of strings
  #
  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#153
  def __extract_parts(arguments, valid_parts = T.unsafe(nil)); end

  # Create a "list" of values from arguments, ignoring nil values and encoding special characters.
  #
  # @api private
  # @example Create a list from array
  #   __listify(['A','B']) # => 'A,B'
  # @example Create a list from arguments
  #   __listify('A','B') # => 'A,B'
  # @example Escape values
  #   __listify('foo','bar^bam') # => 'foo,bar%5Ebam'
  # @example Do not escape the values
  #   __listify('foo','bar^bam', escape: false) # => 'foo,bar^bam'
  #
  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#51
  def __listify(*list); end

  # Create a path (URL part) from arguments, ignoring nil values and empty strings.
  #
  # # @example Encode special characters
  #     __pathify(['foo', 'bar^bam']) # => 'foo/bar%5Ebam'
  #
  # @api private
  # @example Create a path from array
  #   __pathify(['foo', '', nil, 'bar']) # => 'foo/bar'
  # @example Create a path from arguments
  #   __pathify('foo', '', nil, 'bar') # => 'foo/bar'
  #
  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#75
  def __pathify(*segments); end

  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#220
  def __report_unsupported_method(name); end

  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#178
  def __report_unsupported_parameters(arguments, params = T.unsafe(nil)); end

  # Calls the given block, rescuing from `StandardError`.
  #
  # Primary use case is the `:ignore` parameter for API calls.
  #
  # Returns `false` if exception contains NotFound in its class name or message,
  # else re-raises the exception.
  #
  # @api private
  # @yield [block] A block of code to be executed with exception handling.
  #
  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#168
  def __rescue_from_not_found(&block); end

  # source://elasticsearch-api//lib/elasticsearch/api/utils.rb#132
  def process_params(arguments); end
end

# source://elasticsearch-api//lib/elasticsearch/api/version.rb#20
Elasticsearch::API::VERSION = T.let(T.unsafe(nil), String)

# source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/put_watch.rb#23
module Elasticsearch::API::Watcher
  # Proxy method for {WatcherClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/watcher.rb#31
  def watcher; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/put_watch.rb#24
module Elasticsearch::API::Watcher::Actions
  # Acknowledges a watch, manually throttling the execution of the watch's actions.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/ack_watch.rb#33
  def ack_watch(arguments = T.unsafe(nil)); end

  # Activates a currently inactive watch.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/activate_watch.rb#32
  def activate_watch(arguments = T.unsafe(nil)); end

  # Deactivates a currently active watch.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/deactivate_watch.rb#32
  def deactivate_watch(arguments = T.unsafe(nil)); end

  # Removes a watch from Watcher.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/delete_watch.rb#32
  def delete_watch(arguments = T.unsafe(nil)); end

  # Forces the execution of a stored watch.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/execute_watch.rb#34
  def execute_watch(arguments = T.unsafe(nil)); end

  # Retrieves a watch by its ID.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/get_watch.rb#32
  def get_watch(arguments = T.unsafe(nil)); end

  # Creates a new watch, or updates an existing one.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @raise [ArgumentError]
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/put_watch.rb#37
  def put_watch(arguments = T.unsafe(nil)); end

  # Retrieves stored watches.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-query-watches.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/query_watches.rb#32
  def query_watches(arguments = T.unsafe(nil)); end

  # Starts Watcher if it is not already running.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/start.rb#31
  def start(arguments = T.unsafe(nil)); end

  # Retrieves the current Watcher metrics.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/stats.rb#33
  def stats(arguments = T.unsafe(nil)); end

  # Stops Watcher if it is running.
  #
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stop.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/watcher/stop.rb#31
  def stop(arguments = T.unsafe(nil)); end
end

# Client for the "watcher" namespace (includes the {Watcher::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/watcher.rb#25
class Elasticsearch::API::Watcher::WatcherClient
  include ::Elasticsearch::API::Watcher::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/xpack/info.rb#23
module Elasticsearch::API::XPack
  # Proxy method for {XPackClient}, available in the receiving object
  #
  # source://elasticsearch-api//lib/elasticsearch/api/namespace/xpack.rb#31
  def xpack; end
end

# source://elasticsearch-api//lib/elasticsearch/api/actions/xpack/info.rb#24
module Elasticsearch::API::XPack::Actions
  # Retrieves information about the installed X-Pack features.
  #
  # @option arguments
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/xpack/info.rb#33
  def info(arguments = T.unsafe(nil)); end

  # Retrieves usage information about the installed X-Pack features.
  #
  # @option arguments
  # @option arguments
  # @param arguments [Hash] a customizable set of options
  # @see https://www.elastic.co/guide/en/elasticsearch/reference/current/usage-api.html
  #
  # source://elasticsearch-api//lib/elasticsearch/api/actions/xpack/usage.rb#32
  def usage(arguments = T.unsafe(nil)); end
end

# Client for the "xpack" namespace (includes the {XPack::Actions} methods)
#
# source://elasticsearch-api//lib/elasticsearch/api/namespace/xpack.rb#25
class Elasticsearch::API::XPack::XPackClient
  include ::Elasticsearch::API::XPack::Actions
  include ::Elasticsearch::API::Common::Client::Base
  include ::Elasticsearch::API::Common::Client
end

# source://elasticsearch/8.4.0/lib/elasticsearch.rb#23
Elasticsearch::NOT_ELASTICSEARCH_WARNING = T.let(T.unsafe(nil), String)

# source://elasticsearch/8.4.0/lib/elasticsearch.rb#24
Elasticsearch::SECURITY_PRIVILEGES_VALIDATION_WARNING = T.let(T.unsafe(nil), String)

# source://elasticsearch/8.4.0/lib/elasticsearch.rb#25
Elasticsearch::VALIDATION_WARNING = T.let(T.unsafe(nil), String)

# source://elasticsearch/8.4.0/lib/elasticsearch/version.rb#19
Elasticsearch::VERSION = T.let(T.unsafe(nil), String)
