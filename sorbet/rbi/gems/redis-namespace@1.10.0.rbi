# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `redis-namespace` gem.
# Please instead update this file by running `bin/tapioca gem redis-namespace`.

# source://redis-namespace//lib/redis/namespace/version.rb#3
class Redis
  include ::Redis::Commands::Bitmaps
  include ::Redis::Commands::Cluster
  include ::Redis::Commands::Connection
  include ::Redis::Commands::Geo
  include ::Redis::Commands::Hashes
  include ::Redis::Commands::HyperLogLog
  include ::Redis::Commands::Keys
  include ::Redis::Commands::Lists
  include ::Redis::Commands::Pubsub
  include ::Redis::Commands::Scripting
  include ::Redis::Commands::Server
  include ::Redis::Commands::Sets
  include ::Redis::Commands::SortedSets
  include ::Redis::Commands::Streams
  include ::Redis::Commands::Strings
  include ::Redis::Commands::Transactions

  # source://redis/4.8.0/lib/redis.rb#83
  def initialize(options = T.unsafe(nil)); end

  # source://redis/4.8.0/lib/redis.rb#160
  def _client; end

  # source://redis/4.8.0/lib/redis.rb#110
  def close; end

  # source://redis/4.8.0/lib/redis.rb#140
  def commit; end

  # source://redis/4.8.0/lib/redis.rb#105
  def connected?; end

  # source://redis/4.8.0/lib/redis.rb#250
  def connection; end

  # source://redis/4.8.0/lib/redis.rb#110
  def disconnect!; end

  # source://redis/4.8.0/lib/redis.rb#246
  def dup; end

  # source://redis/4.8.0/lib/redis.rb#238
  def id; end

  # source://redis/4.8.0/lib/redis.rb#242
  def inspect; end

  # source://redis/4.8.0/lib/redis.rb#214
  def multi(&block); end

  # source://redis/4.8.0/lib/redis.rb#164
  def pipelined(&block); end

  # source://redis/4.8.0/lib/redis.rb#125
  def queue(*command); end

  # source://redis/4.8.0/lib/redis.rb#115
  def with; end

  # source://redis/4.8.0/lib/redis.rb#93
  def with_reconnect(val = T.unsafe(nil), &blk); end

  # source://redis/4.8.0/lib/redis.rb#100
  def without_reconnect(&blk); end

  private

  # source://redis/4.8.0/lib/redis.rb#280
  def _subscription(method, timeout, channels, block); end

  # source://redis/4.8.0/lib/redis.rb#274
  def send_blocking_command(command, timeout, &block); end

  # source://redis/4.8.0/lib/redis.rb#268
  def send_command(command, &block); end

  # source://redis/4.8.0/lib/redis.rb#264
  def synchronize; end

  class << self
    # source://redis/4.8.0/lib/redis.rb#40
    def current; end

    # source://redis/4.8.0/lib/redis.rb#45
    def current=(redis); end

    # source://redis/4.8.0/lib/redis.rb#30
    def deprecate!(message); end

    # source://redis/4.8.0/lib/redis.rb#15
    def exists_returns_integer; end

    # source://redis/4.8.0/lib/redis.rb#18
    def exists_returns_integer=(value); end

    # source://redis/4.8.0/lib/redis.rb#16
    def raise_deprecations; end

    # source://redis/4.8.0/lib/redis.rb#16
    def raise_deprecations=(_arg0); end

    # source://redis/4.8.0/lib/redis.rb#16
    def sadd_returns_boolean; end

    # source://redis/4.8.0/lib/redis.rb#16
    def sadd_returns_boolean=(_arg0); end

    # source://redis/4.8.0/lib/redis.rb#16
    def silence_deprecations; end

    # source://redis/4.8.0/lib/redis.rb#16
    def silence_deprecations=(_arg0); end
  end
end

# source://redis/4.8.0/lib/redis.rb#8
Redis::BASE_PATH = T.let(T.unsafe(nil), String)

# source://redis-namespace//lib/redis/namespace/version.rb#4
class Redis::Namespace
  # @return [Namespace] a new instance of Namespace
  #
  # source://redis-namespace//lib/redis/namespace.rb#254
  def initialize(namespace, options = T.unsafe(nil)); end

  # source://redis-namespace//lib/redis/namespace.rb#280
  def _client; end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def append(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def auth(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def bgrewriteaof(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def bgsave(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def bitcount(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def bitop(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def bitpos(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def blpop(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def brpop(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def brpoplpush(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def bzpopmax(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def bzpopmin(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#435
  def call_with_namespace(command, *args, &block); end

  # This operation can run for a very long time if the namespace contains lots of keys!
  # It should be used in tests, or when the namespace is small enough
  # and you are sure you know what you are doing.
  #
  # source://redis-namespace//lib/redis/namespace.rb#344
  def clear; end

  # source://redis-namespace//lib/redis/namespace.rb#274
  def client; end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def close(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def config(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#328
  def connection; end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def dbsize(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def debug(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def decr(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def decrby(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def del(*args, &block); end

  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#266
  def deprecations?; end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def discard(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def disconnect!(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def dump(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def echo(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#336
  def eval(*args); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def evalsha(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#332
  def exec; end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def exists(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def exists?(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def expire(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def expireat(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def flushall(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def flushdb(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#324
  def full_namespace; end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def get(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def getbit(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def getex(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def getrange(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def getset(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hdel(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hexists(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hget(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hgetall(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hincrby(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hincrbyfloat(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hkeys(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hlen(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hmget(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hmset(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hscan(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hscan_each(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hset(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hsetnx(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def hvals(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def incr(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def incrby(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def incrbyfloat(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def info(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#417
  def inspect; end

  # source://redis-namespace//lib/redis/namespace.rb#299
  def keys(query = T.unsafe(nil)); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def lastsave(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def lindex(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def linsert(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def llen(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def lpop(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def lpush(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def lpushx(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def lrange(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def lrem(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def lset(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def ltrim(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def mapped_hmget(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def mapped_hmset(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def mapped_mget(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def mapped_mset(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def mapped_msetnx(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#394
  def method_missing(command, *args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def mget(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def monitor(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def move(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def mset(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def msetnx(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#303
  def multi(&block); end

  # source://redis-namespace//lib/redis/namespace.rb#315
  def namespace(desired_namespace = T.unsafe(nil)); end

  # Sets the attribute namespace
  #
  # @param value the value to set the attribute namespace to.
  #
  # source://redis-namespace//lib/redis/namespace.rb#250
  def namespace=(_arg0); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def object(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def persist(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def pexpire(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def pexpireat(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def pfadd(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def pfcount(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def pfmerge(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def ping(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#311
  def pipelined(&block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def psetex(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def psubscribe(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def pttl(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def publish(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def punsubscribe(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def quit(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def randomkey(*args, &block); end

  # Returns the value of attribute redis.
  #
  # source://redis-namespace//lib/redis/namespace.rb#251
  def redis; end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def rename(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def renamenx(*args, &block); end

  # emulate Ruby 1.9+ and keep respond_to_missing? logic together.
  #
  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#293
  def respond_to?(command, include_private = T.unsafe(nil)); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def restore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def rpop(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def rpoplpush(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def rpush(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def rpushx(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sadd(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sadd?(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def save(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def scan(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def scan_each(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def scard(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def script(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sdiff(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sdiffstore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def select(*args, &block); end

  def self_respond_to?(*_arg0); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def set(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def setbit(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def setex(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def setnx(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def setrange(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def shutdown(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sinter(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sinterstore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sismember(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#368
  def slaveof(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def smembers(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def smismember(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def smove(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sort(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def spop(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def srandmember(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def srem(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sscan(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sscan_each(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def strlen(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def subscribe(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sunion(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def sunionstore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def time(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def ttl(*args, &block); end

  # Ruby defines a now deprecated type method so we need to override it here
  # since it will never hit method_missing
  #
  # source://redis-namespace//lib/redis/namespace.rb#286
  def type(key); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def unlink(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def unsubscribe(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def unwatch(*args, &block); end

  # Returns the value of attribute warning.
  #
  # source://redis-namespace//lib/redis/namespace.rb#252
  def warning; end

  # Sets the attribute warning
  #
  # @param value the value to set the attribute warning to.
  #
  # source://redis-namespace//lib/redis/namespace.rb#252
  def warning=(_arg0); end

  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#270
  def warning?; end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def watch(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zadd(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zcard(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zcount(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zincrby(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zinterstore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zpopmax(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zpopmin(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrange(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrangebylex(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrangebyscore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrank(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrem(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zremrangebylex(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zremrangebyrank(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zremrangebyscore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrevrange(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrevrangebylex(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrevrangebyscore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zrevrank(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zscan(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zscan_each(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zscore(*args, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#388
  def zunionstore(*args, &block); end

  protected

  # source://redis-namespace//lib/redis/namespace.rb#536
  def redis=(redis); end

  private

  # source://redis-namespace//lib/redis/namespace.rb#586
  def add_namespace(key); end

  # source://redis-namespace//lib/redis/namespace.rb#573
  def call_site; end

  # Avoid modifying the caller's (pass-by-reference) arguments.
  #
  # source://redis-namespace//lib/redis/namespace.rb#563
  def clone_args(arg); end

  # source://redis-namespace//lib/redis/namespace.rb#617
  def create_enumerator(&block); end

  # source://redis-namespace//lib/redis/namespace.rb#577
  def namespaced_block(command, &block); end

  # source://redis-namespace//lib/redis/namespace.rb#600
  def rem_namespace(key); end

  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#422
  def respond_to_missing?(command, include_all = T.unsafe(nil)); end

  # source://redis-namespace//lib/redis/namespace.rb#543
  def ruby2_keywords_hash(kwargs); end

  # @return [Boolean]
  #
  # source://redis-namespace//lib/redis/namespace.rb#629
  def supports_scan?; end

  # source://redis-namespace//lib/redis/namespace.rb#552
  def wrapped_send(redis_client, command, args = T.unsafe(nil), &block); end

  class << self
    # Returns the value of attribute sadd_returns_boolean.
    #
    # source://redis-namespace//lib/redis/namespace.rb#247
    def sadd_returns_boolean; end

    # Sets the attribute sadd_returns_boolean
    #
    # @param value the value to set the attribute sadd_returns_boolean to.
    #
    # source://redis-namespace//lib/redis/namespace.rb#247
    def sadd_returns_boolean=(_arg0); end
  end
end

# source://redis-namespace//lib/redis/namespace.rb#211
Redis::Namespace::ADMINISTRATIVE_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#233
Redis::Namespace::COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#229
Redis::Namespace::DEPRECATED_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#203
Redis::Namespace::HELPER_COMMANDS = T.let(T.unsafe(nil), Hash)

# The following tables define how input parameters and result
# values should be modified for the namespace.
#
# COMMANDS is a hash. Each key is the name of a command and each
# value is a two element array.
#
# The first element in the value array describes how to modify the
# arguments passed. It can be one of:
#
#   nil
#     Do nothing.
#   :first
#     Add the namespace to the first argument passed, e.g.
#       GET key => GET namespace:key
#   :all
#     Add the namespace to all arguments passed, e.g.
#       MGET key1 key2 => MGET namespace:key1 namespace:key2
#   :exclude_first
#     Add the namespace to all arguments but the first, e.g.
#   :exclude_last
#     Add the namespace to all arguments but the last, e.g.
#       BLPOP key1 key2 timeout =>
#       BLPOP namespace:key1 namespace:key2 timeout
#   :exclude_options
#     Add the namespace to all arguments, except the last argument,
#     if the last argument is a hash of options.
#       ZUNIONSTORE key1 2 key2 key3 WEIGHTS 2 1 =>
#       ZUNIONSTORE namespace:key1 2 namespace:key2 namespace:key3 WEIGHTS 2 1
#   :alternate
#     Add the namespace to every other argument, e.g.
#       MSET key1 value1 key2 value2 =>
#       MSET namespace:key1 value1 namespace:key2 value2
#   :sort
#     Add namespace to first argument if it is non-nil
#     Add namespace to second arg's :by and :store if second arg is a Hash
#     Add namespace to each element in second arg's :get if second arg is
#       a Hash; forces second arg's :get to be an Array if present.
#   :eval_style
#     Add namespace to each element in keys argument (via options hash or multi-args)
#   :scan_style
#     Add namespace to :match option, or supplies "#{namespace}:*" if not present.
#
# The second element in the value array describes how to modify
# the return value of the Redis call. It can be one of:
#
#   nil
#     Do nothing.
#   :all
#     Add the namespace to all elements returned, e.g.
#       key1 key2 => namespace:key1 namespace:key2
#
# source://redis-namespace//lib/redis/namespace.rb#56
Redis::Namespace::NAMESPACED_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace.rb#196
Redis::Namespace::TRANSACTION_COMMANDS = T.let(T.unsafe(nil), Hash)

# source://redis-namespace//lib/redis/namespace/version.rb#5
Redis::Namespace::VERSION = T.let(T.unsafe(nil), String)

# source://redis/4.8.0/lib/redis/version.rb#4
Redis::VERSION = T.let(T.unsafe(nil), String)
