# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-client` gem.
# Please instead update this file by running `bin/tapioca gem graphql-client`.

# typed: true

module GraphQL
  class << self
    def default_parser; end
    def default_parser=(_arg0); end
    def parse(graphql_string, tracer: T.unsafe(nil)); end
    def parse_file(filename); end
    def parse_with_racc(string, filename: T.unsafe(nil), tracer: T.unsafe(nil)); end
    def scan(graphql_string); end
    def scan_with_ragel(graphql_string); end
  end
end

class GraphQL::Client
  extend ::GraphQL::Client::CollocatedEnforcement

  def initialize(schema:, execute: T.unsafe(nil), enforce_collocated_callers: T.unsafe(nil)); end

  def allow_dynamic_queries; end
  def allow_dynamic_queries=(_arg0); end
  def create_operation(fragment, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end
  def document; end
  def document_tracking_enabled; end
  def document_tracking_enabled=(_arg0); end
  def enforce_collocated_callers; end
  def execute; end
  def get_type(type_name); end
  def parse(str, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end
  def possible_types(type_condition = T.unsafe(nil)); end
  def query(definition, variables: T.unsafe(nil), context: T.unsafe(nil)); end
  def schema; end
  def types; end

  private

  def deep_freeze_json_object(obj); end
  def deep_stringify_keys(obj); end
  def find_definition_dependencies(node); end
  def sliced_definitions(document_dependencies, doc, source_location:); end

  class << self
    def dump_schema(schema, io = T.unsafe(nil), context: T.unsafe(nil)); end
    def load_schema(schema); end
  end
end

module GraphQL::Client::CollocatedEnforcement
  extend ::GraphQL::Client::CollocatedEnforcement

  def allow_noncollocated_callers; end
  def enforce_collocated_callers(mod, methods, path); end
  def verify_collocated_path(location, path, method = T.unsafe(nil)); end
end

class GraphQL::Client::Definition < ::Module
  def initialize(client:, document:, source_document:, ast_node:, source_location:); end

  def client; end
  def definition_name; end
  def definition_node; end
  def document; end
  def indexes; end
  def new(obj, errors = T.unsafe(nil)); end
  def schema_class; end
  def source_document; end
  def source_location; end

  private

  def cast_object(obj); end
  def flatten_spreads(node); end
  def index_node_definitions(visitor); end
  def index_spreads(visitor); end

  class << self
    def for(ast_node:, **kargs); end
  end
end

GraphQL::Client::Definition::EMPTY_SET = T.let(T.unsafe(nil), Set)

module GraphQL::Client::DefinitionVariables
  class << self
    def operation_variables(schema, document, definition_name = T.unsafe(nil)); end
    def variable_node(type); end
    def variables(schema, document, definition_name = T.unsafe(nil)); end
  end
end

module GraphQL::Client::DocumentTypes
  class << self
    def analyze_types(schema, document); end
  end
end

class GraphQL::Client::DynamicQueryError < ::GraphQL::Client::Error; end
class GraphQL::Client::Error < ::StandardError; end

class GraphQL::Client::Errors
  include ::Enumerable

  def initialize(errors = T.unsafe(nil), path = T.unsafe(nil), all = T.unsafe(nil)); end

  def [](key); end
  def all; end
  def blank?; end
  def count; end
  def details; end
  def each; end
  def empty?; end
  def filter_by_path(field); end
  def has_key?(field); end
  def include?(field); end
  def inspect; end
  def key?(field); end
  def keys; end
  def messages; end
  def size; end
  def values; end

  class << self
    def normalize_error_paths(data = T.unsafe(nil), errors = T.unsafe(nil)); end
  end
end

class GraphQL::Client::FragmentDefinition < ::GraphQL::Client::Definition
  def new(obj, *args); end
end

class GraphQL::Client::HTTP
  def initialize(uri, &block); end

  def connection; end
  def execute(document:, operation_name: T.unsafe(nil), variables: T.unsafe(nil), context: T.unsafe(nil)); end
  def headers(_context); end
  def uri; end
end

class GraphQL::Client::HashWithIndifferentAccess
  include ::Enumerable
  extend ::Forwardable

  def initialize(hash = T.unsafe(nil)); end

  def [](key); end
  def each(*args, &block); end
  def each_key(&block); end
  def empty?(*args, &block); end
  def fetch(key, *args, &block); end
  def has_key?(key); end
  def include?(key); end
  def inspect(*args, &block); end
  def key?(key); end
  def keys(*args, &block); end
  def length(*args, &block); end
  def member?(key); end
  def size(*args, &block); end
  def to_h(*args, &block); end
  def to_hash(*args, &block); end
  def values(*args, &block); end

  private

  def convert_value(key); end
end

class GraphQL::Client::ImplicitlyFetchedFieldError < ::NoMethodError; end
GraphQL::Client::IntrospectionDocument = T.let(T.unsafe(nil), GraphQL::Language::Nodes::Document)
class GraphQL::Client::InvariantError < ::GraphQL::Client::Error; end

module GraphQL::Client::LazyName
  def _definition=(_arg0); end
  def name; end
end

class GraphQL::Client::List < ::Array
  def initialize(values, errors = T.unsafe(nil)); end

  def errors; end
end

class GraphQL::Client::NonCollocatedCallerError < ::GraphQL::Client::Error; end
class GraphQL::Client::NotImplementedError < ::GraphQL::Client::Error; end

class GraphQL::Client::OperationDefinition < ::GraphQL::Client::Definition
  def operation_name; end
end

module GraphQL::Client::QueryTypename
  class << self
    def insert_typename_fields(document, types: T.unsafe(nil)); end
    def node_flatten_selections(selections); end
  end
end

class GraphQL::Client::QueryTypename::InsertTypenameVisitor < ::GraphQL::Language::Visitor
  def initialize(document, types:); end

  def add_typename(node, parent); end
  def on_field(node, parent); end
  def on_fragment_definition(node, parent); end
  def on_operation_definition(node, parent); end
end

class GraphQL::Client::RenameNodeVisitor < ::GraphQL::Language::Visitor
  def initialize(document, definitions:); end

  def on_fragment_definition(node, _parent); end
  def on_fragment_spread(node, _parent); end
  def on_operation_definition(node, _parent); end

  private

  def rename_node(node); end
end

class GraphQL::Client::Response
  def initialize(hash, data: T.unsafe(nil), errors: T.unsafe(nil), extensions: T.unsafe(nil)); end

  def data; end
  def errors; end
  def extensions; end
  def original_hash; end
  def to_h; end
end

module GraphQL::Client::Schema
  class << self
    def class_for(schema, type, cache); end
    def generate(schema); end
  end
end

module GraphQL::Client::Schema::BaseType
  def cast(value, errors); end
  def schema_module; end
  def schema_module=(_arg0); end
  def to_list_type; end
  def to_non_null_type; end
  def type; end
end

module GraphQL::Client::Schema::ClassMethods
  def define_class(definition, ast_nodes, type); end
  def directives; end
  def get_class(type_name); end
  def set_class(type_name, klass); end

  private

  def normalize_type_name(type_name); end
end

GraphQL::Client::Schema::ClassMethods::DIRECTIVES = T.let(T.unsafe(nil), Hash)

class GraphQL::Client::Schema::EnumType < ::Module
  include ::GraphQL::Client::Schema::BaseType

  def initialize(type); end

  def [](value); end
  def cast(value, _errors = T.unsafe(nil)); end
  def define_class(definition, ast_nodes); end
end

class GraphQL::Client::Schema::EnumType::EnumValue < ::String
  def initialize(obj, enum_value, enum); end

  def method_missing(method_name, *args); end

  private

  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

class GraphQL::Client::Schema::IncludeDirective
  include ::GraphQL::Client::Schema::BaseType

  def initialize(of_klass); end

  def cast(value, errors); end
  def of_klass; end
end

class GraphQL::Client::Schema::InterfaceType < ::Module
  include ::GraphQL::Client::Schema::BaseType

  def initialize(type); end

  def define_class(definition, ast_nodes); end
  def new(types); end
end

class GraphQL::Client::Schema::ListType
  include ::GraphQL::Client::Schema::BaseType

  def initialize(of_klass); end

  def cast(values, errors); end
  def of_klass; end
  def to_list_type; end
end

class GraphQL::Client::Schema::NonNullType
  include ::GraphQL::Client::Schema::BaseType

  def initialize(of_klass); end

  def cast(value, errors); end
  def of_klass; end
  def to_non_null_type; end
end

class GraphQL::Client::Schema::ObjectClass
  def initialize(data = T.unsafe(nil), errors = T.unsafe(nil), definer = T.unsafe(nil)); end

  def _definer; end
  def _spreads; end
  def errors; end
  def inspect; end
  def method_missing(name, *args); end
  def source_definition; end
  def to_h; end

  private

  def has_attribute?(attr); end
  def read_attribute(attr, type); end
  def respond_to_missing?(name, priv); end
  def verify_collocated_path; end
end

module GraphQL::Client::Schema::ObjectType
  def cast(value, errors); end
  def define_class(definition, ast_nodes); end
  def define_field(name, type); end

  private

  def gather_selections(fields, definition, selected_ast_node); end

  class << self
    def new(type, fields = T.unsafe(nil)); end
  end
end

class GraphQL::Client::Schema::ObjectType::WithDefinition
  include ::GraphQL::Client::Schema::BaseType
  include ::GraphQL::Client::Schema::ObjectType

  def initialize(klass, defined_fields, definition, spreads); end

  def defined_fields; end
  def definition; end
  def fields; end
  def klass; end
  def new(data = T.unsafe(nil), errors = T.unsafe(nil)); end
  def spreads; end
  def type; end
end

GraphQL::Client::Schema::ObjectType::WithDefinition::EMPTY_SET = T.let(T.unsafe(nil), Set)

class GraphQL::Client::Schema::PossibleTypes
  include ::GraphQL::Client::Schema::BaseType

  def initialize(type, types); end

  def cast(value, errors); end
  def possible_types; end
end

class GraphQL::Client::Schema::ScalarType
  include ::GraphQL::Client::Schema::BaseType

  def initialize(type); end

  def cast(value, _errors = T.unsafe(nil)); end
  def define_class(definition, ast_nodes); end
end

class GraphQL::Client::Schema::SkipDirective
  include ::GraphQL::Client::Schema::BaseType

  def initialize(of_klass); end

  def cast(value, errors); end
  def of_klass; end
end

class GraphQL::Client::Schema::UnionType < ::Module
  include ::GraphQL::Client::Schema::BaseType

  def initialize(type); end

  def define_class(definition, ast_nodes); end
  def new(types); end
end

class GraphQL::Client::UnfetchedFieldError < ::NoMethodError; end
class GraphQL::Client::UnimplementedFieldError < ::NoMethodError; end
class GraphQL::Client::ValidationError < ::GraphQL::Client::Error; end
GraphQL::Client::WHITELISTED_GEM_NAMES = T.let(T.unsafe(nil), Array)
GraphQL::VERSION = T.let(T.unsafe(nil), String)
