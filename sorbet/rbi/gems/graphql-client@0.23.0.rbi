# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `graphql-client` gem.
# Please instead update this file by running `bin/tapioca gem graphql-client`.


# source://graphql-client//lib/graphql/client/type_stack.rb#2
module GraphQL
  class << self
    # source://graphql/2.3.10/lib/graphql.rb#27
    def default_parser; end

    # source://graphql/2.3.10/lib/graphql.rb#31
    def default_parser=(_arg0); end

    # source://graphql/2.3.10/lib/graphql.rb#37
    def parse(graphql_string, trace: T.unsafe(nil), filename: T.unsafe(nil), max_tokens: T.unsafe(nil)); end

    # source://graphql/2.3.10/lib/graphql.rb#44
    def parse_file(filename); end

    # source://graphql/2.3.10/lib/graphql.rb#54
    def parse_with_racc(string, filename: T.unsafe(nil), trace: T.unsafe(nil)); end

    # source://graphql/2.3.10/lib/graphql.rb#72
    def reject_numbers_followed_by_names; end

    # source://graphql/2.3.10/lib/graphql.rb#72
    def reject_numbers_followed_by_names=(_arg0); end

    # source://graphql/2.3.10/lib/graphql.rb#50
    def scan(graphql_string); end

    # source://graphql/2.3.10/lib/graphql.rb#59
    def scan_with_ruby(graphql_string); end
  end
end

# GraphQL Client helps build and execute queries against a GraphQL backend.
#
# A client instance SHOULD be configured with a schema to enable query
# validation. And SHOULD also be configured with a backend "execute" adapter
# to point at a remote GraphQL HTTP service or execute directly against a
# Schema object.
#
# source://graphql-client//lib/graphql/client/type_stack.rb#3
class GraphQL::Client
  extend ::GraphQL::Client::CollocatedEnforcement

  # @return [Client] a new instance of Client
  #
  # source://graphql-client//lib/graphql/client.rb#94
  def initialize(schema:, execute: T.unsafe(nil), enforce_collocated_callers: T.unsafe(nil), raise_on_unknown_enum_value: T.unsafe(nil)); end

  # Deprecated: Allow dynamically generated queries to be passed to
  # Client#query.
  #
  # This ability will eventually be removed in future versions.
  #
  # source://graphql-client//lib/graphql/client.rb#46
  def allow_dynamic_queries; end

  # Deprecated: Allow dynamically generated queries to be passed to
  # Client#query.
  #
  # This ability will eventually be removed in future versions.
  #
  # source://graphql-client//lib/graphql/client.rb#46
  def allow_dynamic_queries=(_arg0); end

  # Public: Create operation definition from a fragment definition.
  #
  # Automatically determines operation variable set.
  #
  # Examples
  #
  #   FooFragment = Client.parse <<-'GRAPHQL'
  #     fragment on Mutation {
  #       updateFoo(id: $id, content: $content)
  #     }
  #   GRAPHQL
  #
  #   # mutation($id: ID!, $content: String!) {
  #   #   updateFoo(id: $id, content: $content)
  #   # }
  #   FooMutation = Client.create_operation(FooFragment)
  #
  # fragment - A FragmentDefinition definition.
  #
  # Returns an OperationDefinition.
  #
  # source://graphql-client//lib/graphql/client.rb#299
  def create_operation(fragment, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

  # Returns the value of attribute document.
  #
  # source://graphql-client//lib/graphql/client.rb#336
  def document; end

  # Returns the value of attribute document_tracking_enabled.
  #
  # source://graphql-client//lib/graphql/client.rb#37
  def document_tracking_enabled; end

  # Sets the attribute document_tracking_enabled
  #
  # @param value the value to set the attribute document_tracking_enabled to.
  #
  # source://graphql-client//lib/graphql/client.rb#37
  def document_tracking_enabled=(_arg0); end

  # Public: Check if collocated caller enforcement is enabled.
  #
  # source://graphql-client//lib/graphql/client.rb#40
  def enforce_collocated_callers; end

  # Returns the value of attribute execute.
  #
  # source://graphql-client//lib/graphql/client.rb#33
  def execute; end

  # Public: A wrapper to use the more-efficient `.get_type` when it's available from GraphQL-Ruby (1.10+)
  #
  # source://graphql-client//lib/graphql/client.rb#275
  def get_type(type_name); end

  # source://graphql-client//lib/graphql/client.rb#131
  def parse(str, filename = T.unsafe(nil), lineno = T.unsafe(nil)); end

  # A cache of the schema's merged possible types
  #
  # @param type_condition [Class, String] a type definition or type name
  #
  # source://graphql-client//lib/graphql/client.rb#114
  def possible_types(type_condition = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://graphql-client//lib/graphql/client.rb#338
  def query(definition, variables: T.unsafe(nil), context: T.unsafe(nil)); end

  # Returns the value of attribute schema.
  #
  # source://graphql-client//lib/graphql/client.rb#33
  def schema; end

  # Returns the value of attribute types.
  #
  # source://graphql-client//lib/graphql/client.rb#35
  def types; end

  private

  # source://graphql-client//lib/graphql/client.rb#455
  def deep_freeze_json_object(obj); end

  # source://graphql-client//lib/graphql/client.rb#468
  def deep_stringify_keys(obj); end

  # source://graphql-client//lib/graphql/client.rb#447
  def find_definition_dependencies(node); end

  # source://graphql-client//lib/graphql/client.rb#404
  def sliced_definitions(document_dependencies, doc, source_location:); end

  class << self
    # source://graphql-client//lib/graphql/client.rb#73
    def dump_schema(schema, io = T.unsafe(nil), context: T.unsafe(nil)); end

    # source://graphql-client//lib/graphql/client.rb#48
    def load_schema(schema); end
  end
end

# Enforcements collocated object access best practices.
#
# source://graphql-client//lib/graphql/client/collocated_enforcement.rb#14
module GraphQL::Client::CollocatedEnforcement
  extend ::GraphQL::Client::CollocatedEnforcement

  # Public: Ignore collocated caller enforcement for the scope of the block.
  #
  # source://graphql-client//lib/graphql/client/collocated_enforcement.rb#18
  def allow_noncollocated_callers; end

  # Internal: Decorate method with collocated caller enforcement.
  #
  # mod - Target Module/Class
  # methods - Array of Symbol method names
  # path - String filename to assert calling from
  #
  # Returns nothing.
  #
  # source://graphql-client//lib/graphql/client/collocated_enforcement.rb#49
  def enforce_collocated_callers(mod, methods, path); end

  # source://graphql-client//lib/graphql/client/collocated_enforcement.rb#25
  def verify_collocated_path(location, path, method = T.unsafe(nil)); end
end

# Definitions are constructed by Client.parse and wrap a parsed AST of the
# query string as well as hold references to any external query definition
# dependencies.
#
# Definitions MUST be assigned to a constant.
#
# source://graphql-client//lib/graphql/client/definition.rb#16
class GraphQL::Client::Definition < ::Module
  # @return [Definition] a new instance of Definition
  #
  # source://graphql-client//lib/graphql/client/definition.rb#28
  def initialize(client:, document:, source_document:, ast_node:, source_location:); end

  # Internal: Get associated owner GraphQL::Client instance.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#60
  def client; end

  # Public: Global name of definition in client document.
  #
  # Returns a GraphQL safe name of the Ruby constant String.
  #
  #   "Users::UserQuery" #=> "Users__UserQuery"
  #
  # Returns String.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#86
  def definition_name; end

  # Internal: Get underlying operation or fragment definition AST node for
  # definition.
  #
  # Returns OperationDefinition or FragmentDefinition object.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#71
  def definition_node; end

  # Public: Get document with only the definitions needed to perform this
  # operation.
  #
  # Returns GraphQL::Language::Nodes::Document with one OperationDefinition
  # and any FragmentDefinition dependencies.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#101
  def document; end

  # Internal: Nodes AST indexes.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#148
  def indexes; end

  # source://graphql-client//lib/graphql/client/definition.rb#109
  def new(obj, errors = T.unsafe(nil)); end

  # Internal root schema class for definition. Returns
  # GraphQL::Client::Schema::ObjectType or
  # GraphQL::Client::Schema::PossibleTypes.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#65
  def schema_class; end

  # Internal: Get original document that created this definition, without
  # any additional dependencies.
  #
  # Returns GraphQL::Language::Nodes::Document.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#77
  def source_document; end

  # Public: Returns the Ruby source filename and line number containing this
  # definition was not defined in Ruby.
  #
  # Returns Array pair of [String, Fixnum].
  #
  # source://graphql-client//lib/graphql/client/definition.rb#107
  def source_location; end

  private

  # source://graphql-client//lib/graphql/client/definition.rb#222
  def cast_object(obj); end

  class << self
    # source://graphql-client//lib/graphql/client/definition.rb#17
    def for(ast_node:, **kargs); end
  end
end

# source://graphql-client//lib/graphql/client/definition.rb#156
class GraphQL::Client::Definition::DefinitionVisitor < ::GraphQL::Language::Visitor
  # @return [DefinitionVisitor] a new instance of DefinitionVisitor
  #
  # source://graphql-client//lib/graphql/client/definition.rb#159
  def initialize(doc); end

  # Returns the value of attribute definitions.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#157
  def definitions; end

  # source://graphql-client//lib/graphql/client/definition.rb#166
  def on_field(node, parent); end

  # source://graphql-client//lib/graphql/client/definition.rb#172
  def on_fragment_definition(node, parent); end

  # source://graphql-client//lib/graphql/client/definition.rb#190
  def on_inline_fragment(node, parent); end

  # source://graphql-client//lib/graphql/client/definition.rb#181
  def on_operation_definition(node, parent); end

  # Returns the value of attribute spreads.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#157
  def spreads; end

  private

  # source://graphql-client//lib/graphql/client/definition.rb#204
  def flatten_spreads(node); end

  # source://graphql-client//lib/graphql/client/definition.rb#199
  def get_spreads(node); end
end

# source://graphql-client//lib/graphql/client/definition.rb#197
GraphQL::Client::Definition::DefinitionVisitor::EMPTY_SET = T.let(T.unsafe(nil), Set)

# Internal: Detect variables used in a definition.
#
# source://graphql-client//lib/graphql/client/definition_variables.rb#7
module GraphQL::Client::DefinitionVariables
  class << self
    # Internal: Detect all variables used in a given operation or fragment
    # definition.
    #
    # schema - A GraphQL::Schema
    # document - A GraphQL::Language::Nodes::Document to scan
    # definition_name - A String definition name. Defaults to anonymous definition.
    #
    # Returns a Hash[Symbol] to VariableDefinition objects.
    #
    # source://graphql-client//lib/graphql/client/definition_variables.rb#64
    def operation_variables(schema, document, definition_name = T.unsafe(nil)); end

    # Internal: Get AST node for GraphQL type.
    #
    # type - A GraphQL::Type
    #
    # Returns GraphQL::Language::Nodes::Type.
    #
    # source://graphql-client//lib/graphql/client/definition_variables.rb#75
    def variable_node(type); end

    # Internal: Detect all variables used in a given operation or fragment
    # definition.
    #
    # schema - A GraphQL::Schema
    # document - A GraphQL::Language::Nodes::Document to scan
    # definition_name - A String definition name. Defaults to anonymous definition.
    #
    # Returns a Hash[Symbol] to GraphQL::Type objects.
    #
    # source://graphql-client//lib/graphql/client/definition_variables.rb#16
    def variables(schema, document, definition_name = T.unsafe(nil)); end
  end
end

# source://graphql-client//lib/graphql/client/definition_variables.rb#32
class GraphQL::Client::DefinitionVariables::VariablesVisitor < ::GraphQL::Language::Visitor
  include ::GraphQL::Client::TypeStack

  # @return [VariablesVisitor] a new instance of VariablesVisitor
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#30
  def initialize(document, schema:, **rest); end

  # source://graphql-client//lib/graphql/client/definition_variables.rb#42
  def on_variable_identifier(node, parent); end

  # Returns the value of attribute variables.
  #
  # source://graphql-client//lib/graphql/client/definition_variables.rb#40
  def variables; end
end

# Internal: Use schema to detect definition and field types.
#
# source://graphql-client//lib/graphql/client/document_types.rb#8
module GraphQL::Client::DocumentTypes
  class << self
    # Internal: Detect all types used in a given document
    #
    # schema - A GraphQL::Schema
    # document - A GraphQL::Language::Nodes::Document to scan
    #
    # Returns a Hash[Language::Nodes::Node] to GraphQL::Type objects.
    #
    # source://graphql-client//lib/graphql/client/document_types.rb#45
    def analyze_types(schema, document); end
  end
end

# source://graphql-client//lib/graphql/client/document_types.rb#9
class GraphQL::Client::DocumentTypes::AnalyzeTypesVisitor < ::GraphQL::Language::Visitor
  include ::GraphQL::Client::TypeStack

  # @return [AnalyzeTypesVisitor] a new instance of AnalyzeTypesVisitor
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#30
  def initialize(document, schema:, **rest); end

  # Returns the value of attribute fields.
  #
  # source://graphql-client//lib/graphql/client/document_types.rb#11
  def fields; end

  # source://graphql-client//lib/graphql/client/type_stack.rb#48
  def on_field(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#119
  def on_fragment_definition(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#102
  def on_inline_fragment(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#91
  def on_operation_definition(node, parent); end
end

# source://graphql-client//lib/graphql/client.rb#27
class GraphQL::Client::DynamicQueryError < ::GraphQL::Client::Error; end

# Public: Abstract base class for all errors raised by GraphQL::Client.
#
# source://graphql-client//lib/graphql/client/error.rb#5
class GraphQL::Client::Error < ::StandardError; end

# Public: Collection of errors associated with GraphQL object type.
#
# Inspired by ActiveModel::Errors.
#
# source://graphql-client//lib/graphql/client/errors.rb#9
class GraphQL::Client::Errors
  include ::Enumerable

  # Internal: Initialize from collection of errors.
  #
  # errors - Array of GraphQL Hash error objects
  # path   - Array of String|Integer fields to data
  # all    - Boolean flag if all nested errors should be available
  #
  # @return [Errors] a new instance of Errors
  #
  # source://graphql-client//lib/graphql/client/errors.rb#39
  def initialize(errors = T.unsafe(nil), path = T.unsafe(nil), all = T.unsafe(nil)); end

  # Public: When passed a symbol or a name of a field, returns an array of
  # errors for the method.
  #
  #   data.errors[:node]  # => ["couldn't find node by id"]
  #   data.errors['node'] # => ["couldn't find node by id"]
  #
  # Returns Array of errors.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#122
  def [](key); end

  # Public: Return collection of all nested errors.
  #
  #   data.errors[:node]
  #   data.errors.all[:node]
  #
  # Returns Errors collection.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#51
  def all; end

  # Public: Check if there are no errors on object.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id"]}
  #   data.errors.empty?   # => false
  #
  # Returns true if no errors are found, otherwise false.
  #
  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/errors.rb#168
  def blank?; end

  # Public: Count the number of errors on object.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id", "unauthorized"]}
  #   data.errors.size     # => 2
  #
  # Returns the number of error messages.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#157
  def count; end

  # Public: Access Hash of error objects.
  #
  #   data.errors.details["node"]
  #   data.errors.details[:node]
  #
  # Returns HashWithIndifferentAccess.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#95
  def details; end

  # Public: Iterates through each error key, value pair in the error
  # messages hash. Yields the field and the error for that attribute. If the
  # field has more than one error message, yields once for each error
  # message.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#130
  def each; end

  # Public: Check if there are no errors on object.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id"]}
  #   data.errors.empty?   # => false
  #
  # Returns true if no errors are found, otherwise false.
  #
  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/errors.rb#168
  def empty?; end

  # Internal: Return collection of errors for a given subfield.
  #
  #   data.errors.filter_by_path("node")
  #
  # Returns Errors collection.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#64
  def filter_by_path(field); end

  # Public: Check if there are any errors on a given field.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id", "unauthorized"]}
  #   data.errors.include?("node")    # => true
  #   data.errors.include?("version") # => false
  #
  # Returns true if the error messages include an error for the given field,
  # otherwise false.
  #
  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/errors.rb#145
  def has_key?(field); end

  # Public: Check if there are any errors on a given field.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id", "unauthorized"]}
  #   data.errors.include?("node")    # => true
  #   data.errors.include?("version") # => false
  #
  # Returns true if the error messages include an error for the given field,
  # otherwise false.
  #
  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/errors.rb#145
  def include?(field); end

  # Public: Display console friendly representation of errors collection.
  #
  # Returns String.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#196
  def inspect; end

  # Public: Check if there are any errors on a given field.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id", "unauthorized"]}
  #   data.errors.include?("node")    # => true
  #   data.errors.include?("version") # => false
  #
  # Returns true if the error messages include an error for the given field,
  # otherwise false.
  #
  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/errors.rb#145
  def key?(field); end

  # Public: Returns all message keys.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id"]}
  #   data.errors.values   # => ["node"]
  #
  # Returns Array of String field names.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#179
  def keys; end

  # Public: Access Hash of error messages.
  #
  #   data.errors.messages["node"]
  #   data.errors.messages[:node]
  #
  # Returns HashWithIndifferentAccess.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#74
  def messages; end

  # Public: Count the number of errors on object.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id", "unauthorized"]}
  #   data.errors.size     # => 2
  #
  # Returns the number of error messages.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#157
  def size; end

  # Public: Returns all message values.
  #
  #   data.errors.messages # => {"node"=>["couldn't find node by id"]}
  #   data.errors.values   # => [["couldn't find node by id"]]
  #
  # Returns Array of Array String messages.
  #
  # source://graphql-client//lib/graphql/client/errors.rb#189
  def values; end

  class << self
    # Internal: Normalize GraphQL Error "path" ensuring the path exists.
    #
    # Records "normalizedPath" value to error object.
    #
    # data - Hash of response data
    # errors - Array of error Hashes
    #
    # Returns nothing.
    #
    # source://graphql-client//lib/graphql/client/errors.rb#20
    def normalize_error_paths(data = T.unsafe(nil), errors = T.unsafe(nil)); end
  end
end

# Specific fragment definition subtype.
#
# source://graphql-client//lib/graphql/client/fragment_definition.rb#8
class GraphQL::Client::FragmentDefinition < ::GraphQL::Client::Definition
  # source://graphql-client//lib/graphql/client/fragment_definition.rb#9
  def new(obj, *args); end
end

# source://graphql-client//lib/graphql/client.rb#433
class GraphQL::Client::GatherNamesVisitor < ::GraphQL::Language::Visitor
  # @return [GatherNamesVisitor] a new instance of GatherNamesVisitor
  #
  # source://graphql-client//lib/graphql/client.rb#434
  def initialize(node); end

  # Returns the value of attribute names.
  #
  # source://graphql-client//lib/graphql/client.rb#439
  def names; end

  # source://graphql-client//lib/graphql/client.rb#441
  def on_fragment_spread(node, parent); end
end

# Public: Basic HTTP network adapter.
#
#   GraphQL::Client.new(
#     execute: GraphQL::Client::HTTP.new("http://graphql-swapi.parseapp.com/")
#   )
#
# Assumes GraphQL endpoint follows the express-graphql endpoint conventions.
#   https://github.com/graphql/express-graphql#http-usage
#
# Production applications should consider implementing there own network
# adapter. This class exists for trivial stock usage and allows for minimal
# request header configuration.
#
# source://graphql-client//lib/graphql/client/http.rb#20
class GraphQL::Client::HTTP
  # Public: Create HTTP adapter instance for a single GraphQL endpoint.
  #
  #   GraphQL::Client::HTTP.new("http://graphql-swapi.parseapp.com/") do
  #     def headers(context)
  #       { "User-Agent": "My Client" }
  #     end
  #   end
  #
  # uri - String endpoint URI
  # block - Optional block to configure class
  #
  # @return [HTTP] a new instance of HTTP
  #
  # source://graphql-client//lib/graphql/client/http.rb#31
  def initialize(uri, &block); end

  # Public: Extension point for subclasses to customize the Net:HTTP client
  #
  # Returns a Net::HTTP object
  #
  # source://graphql-client//lib/graphql/client/http.rb#85
  def connection; end

  # Public: Make an HTTP request for GraphQL query.
  #
  # Implements Client's "execute" adapter interface.
  #
  # document - The Query GraphQL::Language::Nodes::Document
  # operation_name - The String operation definition name
  # variables - Hash of query variables
  # context - An arbitrary Hash of values which you can access
  #
  # Returns { "data" => ... , "errors" => ... } Hash.
  #
  # source://graphql-client//lib/graphql/client/http.rb#58
  def execute(document:, operation_name: T.unsafe(nil), variables: T.unsafe(nil), context: T.unsafe(nil)); end

  # Public: Extension point for subclasses to set custom request headers.
  #
  # Returns Hash of String header names and values.
  #
  # source://graphql-client//lib/graphql/client/http.rb#44
  def headers(_context); end

  # Public: Parsed endpoint URI
  #
  # Returns URI.
  #
  # source://graphql-client//lib/graphql/client/http.rb#39
  def uri; end
end

# Public: Implements a read only hash where keys can be accessed by
# strings, symbols, snake or camel case.
#
# Also see ActiveSupport::HashWithIndifferentAccess.
#
# source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#11
class GraphQL::Client::HashWithIndifferentAccess
  include ::Enumerable
  extend ::Forwardable

  # @return [HashWithIndifferentAccess] a new instance of HashWithIndifferentAccess
  #
  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#15
  def initialize(hash = T.unsafe(nil)); end

  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#31
  def [](key); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#46
  def each_key(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#35
  def fetch(key, *args, &block); end

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#39
  def has_key?(key); end

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#39
  def include?(key); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def inspect(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#39
  def key?(key); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def keys(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#39
  def member?(key); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_h(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_hash(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def values(*args, **_arg1, &block); end

  private

  # source://graphql-client//lib/graphql/client/hash_with_indifferent_access.rb#52
  def convert_value(key); end
end

# source://graphql-client//lib/graphql/client/error.rb#11
class GraphQL::Client::ImplicitlyFetchedFieldError < ::NoMethodError; end

# source://graphql-client//lib/graphql/client.rb#71
GraphQL::Client::IntrospectionDocument = T.let(T.unsafe(nil), GraphQL::Language::Nodes::Document)

# source://graphql-client//lib/graphql/client/error.rb#8
class GraphQL::Client::InvariantError < ::GraphQL::Client::Error; end

# Internal: FragmentSpread and FragmentDefinition extension to allow its
# name to point to a lazily defined Proc instead of a static string.
#
# source://graphql-client//lib/graphql/client.rb#394
module GraphQL::Client::LazyName
  # Sets the attribute _definition
  #
  # @param value the value to set the attribute _definition to.
  #
  # source://graphql-client//lib/graphql/client.rb#399
  def _definition=(_arg0); end

  # source://graphql-client//lib/graphql/client.rb#395
  def name; end
end

# Public: Array wrapper for value returned from GraphQL List.
#
# source://graphql-client//lib/graphql/client/list.rb#7
class GraphQL::Client::List < ::Array
  # @return [List] a new instance of List
  #
  # source://graphql-client//lib/graphql/client/list.rb#8
  def initialize(values, errors = T.unsafe(nil)); end

  # Public: Return errors associated with list of data.
  #
  # Returns Errors collection.
  #
  # source://graphql-client//lib/graphql/client/list.rb#17
  def errors; end
end

# Raised when method is called from outside the expected file scope.
#
# source://graphql-client//lib/graphql/client/collocated_enforcement.rb#11
class GraphQL::Client::NonCollocatedCallerError < ::GraphQL::Client::Error; end

# source://graphql-client//lib/graphql/client.rb#28
class GraphQL::Client::NotImplementedError < ::GraphQL::Client::Error; end

# Specific operation definition subtype for queries, mutations or
# subscriptions.
#
# source://graphql-client//lib/graphql/client/operation_definition.rb#9
class GraphQL::Client::OperationDefinition < ::GraphQL::Client::Definition
  # Public: Alias for definition name.
  #
  # source://graphql-client//lib/graphql/client/definition.rb#86
  def operation_name; end
end

# Internal: Insert __typename field selections into query.
#
# source://graphql-client//lib/graphql/client/query_typename.rb#8
module GraphQL::Client::QueryTypename
  class << self
    # source://graphql-client//lib/graphql/client/query_typename.rb#60
    def insert_typename_fields(document, types: T.unsafe(nil)); end

    # source://graphql-client//lib/graphql/client/query_typename.rb#96
    def node_flatten_selections(selections); end
  end
end

# GraphQL 1.9 introduces a new visitor class
# and doesn't expose writer methods for node attributes.
# So, use the node mutation API instead.
#
# source://graphql-client//lib/graphql/client/query_typename.rb#21
class GraphQL::Client::QueryTypename::InsertTypenameVisitor < ::GraphQL::Language::Visitor
  # @return [InsertTypenameVisitor] a new instance of InsertTypenameVisitor
  #
  # source://graphql-client//lib/graphql/client/query_typename.rb#22
  def initialize(document, types:); end

  # source://graphql-client//lib/graphql/client/query_typename.rb#27
  def add_typename(node, parent); end

  # source://graphql-client//lib/graphql/client/query_typename.rb#51
  def on_field(node, parent); end

  # source://graphql-client//lib/graphql/client/query_typename.rb#55
  def on_fragment_definition(node, parent); end

  # source://graphql-client//lib/graphql/client/query_typename.rb#47
  def on_operation_definition(node, parent); end
end

# source://graphql-client//lib/graphql/client.rb#242
class GraphQL::Client::RenameNodeVisitor < ::GraphQL::Language::Visitor
  # @return [RenameNodeVisitor] a new instance of RenameNodeVisitor
  #
  # source://graphql-client//lib/graphql/client.rb#243
  def initialize(document, definitions:); end

  # source://graphql-client//lib/graphql/client.rb#248
  def on_fragment_definition(node, _parent); end

  # source://graphql-client//lib/graphql/client.rb#258
  def on_fragment_spread(node, _parent); end

  # source://graphql-client//lib/graphql/client.rb#253
  def on_operation_definition(node, _parent); end

  private

  # source://graphql-client//lib/graphql/client.rb#265
  def rename_node(node); end
end

# Public: Abstract base class for GraphQL responses.
#
#   https://facebook.github.io/graphql/#sec-Response-Format
#
# source://graphql-client//lib/graphql/client/response.rb#9
class GraphQL::Client::Response
  # Internal: Initialize base class.
  #
  # @return [Response] a new instance of Response
  #
  # source://graphql-client//lib/graphql/client/response.rb#35
  def initialize(hash, data: T.unsafe(nil), errors: T.unsafe(nil), extensions: T.unsafe(nil)); end

  # Public: Wrapped ObjectType of data returned from the server.
  #
  #   https://facebook.github.io/graphql/#sec-Data
  #
  # Returns instance of ObjectType subclass.
  #
  # source://graphql-client//lib/graphql/client/response.rb#22
  def data; end

  # Public: Get partial failures from response.
  #
  #   https://facebook.github.io/graphql/#sec-Errors
  #
  # Returns Errors collection object with zero or more errors.
  #
  # source://graphql-client//lib/graphql/client/response.rb#29
  def errors; end

  # Public: Hash of server specific extension metadata.
  #
  # source://graphql-client//lib/graphql/client/response.rb#32
  def extensions; end

  # Public: Original JSON response hash returned from server.
  #
  # Returns Hash.
  #
  # source://graphql-client//lib/graphql/client/response.rb#13
  def original_hash; end

  # Public: Original JSON response hash returned from server.
  #
  # Returns Hash.
  #
  # source://graphql-client//lib/graphql/client/response.rb#13
  def to_h; end

  # Public: Original JSON response hash returned from server.
  #
  # Returns Hash.
  #
  # source://graphql-client//lib/graphql/client/response.rb#13
  def to_hash; end
end

# source://graphql-client//lib/graphql/client/schema/base_type.rb#5
module GraphQL::Client::Schema
  class << self
    # source://graphql-client//lib/graphql/client/schema.rb#86
    def class_for(schema, type, cache); end

    # source://graphql-client//lib/graphql/client/schema.rb#69
    def generate(schema, raise_on_unknown_enum_value: T.unsafe(nil)); end
  end
end

# source://graphql-client//lib/graphql/client/schema/base_type.rb#6
module GraphQL::Client::Schema::BaseType
  # Internal: Cast JSON value to wrapped value.
  #
  # value - JSON value
  # errors - Errors instance
  #
  # Returns BaseType instance.
  #
  # @raise [NotImplementedError]
  #
  # source://graphql-client//lib/graphql/client/schema/base_type.rb#19
  def cast(value, errors); end

  # Internal: Get owner schema Module container.
  #
  # source://graphql-client//lib/graphql/client/schema/base_type.rb#11
  def schema_module; end

  # Internal: Get owner schema Module container.
  #
  # source://graphql-client//lib/graphql/client/schema/base_type.rb#11
  def schema_module=(_arg0); end

  # Internal: Get list wrapper of this type class.
  #
  # Returns ListType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/base_type.rb#33
  def to_list_type; end

  # Internal: Get non-nullable wrapper of this type class.
  #
  # Returns NonNullType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/base_type.rb#26
  def to_non_null_type; end

  # Public: Get associated GraphQL::BaseType with for this class.
  #
  # source://graphql-client//lib/graphql/client/schema/base_type.rb#8
  def type; end
end

# source://graphql-client//lib/graphql/client/schema.rb#17
module GraphQL::Client::Schema::ClassMethods
  # source://graphql-client//lib/graphql/client/schema.rb#18
  def define_class(definition, ast_nodes, type); end

  # source://graphql-client//lib/graphql/client/schema.rb#58
  def directives; end

  # source://graphql-client//lib/graphql/client/schema.rb#39
  def get_class(type_name); end

  # source://graphql-client//lib/graphql/client/schema.rb#43
  def set_class(type_name, klass); end

  private

  # source://graphql-client//lib/graphql/client/schema.rb#64
  def normalize_type_name(type_name); end
end

# source://graphql-client//lib/graphql/client/schema.rb#55
GraphQL::Client::Schema::ClassMethods::DIRECTIVES = T.let(T.unsafe(nil), Hash)

# source://graphql-client//lib/graphql/client/schema/enum_type.rb#9
class GraphQL::Client::Schema::EnumType < ::Module
  include ::GraphQL::Client::Schema::BaseType

  # Internal: Construct enum wrapper from another GraphQL::EnumType.
  #
  # type - GraphQL::EnumType instance
  #
  # @return [EnumType] a new instance of EnumType
  #
  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#53
  def initialize(type); end

  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#77
  def [](value); end

  # Internal: Cast JSON value to the enumeration's corresponding constant string instance
  #  with the convenience predicate methods.
  #
  # values - JSON value
  # errors - Errors instance
  #
  # Returns String or nil.
  #
  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#88
  def cast(value, _errors = T.unsafe(nil)); end

  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#73
  def define_class(definition, ast_nodes); end
end

# source://graphql-client//lib/graphql/client/schema/enum_type.rb#12
class GraphQL::Client::Schema::EnumType::EnumValue < ::String
  # @return [EnumValue] a new instance of EnumValue
  #
  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#13
  def initialize(obj, enum_value, enum); end

  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#31
  def method_missing(method_name, *args); end

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#19
  def unknown_enum_value?; end

  private

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#23
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://graphql-client//lib/graphql/client/schema/enum_type.rb#44
class GraphQL::Client::Schema::EnumType::UnexpectedEnumValue < ::String
  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/schema/enum_type.rb#45
  def unknown_enum_value?; end
end

# source://graphql-client//lib/graphql/client/schema/include_directive.rb#8
class GraphQL::Client::Schema::IncludeDirective
  include ::GraphQL::Client::Schema::BaseType

  # Internal: Construct list wrapper from other BaseType.
  #
  # of_klass - BaseType instance
  #
  # @return [IncludeDirective] a new instance of IncludeDirective
  #
  # source://graphql-client//lib/graphql/client/schema/include_directive.rb#14
  def initialize(of_klass); end

  # Internal: Cast JSON value to wrapped value.
  #
  # values - JSON value
  # errors - Errors instance
  #
  # Returns List instance or nil.
  #
  # source://graphql-client//lib/graphql/client/schema/include_directive.rb#33
  def cast(value, errors); end

  # Internal: Get wrapped klass.
  #
  # Returns BaseType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/include_directive.rb#25
  def of_klass; end
end

# source://graphql-client//lib/graphql/client/schema/interface_type.rb#8
class GraphQL::Client::Schema::InterfaceType < ::Module
  include ::GraphQL::Client::Schema::BaseType

  # @return [InterfaceType] a new instance of InterfaceType
  #
  # source://graphql-client//lib/graphql/client/schema/interface_type.rb#11
  def initialize(type); end

  # source://graphql-client//lib/graphql/client/schema/interface_type.rb#23
  def define_class(definition, ast_nodes); end

  # source://graphql-client//lib/graphql/client/schema/interface_type.rb#19
  def new(types); end
end

# source://graphql-client//lib/graphql/client/schema/list_type.rb#10
class GraphQL::Client::Schema::ListType
  include ::GraphQL::Client::Schema::BaseType

  # Internal: Construct list wrapper from other BaseType.
  #
  # of_klass - BaseType instance
  #
  # @return [ListType] a new instance of ListType
  #
  # source://graphql-client//lib/graphql/client/schema/list_type.rb#16
  def initialize(of_klass); end

  # Internal: Cast JSON value to wrapped value.
  #
  # values - JSON value
  # errors - Errors instance
  #
  # Returns List instance or nil.
  #
  # source://graphql-client//lib/graphql/client/schema/list_type.rb#35
  def cast(values, errors); end

  # Internal: Get wrapped klass.
  #
  # Returns BaseType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/list_type.rb#27
  def of_klass; end

  # Internal: Get list wrapper of this type class.
  #
  # Returns ListType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/list_type.rb#51
  def to_list_type; end
end

# source://graphql-client//lib/graphql/client/schema/non_null_type.rb#9
class GraphQL::Client::Schema::NonNullType
  include ::GraphQL::Client::Schema::BaseType

  # Internal: Construct non-nullable wrapper from other BaseType.
  #
  # of_klass - BaseType instance
  #
  # @return [NonNullType] a new instance of NonNullType
  #
  # source://graphql-client//lib/graphql/client/schema/non_null_type.rb#15
  def initialize(of_klass); end

  # Internal: Cast JSON value to wrapped value.
  #
  # value - JSON value
  # errors - Errors instance
  #
  # Returns BaseType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/non_null_type.rb#34
  def cast(value, errors); end

  # Internal: Get wrapped klass.
  #
  # Returns BaseType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/non_null_type.rb#26
  def of_klass; end

  # Internal: Get non-nullable wrapper of this type class.
  #
  # Returns NonNullType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/non_null_type.rb#46
  def to_non_null_type; end
end

# source://graphql-client//lib/graphql/client/schema/object_type.rb#175
class GraphQL::Client::Schema::ObjectClass
  # @return [ObjectClass] a new instance of ObjectClass
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#176
  def initialize(data = T.unsafe(nil), errors = T.unsafe(nil), definer = T.unsafe(nil)); end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#196
  def _definer; end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#200
  def _spreads; end

  # Public: Return errors associated with data.
  #
  # It's possible to define "errors" as a field. Ideally this shouldn't
  # happen, but if it does we should prefer the field rather than the
  # builtin error type.
  #
  # Returns Errors collection.
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#223
  def errors; end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#270
  def inspect; end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#231
  def method_missing(name, *args); end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#204
  def source_definition; end

  # Public: Returns the raw response data
  #
  # Returns Hash
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#191
  def to_h; end

  # Public: Returns the raw response data
  #
  # Returns Hash
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#191
  def to_hash; end

  private

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#306
  def has_attribute?(attr); end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#300
  def read_attribute(attr, type); end

  # @return [Boolean]
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#208
  def respond_to_missing?(name, priv); end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#292
  def verify_collocated_path; end
end

# source://graphql-client//lib/graphql/client/schema/object_type.rb#10
module GraphQL::Client::Schema::ObjectType
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#115
  def cast(value, errors); end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#68
  def define_class(definition, ast_nodes); end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#100
  def define_field(name, type); end

  private

  # Given an AST selection on this object, gather it into `fields` if it applies.
  # If it's a fragment, continue recursively checking the selections on the fragment.
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#130
  def gather_selections(fields, definition, selected_ast_node); end

  class << self
    # source://graphql-client//lib/graphql/client/schema/object_type.rb#11
    def new(type, fields = T.unsafe(nil)); end
  end
end

# source://graphql-client//lib/graphql/client/schema/object_type.rb#24
class GraphQL::Client::Schema::ObjectType::WithDefinition
  include ::GraphQL::Client::Schema::BaseType
  include ::GraphQL::Client::Schema::ObjectType

  # @return [WithDefinition] a new instance of WithDefinition
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#48
  def initialize(klass, defined_fields, definition, spreads); end

  # Returns the value of attribute defined_fields.
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#30
  def defined_fields; end

  # Returns the value of attribute definition.
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#30
  def definition; end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#36
  def fields; end

  # Returns the value of attribute klass.
  #
  # source://graphql-client//lib/graphql/client/schema/object_type.rb#30
  def klass; end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#63
  def new(data = T.unsafe(nil), errors = T.unsafe(nil)); end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#40
  def spreads; end

  # source://graphql-client//lib/graphql/client/schema/object_type.rb#32
  def type; end
end

# source://graphql-client//lib/graphql/client/schema/object_type.rb#28
GraphQL::Client::Schema::ObjectType::WithDefinition::EMPTY_SET = T.let(T.unsafe(nil), Set)

# source://graphql-client//lib/graphql/client/schema/possible_types.rb#10
class GraphQL::Client::Schema::PossibleTypes
  include ::GraphQL::Client::Schema::BaseType

  # @return [PossibleTypes] a new instance of PossibleTypes
  #
  # source://graphql-client//lib/graphql/client/schema/possible_types.rb#13
  def initialize(type, types); end

  # Internal: Cast JSON value to wrapped value.
  #
  # value - JSON value
  # errors - Errors instance
  #
  # Returns BaseType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/possible_types.rb#37
  def cast(value, errors); end

  # Returns the value of attribute possible_types.
  #
  # source://graphql-client//lib/graphql/client/schema/possible_types.rb#29
  def possible_types; end
end

# source://graphql-client//lib/graphql/client/schema/scalar_type.rb#8
class GraphQL::Client::Schema::ScalarType
  include ::GraphQL::Client::Schema::BaseType

  # Internal: Construct type wrapper from another GraphQL::BaseType.
  #
  # type - GraphQL::BaseType instance
  #
  # @return [ScalarType] a new instance of ScalarType
  #
  # source://graphql-client//lib/graphql/client/schema/scalar_type.rb#14
  def initialize(type); end

  # Internal: Cast raw JSON value to Ruby scalar object.
  #
  # value - JSON value
  # errors - Errors instance
  #
  # Returns casted Object.
  #
  # source://graphql-client//lib/graphql/client/schema/scalar_type.rb#32
  def cast(value, _errors = T.unsafe(nil)); end

  # source://graphql-client//lib/graphql/client/schema/scalar_type.rb#22
  def define_class(definition, ast_nodes); end
end

# source://graphql-client//lib/graphql/client/schema/skip_directive.rb#8
class GraphQL::Client::Schema::SkipDirective
  include ::GraphQL::Client::Schema::BaseType

  # Internal: Construct list wrapper from other BaseType.
  #
  # of_klass - BaseType instance
  #
  # @return [SkipDirective] a new instance of SkipDirective
  #
  # source://graphql-client//lib/graphql/client/schema/skip_directive.rb#14
  def initialize(of_klass); end

  # Internal: Cast JSON value to wrapped value.
  #
  # values - JSON value
  # errors - Errors instance
  #
  # Returns List instance or nil.
  #
  # source://graphql-client//lib/graphql/client/schema/skip_directive.rb#33
  def cast(value, errors); end

  # Internal: Get wrapped klass.
  #
  # Returns BaseType instance.
  #
  # source://graphql-client//lib/graphql/client/schema/skip_directive.rb#25
  def of_klass; end
end

# source://graphql-client//lib/graphql/client/schema/union_type.rb#8
class GraphQL::Client::Schema::UnionType < ::Module
  include ::GraphQL::Client::Schema::BaseType

  # @return [UnionType] a new instance of UnionType
  #
  # source://graphql-client//lib/graphql/client/schema/union_type.rb#11
  def initialize(type); end

  # source://graphql-client//lib/graphql/client/schema/union_type.rb#23
  def define_class(definition, ast_nodes); end

  # source://graphql-client//lib/graphql/client/schema/union_type.rb#19
  def new(types); end
end

# source://graphql-client//lib/graphql/client/type_stack.rb#4
module GraphQL::Client::TypeStack
  # @param schema [GraphQL::Schema] the schema whose types to use when climbing this document
  # @param visitor [GraphQL::Language::Visitor] a visitor to follow & watch the types
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#30
  def initialize(document, schema:, **rest); end

  # @return [Array<GraphQL::Node::Argument>] arguments which have been entered
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#23
  def argument_definitions; end

  # Directives are pushed on, then popped off while traversing the tree
  #
  # @return [Array<GraphQL::Node::Directive>] directives which have been entered
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#20
  def directive_definitions; end

  # When it enters a field, it's pushed on this stack (useful for nested fields, args).
  # When it exits, it's popped off.
  #
  # @return [Array<GraphQL::Field>] fields which have been entered
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#16
  def field_definitions; end

  # When it enters an object (starting with query or mutation root), it's pushed on this stack.
  # When it exits, it's popped off.
  #
  # @return [Array<GraphQL::ObjectType, GraphQL::Union, GraphQL::Interface>]
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#11
  def object_types; end

  # source://graphql-client//lib/graphql/client/type_stack.rb#68
  def on_argument(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#40
  def on_directive(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#48
  def on_field(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#119
  def on_fragment_definition(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#136
  def on_fragment_spread(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#102
  def on_inline_fragment(node, parent); end

  # source://graphql-client//lib/graphql/client/type_stack.rb#91
  def on_operation_definition(node, parent); end

  # @return [Array<String>] fields which have been entered (by their AST name)
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#26
  def path; end

  # @return [GraphQL::Schema] the schema whose types are present in this document
  #
  # source://graphql-client//lib/graphql/client/type_stack.rb#6
  def schema; end
end

# source://graphql-client//lib/graphql/client/error.rb#14
class GraphQL::Client::UnfetchedFieldError < ::NoMethodError; end

# source://graphql-client//lib/graphql/client/error.rb#17
class GraphQL::Client::UnimplementedFieldError < ::NoMethodError; end

# source://graphql-client//lib/graphql/client.rb#29
class GraphQL::Client::ValidationError < ::GraphQL::Client::Error; end

# Collocation will not be enforced if a stack trace includes any of these gems.
#
# source://graphql-client//lib/graphql/client/collocated_enforcement.rb#8
GraphQL::Client::WHITELISTED_GEM_NAMES = T.let(T.unsafe(nil), Array)
