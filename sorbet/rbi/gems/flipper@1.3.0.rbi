# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `flipper` gem.
# Please instead update this file by running `bin/tapioca gem flipper`.


# Simple class for turning a flipper_id into an actor that can be based
# to Flipper::Feature#enabled?.
#
# source://flipper//lib/flipper.rb#3
module Flipper
  extend ::Flipper
  extend ::Forwardable

  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def adapter(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_expression(*args, **_arg1, &block); end

  # source://flipper//lib/flipper.rb#75
  def all(*args); end

  # source://flipper//lib/flipper.rb#71
  def any(*args); end

  # source://flipper//lib/flipper.rb#95
  def boolean(value); end

  # Public: Returns Flipper::Configuration instance.
  #
  # source://flipper//lib/flipper.rb#28
  def configuration; end

  # Public: Sets Flipper::Configuration instance.
  #
  # source://flipper//lib/flipper.rb#33
  def configuration=(configuration); end

  # Public: Configure flipper.
  #
  #   Flipper.configure do |config|
  #     config.adapter { ... }
  #   end
  #
  # Yields Flipper::Configuration instance.
  #
  # @yield [configuration]
  #
  # source://flipper//lib/flipper.rb#23
  def configure; end

  # source://flipper//lib/flipper.rb#79
  def constant(value); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_actor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_expression(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_group(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_percentage_of_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_percentage_of_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_actor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_expression(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_group(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_percentage_of_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_percentage_of_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enabled?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def exist?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def export(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def expression(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def feature(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def features(*args, **_arg1, &block); end

  # Public: Fetches a group by name.
  #
  # name - The Symbol name of the group.
  #
  # Examples
  #
  #   Flipper.group(:admins)
  #
  # Returns Flipper::Group.
  #
  # source://flipper//lib/flipper.rb#160
  def group(name); end

  # Public: Check if a group exists
  #
  # Returns boolean
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper.rb#147
  def group_exists?(name); end

  # Public: Returns a Set of symbols where each symbol is a registered
  # group name. If you just want the names, this is more efficient than doing
  # `Flipper.groups.map(&:name)`.
  #
  # source://flipper//lib/flipper.rb#133
  def group_names; end

  # Public: Returns a Set of registered Types::Group instances.
  #
  # source://flipper//lib/flipper.rb#126
  def groups; end

  # Internal: Registry of all groups_registry.
  #
  # source://flipper//lib/flipper.rb#165
  def groups_registry; end

  # Internal: Change the groups_registry registry.
  #
  # source://flipper//lib/flipper.rb#170
  def groups_registry=(registry); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def import(*args, **_arg1, &block); end

  # Public: Default per thread flipper instance if configured. You should not
  # need to use this directly as most of the Flipper::DSL methods are delegated
  # from Flipper module itself. Instead of doing Flipper.instance.enabled?(:search),
  # you can use Flipper.enabled?(:search) for the same result.
  #
  # Returns Flipper::DSL instance.
  #
  # source://flipper//lib/flipper.rb#45
  def instance; end

  # Public: Set the flipper instance. It is most common to use the
  # Configuration#default to set this instance, but for things like the test
  # environment, this writer is actually useful.
  #
  # source://flipper//lib/flipper.rb#52
  def instance=(flipper); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoize=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoizing?(*args, **_arg1, &block); end

  # Public: Start here. Given an adapter returns a handy DSL to all the flipper
  # goodness. To see supported options, check out dsl.rb.
  #
  # source://flipper//lib/flipper.rb#12
  def new(adapter, options = T.unsafe(nil)); end

  # source://flipper//lib/flipper.rb#91
  def number(value); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def preload(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def preload_all(*args, **_arg1, &block); end

  # source://flipper//lib/flipper.rb#83
  def property(name); end

  # source://flipper//lib/flipper.rb#99
  def random(max); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def read_only?(*args, **_arg1, &block); end

  # Public: Use this to register a group by name.
  #
  # name - The Symbol name of the group.
  # block - The block that should be used to determine if the group matches a
  #         given actor.
  #
  # Examples
  #
  #   Flipper.register(:admins) { |actor|
  #     actor.respond_to?(:admin?) && actor.admin?
  #   }
  #
  # Returns a Flipper::Group.
  # Raises Flipper::DuplicateGroup if the group is already registered.
  #
  # source://flipper//lib/flipper.rb#117
  def register(name, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remove(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remove_expression(*args, **_arg1, &block); end

  # source://flipper//lib/flipper.rb#87
  def string(value); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def sync(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def sync_secret(*args, **_arg1, &block); end

  # Public: Clears the group registry.
  #
  # Returns nothing.
  #
  # source://flipper//lib/flipper.rb#140
  def unregister_groups; end

  class << self
    # @return [Boolean]
    #
    # source://flipper-ui/1.3.0/lib/flipper/version.rb#10
    def deprecated_ruby_version?; end
  end
end

# source://flipper//lib/flipper/actor.rb#4
class Flipper::Actor
  # @return [Actor] a new instance of Actor
  #
  # source://flipper//lib/flipper/actor.rb#7
  def initialize(flipper_id, flipper_properties = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/actor.rb#12
  def ==(other); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/actor.rb#12
  def eql?(other); end

  # Returns the value of attribute flipper_id.
  #
  # source://flipper//lib/flipper/actor.rb#5
  def flipper_id; end

  # Returns the value of attribute flipper_properties.
  #
  # source://flipper//lib/flipper/actor.rb#5
  def flipper_properties; end

  # source://flipper//lib/flipper/actor.rb#19
  def hash; end
end

# Adding a module include so we have some hooks for stuff down the road
#
# source://flipper//lib/flipper/adapter.rb#3
module Flipper::Adapter
  mixes_in_class_methods ::Flipper::Adapter::ClassMethods

  # Public: Default config for a feature's gate values.
  #
  # source://flipper//lib/flipper/adapter.rb#68
  def default_config; end

  # Public: Exports the adapter in a given format for a given format version.
  #
  # Returns a Flipper::Export instance.
  #
  # source://flipper//lib/flipper/adapter.rb#63
  def export(format: T.unsafe(nil), version: T.unsafe(nil)); end

  # Public: Get all features and gate values in one call. Defaults to one call
  # to features and another to get_multi. Feel free to override per adapter to
  # make this more efficient.
  #
  # source://flipper//lib/flipper/adapter.rb#34
  def get_all; end

  # Public: Get multiple features in one call. Defaults to one get per
  # feature. Feel free to override per adapter to make this more efficient and
  # reduce network calls.
  #
  # source://flipper//lib/flipper/adapter.rb#42
  def get_multi(features); end

  # Public: Ensure that adapter is in sync with source adapter provided.
  #
  # source - The source dsl, adapter or export to import.
  #
  # Returns true if successful.
  #
  # source://flipper//lib/flipper/adapter.rb#55
  def import(source); end

  # Public: default name of the adapter
  #
  # source://flipper//lib/flipper/adapter.rb#73
  def name; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapter.rb#27
  def read_only?; end

  class << self
    # @private
    #
    # source://flipper//lib/flipper/adapter.rb#4
    def included(base); end
  end
end

# source://flipper//lib/flipper/adapter.rb#8
module Flipper::Adapter::ClassMethods
  # Public: Default config for a feature's gate values.
  #
  # source://flipper//lib/flipper/adapter.rb#10
  def default_config; end

  # source://flipper//lib/flipper/adapter.rb#21
  def from(source); end
end

# Builds an adapter from a stack of adapters.
#
#   adapter = Flipper::AdapterBuilder.new do
#     use Flipper::Adapters::Strict
#     use Flipper::Adapters::Memoizer
#     store Flipper::Adapters::Memory
#   end.to_adapter
#
# source://flipper//lib/flipper/adapter_builder.rb#10
class Flipper::AdapterBuilder
  # @return [AdapterBuilder] a new instance of AdapterBuilder
  #
  # source://flipper//lib/flipper/adapter_builder.rb#11
  def initialize(&block); end

  # source://flipper//lib/flipper/adapter_builder.rb#31
  def store(adapter, *args, **kwargs, &block); end

  # source://flipper//lib/flipper/adapter_builder.rb#40
  def to_adapter; end

  # source://flipper//lib/flipper/adapter_builder.rb#21
  def use(klass, *args, **kwargs, &block); end
end

# source://flipper//lib/flipper/adapters/memory.rb#5
module Flipper::Adapters; end

# source://flipper//lib/flipper/adapters/actor_limit.rb#3
class Flipper::Adapters::ActorLimit < ::Flipper::Adapters::Wrapper
  # @return [ActorLimit] a new instance of ActorLimit
  #
  # source://flipper//lib/flipper/adapters/actor_limit.rb#8
  def initialize(adapter, limit = T.unsafe(nil)); end

  # source://flipper//lib/flipper/adapters/actor_limit.rb#13
  def enable(feature, gate, resource); end

  # Returns the value of attribute limit.
  #
  # source://flipper//lib/flipper/adapters/actor_limit.rb#6
  def limit; end

  private

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/actor_limit.rb#23
  def over_limit?(feature); end
end

# source://flipper//lib/flipper/adapters/actor_limit.rb#4
class Flipper::Adapters::ActorLimit::LimitExceeded < ::Flipper::Error; end

# Internal: Adapter that wraps another adapter and instruments all adapter
# operations.
#
# source://flipper//lib/flipper/adapters/instrumented.rb#7
class Flipper::Adapters::Instrumented
  include ::Flipper::Adapter
  extend ::Flipper::Adapter::ClassMethods

  # Internal: Initializes a new adapter instance.
  #
  # adapter - Vanilla adapter instance to wrap.
  #
  # options - The Hash of options.
  #           :instrumenter - What to use to instrument all the things.
  #
  # @return [Instrumented] a new instance of Instrumented
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#23
  def initialize(adapter, options = T.unsafe(nil)); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#41
  def add(feature); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#67
  def clear(feature); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#131
  def disable(feature, gate, thing); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#116
  def enable(feature, gate, thing); end

  # source://flipper//lib/flipper/adapters/instrumented.rb#156
  def export(format: T.unsafe(nil), version: T.unsafe(nil)); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#29
  def features; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#80
  def get(feature); end

  # source://flipper//lib/flipper/adapters/instrumented.rb#104
  def get_all; end

  # source://flipper//lib/flipper/adapters/instrumented.rb#92
  def get_multi(features); end

  # source://flipper//lib/flipper/adapters/instrumented.rb#145
  def import(source); end

  # Private: What is used to instrument all the things.
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#14
  def instrumenter; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/instrumented.rb#54
  def remove(feature); end
end

# Private: The name of instrumentation events.
#
# source://flipper//lib/flipper/adapters/instrumented.rb#11
Flipper::Adapters::Instrumented::InstrumentationName = T.let(T.unsafe(nil), String)

# Internal: Adapter that wraps another adapter with the ability to memoize
# adapter calls in memory. Used by flipper dsl and the memoizer middleware
# to make it possible to memoize adapter calls for the duration of a request.
#
# source://flipper//lib/flipper/adapters/memoizable.rb#8
class Flipper::Adapters::Memoizable
  include ::Flipper::Adapter
  extend ::Flipper::Adapter::ClassMethods

  # Public
  #
  # @return [Memoizable] a new instance of Memoizable
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#18
  def initialize(adapter, cache = T.unsafe(nil)); end

  # Internal: The adapter this adapter is wrapping.
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#15
  def adapter; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#36
  def add(feature); end

  # Internal
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#12
  def cache; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#49
  def clear(feature); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#116
  def disable(feature, gate, thing); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#111
  def enable(feature, gate, thing); end

  # source://flipper//lib/flipper/adapters/memoizable.rb#129
  def export(format: T.unsafe(nil), version: T.unsafe(nil)); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#27
  def features; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#54
  def get(feature); end

  # source://flipper//lib/flipper/adapters/memoizable.rb#84
  def get_all; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#63
  def get_multi(features); end

  # source://flipper//lib/flipper/adapters/memoizable.rb#125
  def import(source); end

  # Internal: Turns local caching on/off.
  #
  # value - The Boolean that decides if local caching is on.
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#136
  def memoize=(value); end

  # Internal: Returns true for using local cache, false for not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#142
  def memoizing?; end

  # source://flipper//lib/flipper/adapters/memoizable.rb#147
  def method_missing(name, *args, **kwargs, &block); end

  # Public
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#121
  def read_only?; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memoizable.rb#41
  def remove(feature); end

  private

  # source://flipper//lib/flipper/adapters/memoizable.rb#162
  def expire_feature(feature); end

  # source://flipper//lib/flipper/adapters/memoizable.rb#166
  def expire_features_set; end

  # source://flipper//lib/flipper/adapters/memoizable.rb#158
  def key_for(key); end
end

# Public: Adapter for storing everything in memory.
# Useful for tests/specs.
#
# source://flipper//lib/flipper/adapters/memory.rb#8
class Flipper::Adapters::Memory
  include ::Flipper::Adapter
  extend ::Flipper::Adapter::ClassMethods

  # Public
  #
  # @return [Memory] a new instance of Memory
  #
  # source://flipper//lib/flipper/adapters/memory.rb#12
  def initialize(source = T.unsafe(nil), threadsafe: T.unsafe(nil)); end

  # Public: Adds a feature to the set of known features.
  #
  # source://flipper//lib/flipper/adapters/memory.rb#24
  def add(feature); end

  # Public: Clears all the gate values for a feature.
  #
  # source://flipper//lib/flipper/adapters/memory.rb#37
  def clear(feature); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memory.rb#85
  def disable(feature, gate, thing); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memory.rb#62
  def enable(feature, gate, thing); end

  # Public: The set of known features.
  #
  # source://flipper//lib/flipper/adapters/memory.rb#19
  def features; end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memory.rb#43
  def get(feature); end

  # source://flipper//lib/flipper/adapters/memory.rb#57
  def get_all; end

  # source://flipper//lib/flipper/adapters/memory.rb#47
  def get_multi(features); end

  # Public: a more efficient implementation of import for this adapter
  #
  # source://flipper//lib/flipper/adapters/memory.rb#116
  def import(source); end

  # Public
  #
  # source://flipper//lib/flipper/adapters/memory.rb#107
  def inspect; end

  # Public: Removes a feature from the set of known features and clears
  # all the values for the feature.
  #
  # source://flipper//lib/flipper/adapters/memory.rb#31
  def remove(feature); end

  private

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/memory.rb#130
  def forked?; end

  # source://flipper//lib/flipper/adapters/memory.rb#125
  def reset; end

  # source://flipper//lib/flipper/adapters/memory.rb#134
  def synchronize(&block); end
end

# An adapter that ensures a feature exists before checking it.
#
# source://flipper//lib/flipper/adapters/strict.rb#4
class Flipper::Adapters::Strict < ::Flipper::Adapters::Wrapper
  # @return [Strict] a new instance of Strict
  #
  # source://flipper//lib/flipper/adapters/strict.rb#13
  def initialize(adapter, handler = T.unsafe(nil), &block); end

  # source://flipper//lib/flipper/adapters/strict.rb#18
  def get(feature); end

  # source://flipper//lib/flipper/adapters/strict.rb#23
  def get_multi(features); end

  # Returns the value of attribute handler.
  #
  # source://flipper//lib/flipper/adapters/strict.rb#5
  def handler; end

  private

  # source://flipper//lib/flipper/adapters/strict.rb#30
  def assert_feature_exists(feature); end
end

# source://flipper//lib/flipper/adapters/strict.rb#7
class Flipper::Adapters::Strict::NotFound < ::Flipper::Error
  # @return [NotFound] a new instance of NotFound
  #
  # source://flipper//lib/flipper/adapters/strict.rb#8
  def initialize(name); end
end

# TODO: Syncing should happen in a background thread on a regular interval
# rather than in the main thread only when reads happen.
#
# source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#6
class Flipper::Adapters::Sync; end

# Internal: Given a feature, local gate values and remote gate values,
# makes the local equal to the remote.
#
# source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#9
class Flipper::Adapters::Sync::FeatureSynchronizer
  extend ::Forwardable

  # @return [FeatureSynchronizer] a new instance of FeatureSynchronizer
  #
  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#30
  def initialize(feature, local_gate_values, remote_gate_values); end

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#36
  def call; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def local_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def local_boolean(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def local_expression(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def local_groups(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def local_percentage_of_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def local_percentage_of_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remote_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remote_boolean(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remote_expression(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remote_groups(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remote_percentage_of_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remote_percentage_of_time(*args, **_arg1, &block); end

  private

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#97
  def default_config; end

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#101
  def default_gate_values; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#105
  def default_gate_values?(gate_values); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#117
  def local_boolean_enabled?; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#109
  def local_disabled?; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#121
  def remote_boolean_enabled?; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#113
  def remote_disabled?; end

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#61
  def sync_actors; end

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#55
  def sync_expression; end

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#73
  def sync_groups; end

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#85
  def sync_percentage_of_actors; end

  # source://flipper//lib/flipper/adapters/sync/feature_synchronizer.rb#91
  def sync_percentage_of_time; end
end

# Public: Given a local and remote adapter, it can update the local to
# match the remote doing only the necessary enable/disable operations.
#
# source://flipper//lib/flipper/adapters/sync/synchronizer.rb#10
class Flipper::Adapters::Sync::Synchronizer
  # Public: Initializes a new synchronizer.
  #
  # local - The Flipper adapter to get in sync with the remote.
  # remote - The Flipper adapter that is source of truth that the local
  #          adapter should be brought in line with.
  # options - The Hash of options.
  #           :instrumenter - The instrumenter used to instrument.
  #           :raise - Should errors be raised (default: true).
  #
  # @return [Synchronizer] a new instance of Synchronizer
  #
  # source://flipper//lib/flipper/adapters/sync/synchronizer.rb#19
  def initialize(local, remote, options = T.unsafe(nil)); end

  # Public: Forces a sync.
  #
  # source://flipper//lib/flipper/adapters/sync/synchronizer.rb#27
  def call; end

  private

  # source://flipper//lib/flipper/adapters/sync/synchronizer.rb#33
  def sync; end
end

# A base class for any adapter that wraps another adapter. By default, all methods
# delegate to the wrapped adapter. Implement `#wrap` to customize the behavior of
# all delegated methods, or override individual methods as needed.
#
# source://flipper//lib/flipper/adapters/wrapper.rb#6
class Flipper::Adapters::Wrapper
  include ::Flipper::Adapter
  extend ::Flipper::Adapter::ClassMethods

  # @return [Wrapper] a new instance of Wrapper
  #
  # source://flipper//lib/flipper/adapters/wrapper.rb#25
  def initialize(adapter); end

  # Returns the value of attribute adapter.
  #
  # source://flipper//lib/flipper/adapters/wrapper.rb#23
  def adapter; end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def add(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def clear(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def disable(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def enable(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def export(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def features(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def get(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def get_all(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def get_multi(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def import(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#31
  def remove(*args, **kwargs); end

  # source://flipper//lib/flipper/adapters/wrapper.rb#44
  def wrap(method, *args, **kwargs, &block); end
end

# source://flipper//lib/flipper/adapters/wrapper.rb#9
Flipper::Adapters::Wrapper::METHODS = T.let(T.unsafe(nil), Array)

# source://flipper//lib/flipper/configuration.rb#2
class Flipper::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://flipper//lib/flipper/configuration.rb#3
  def initialize(options = T.unsafe(nil)); end

  # The default adapter to use.
  #
  # Pass a block to assign the adapter, and invoke without a block to
  # return the configured adapter instance.
  #
  #   Flipper.configure do |config|
  #     config.adapter # => instance of default Memory adapter
  #
  #     # Configure it to use the ActiveRecord adapter
  #     config.adapter do
  #       require "flipper/adapters/active_record"
  #       Flipper::Adapters::ActiveRecord.new
  #     end
  #
  #     config.adapter # => instance of ActiveRecord adapter
  #  end
  #
  # source://flipper//lib/flipper/configuration.rb#25
  def adapter(&block); end

  # Controls the default instance for flipper. When used with a block it
  # assigns a new default block to use to generate an instance. When used
  # without a block, it performs a block invocation and returns the result.
  #
  #   configuration = Flipper::Configuration.new
  #   configuration.default # => Flipper::DSL instance using Memory adapter
  #
  #   # sets the default block to generate a new instance using ActiveRecord adapter
  #   configuration.default do
  #     require "flipper/adapters/active_record"
  #     Flipper.new(Flipper::Adapters::ActiveRecord.new)
  #   end
  #
  #   configuration.default # => Flipper::DSL instance using ActiveRecord adapter
  #
  # Returns result of default block invocation if called without block. If
  # called with block, assigns the default block.
  #
  # source://flipper//lib/flipper/configuration.rb#61
  def default(&block); end

  # source://flipper//lib/flipper/configuration.rb#69
  def statsd; end

  # source://flipper//lib/flipper/configuration.rb#74
  def statsd=(client); end

  # source://flipper//lib/flipper/configuration.rb#35
  def use(klass, *args, **kwargs, &block); end
end

# source://flipper//lib/flipper/dsl.rb#4
class Flipper::DSL
  extend ::Forwardable

  # Public: Returns a new instance of the DSL.
  #
  # adapter - The adapter that this DSL instance should use.
  # options - The Hash of options.
  #           :instrumenter - What should be used to instrument all the things.
  #           :memoize - Should adapter be wrapped by memoize adapter or not.
  #
  # @return [DSL] a new instance of DSL
  #
  # source://flipper//lib/flipper/dsl.rb#21
  def initialize(adapter, options = T.unsafe(nil)); end

  # Public: Access a feature instance by name.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns an instance of Flipper::Feature.
  # Public: Shortcut access to a feature instance by name.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns an instance of Flipper::Feature.
  #
  # source://flipper//lib/flipper/dsl.rb#216
  def [](name); end

  # Private
  #
  # source://flipper//lib/flipper/dsl.rb#8
  def adapter; end

  # Public: Add a feature.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns result of add.
  #
  # source://flipper//lib/flipper/dsl.rb#189
  def add(name); end

  # Public: Add an expression to a feature.
  #
  # expression - an expression or Hash that can be converted to an expression.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/dsl.rb#64
  def add_expression(name, expression); end

  # Public: Disable a feature.
  #
  # name - The String or Symbol name of the feature.
  # args - The args passed through to the feature instance enable call.
  #
  # Returns the result of the feature instance disable call.
  #
  # source://flipper//lib/flipper/dsl.rb#118
  def disable(name, *args); end

  # Public: Disable a feature for an actor.
  #
  # name - The String or Symbol name of the feature.
  # actor - a Flipper::Types::Actor instance or an object that responds
  #         to flipper_id.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/dsl.rb#147
  def disable_actor(name, actor); end

  # Public: Disable expression for feature.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns result of Feature#disable.
  #
  # source://flipper//lib/flipper/dsl.rb#127
  def disable_expression(name); end

  # Public: Disable a feature for a group.
  #
  # name - The String or Symbol name of the feature.
  # group - a Flipper::Types::Group instance or a String or Symbol name of a
  #         registered group.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/dsl.rb#158
  def disable_group(name, group); end

  # Public: Disable a feature for a percentage of actors.
  #
  # name - The String or Symbol name of the feature.
  # percentage - a Flipper::Types::PercentageOfActors instance or an object
  #              that responds to to_i.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/dsl.rb#180
  def disable_percentage_of_actors(name); end

  # Public: Disable a feature a percentage of time.
  #
  # name - The String or Symbol name of the feature.
  # percentage - a Flipper::Types::PercentageOfTime instance or an object
  #              that responds to to_i.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/dsl.rb#169
  def disable_percentage_of_time(name); end

  # Public: Enable a feature.
  #
  # name - The String or Symbol name of the feature.
  # args - The args passed through to the feature instance enable call.
  #
  # Returns the result of the feature instance enable call.
  #
  # source://flipper//lib/flipper/dsl.rb#45
  def enable(name, *args); end

  # Public: Enable a feature for an actor.
  #
  # name - The String or Symbol name of the feature.
  # actor - a Flipper::Types::Actor instance or an object that responds
  #         to flipper_id.
  #
  # Returns result of Feature#enable.
  #
  # source://flipper//lib/flipper/dsl.rb#75
  def enable_actor(name, actor); end

  # Public: Enable a feature for an expression.
  #
  # name - The String or Symbol name of the feature.
  # expression - a Flipper::Expression instance or a Hash.
  #
  # Returns result of Feature#enable.
  #
  # source://flipper//lib/flipper/dsl.rb#55
  def enable_expression(name, expression); end

  # Public: Enable a feature for a group.
  #
  # name - The String or Symbol name of the feature.
  # group - a Flipper::Types::Group instance or a String or Symbol name of a
  #         registered group.
  #
  # Returns result of Feature#enable.
  #
  # source://flipper//lib/flipper/dsl.rb#86
  def enable_group(name, group); end

  # Public: Enable a feature for a percentage of actors.
  #
  # name - The String or Symbol name of the feature.
  # percentage - a Flipper::Types::PercentageOfActors instance or an object
  #              that responds to to_i.
  #
  # Returns result of Feature#enable.
  #
  # source://flipper//lib/flipper/dsl.rb#108
  def enable_percentage_of_actors(name, percentage); end

  # Public: Enable a feature a percentage of time.
  #
  # name - The String or Symbol name of the feature.
  # percentage - a Flipper::Types::PercentageOfTime instance or an object
  #              that responds to to_i.
  #
  # Returns result of Feature#enable.
  #
  # source://flipper//lib/flipper/dsl.rb#97
  def enable_percentage_of_time(name, percentage); end

  # Public: Check if a feature is enabled.
  #
  # name - The String or Symbol name of the feature.
  # args - The args passed through to the enabled check.
  #
  # Returns true if feature is enabled, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/dsl.rb#35
  def enabled?(name, *args); end

  # Public: Has a feature been added in the adapter.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns true if added else false.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/dsl.rb#198
  def exist?(name); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def export(*args, **_arg1, &block); end

  # Public: Gets the expression for the feature.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns an instance of Flipper::Expression.
  #
  # source://flipper//lib/flipper/dsl.rb#264
  def expression(name); end

  # Public: Access a feature instance by name.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns an instance of Flipper::Feature.
  #
  # source://flipper//lib/flipper/dsl.rb#216
  def feature(name); end

  # Public: Returns a Set of the known features for this adapter.
  #
  # Returns Set of Flipper::Feature instances.
  #
  # source://flipper//lib/flipper/dsl.rb#271
  def features; end

  # Public: Access a flipper group by name.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns an instance of Flipper::Group.
  #
  # source://flipper//lib/flipper/dsl.rb#255
  def group(name); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def import(*args, **_arg1, &block); end

  # Private: What is being used to instrument all the things.
  #
  # source://flipper//lib/flipper/dsl.rb#11
  def instrumenter; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoize=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoizing?(*args, **_arg1, &block); end

  # Public: Preload the features with the given names.
  #
  # names - An Array of String or Symbol names of the features.
  #
  # Returns an Array of Flipper::Feature.
  #
  # source://flipper//lib/flipper/dsl.rb#229
  def preload(names); end

  # Public: Preload all the adapters features.
  #
  # Returns an Array of Flipper::Feature.
  #
  # source://flipper//lib/flipper/dsl.rb#238
  def preload_all; end

  # Public: Does this adapter support writes or not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/dsl.rb#276
  def read_only?; end

  # Public: Remove a feature.
  #
  # name - The String or Symbol name of the feature.
  #
  # Returns result of remove.
  #
  # source://flipper//lib/flipper/dsl.rb#207
  def remove(name); end

  # Public: Remove an expression from a feature.
  #
  # expression - an Expression or Hash that can be converted to an expression.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/dsl.rb#136
  def remove_expression(name, expression); end

  # Cloud DSL method that does nothing for open source version.
  #
  # source://flipper//lib/flipper/dsl.rb#281
  def sync; end

  # Cloud DSL method that does nothing for open source version.
  #
  # source://flipper//lib/flipper/dsl.rb#285
  def sync_secret; end
end

# Raised when attempting to declare a group name that has already been used.
#
# source://flipper//lib/flipper/errors.rb#13
class Flipper::DuplicateGroup < ::Flipper::Error; end

# source://flipper//lib/flipper/engine.rb#2
class Flipper::Engine < ::Rails::Engine
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/engine.rb#94
  def cloud?; end

  class << self
    # source://activesupport/7.0.8.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://flipper//lib/flipper/engine.rb#3
    def default_strict_value; end

    # @return [Boolean]
    #
    # source://flipper//lib/flipper/engine.rb#98
    def deprecated_rails_version?; end
  end
end

# Top level error that all other errors inherit from.
#
# source://flipper//lib/flipper/errors.rb#3
class Flipper::Error < ::StandardError; end

# source://flipper//lib/flipper/export.rb#4
class Flipper::Export
  # @return [Export] a new instance of Export
  #
  # source://flipper//lib/flipper/export.rb#7
  def initialize(contents:, format: T.unsafe(nil), version: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/export.rb#21
  def ==(other); end

  # source://flipper//lib/flipper/export.rb#17
  def adapter; end

  # Returns the value of attribute contents.
  #
  # source://flipper//lib/flipper/export.rb#5
  def contents; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/export.rb#21
  def eql?(other); end

  # @raise [NotImplementedError]
  #
  # source://flipper//lib/flipper/export.rb#13
  def features; end

  # Returns the value of attribute format.
  #
  # source://flipper//lib/flipper/export.rb#5
  def format; end

  # Returns the value of attribute version.
  #
  # source://flipper//lib/flipper/export.rb#5
  def version; end
end

# source://flipper//lib/flipper/exporter.rb#4
module Flipper::Exporter
  extend ::Flipper::Exporter

  # source://flipper//lib/flipper/exporter.rb#13
  def build(format: T.unsafe(nil), version: T.unsafe(nil)); end
end

# source://flipper//lib/flipper/exporter.rb#7
Flipper::Exporter::FORMATTERS = T.let(T.unsafe(nil), Hash)

# source://flipper//lib/flipper/exporters/json/export.rb#5
module Flipper::Exporters; end

# source://flipper//lib/flipper/exporters/json/export.rb#6
module Flipper::Exporters::Json; end

# Internal: JSON export class that knows how to build features hash
# from data.
#
# source://flipper//lib/flipper/exporters/json/export.rb#13
class Flipper::Exporters::Json::Export < ::Flipper::Export
  # @return [Export] a new instance of Export
  #
  # source://flipper//lib/flipper/exporters/json/export.rb#14
  def initialize(contents:, version: T.unsafe(nil)); end

  # Public: The features hash identical to calling get_all on adapter.
  #
  # source://flipper//lib/flipper/exporters/json/export.rb#19
  def features; end
end

# Raised when the contents of the export are not valid.
#
# source://flipper//lib/flipper/exporters/json/export.rb#8
class Flipper::Exporters::Json::InvalidError < ::StandardError; end

# source://flipper//lib/flipper/exporters/json/export.rb#9
class Flipper::Exporters::Json::JsonError < ::Flipper::Exporters::Json::InvalidError; end

# source://flipper//lib/flipper/exporters/json/v1.rb#7
class Flipper::Exporters::Json::V1
  # source://flipper//lib/flipper/exporters/json/v1.rb#10
  def call(adapter); end
end

# source://flipper//lib/flipper/exporters/json/v1.rb#8
Flipper::Exporters::Json::V1::VERSION = T.let(T.unsafe(nil), Integer)

# source://flipper//lib/flipper/expression/builder.rb#2
class Flipper::Expression
  include ::Flipper::Expression::Builder

  # @return [Expression] a new instance of Expression
  #
  # source://flipper//lib/flipper/expression.rb#34
  def initialize(name, args = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression.rb#48
  def ==(other); end

  # Returns the value of attribute args.
  #
  # source://flipper//lib/flipper/expression.rb#32
  def args; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression.rb#48
  def eql?(other); end

  # source://flipper//lib/flipper/expression.rb#40
  def evaluate(context = T.unsafe(nil)); end

  # Returns the value of attribute function.
  #
  # source://flipper//lib/flipper/expression.rb#32
  def function; end

  # Returns the value of attribute name.
  #
  # source://flipper//lib/flipper/expression.rb#32
  def name; end

  # source://flipper//lib/flipper/expression.rb#53
  def value; end

  private

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression.rb#61
  def call_with_context?; end

  class << self
    # source://flipper//lib/flipper/expression.rb#8
    def build(object); end

    private

    def new(*_arg0); end
  end
end

# source://flipper//lib/flipper/expression/builder.rb#3
module Flipper::Expression::Builder
  # source://flipper//lib/flipper/expression/builder.rb#8
  def add(*expressions); end

  # source://flipper//lib/flipper/expression/builder.rb#20
  def all; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression/builder.rb#64
  def all?; end

  # source://flipper//lib/flipper/expression/builder.rb#16
  def any; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression/builder.rb#60
  def any?; end

  # source://flipper//lib/flipper/expression/builder.rb#4
  def build(object); end

  # source://flipper//lib/flipper/expression/builder.rb#24
  def eq(object); end

  # source://flipper//lib/flipper/expression/builder.rb#24
  def equal(object); end

  # source://flipper//lib/flipper/expression/builder.rb#34
  def greater_than(object); end

  # source://flipper//lib/flipper/expression/builder.rb#39
  def greater_than_or_equal(object); end

  # source://flipper//lib/flipper/expression/builder.rb#39
  def greater_than_or_equal_to(object); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression/builder.rb#68
  def group?; end

  # source://flipper//lib/flipper/expression/builder.rb#34
  def gt(object); end

  # source://flipper//lib/flipper/expression/builder.rb#39
  def gte(object); end

  # source://flipper//lib/flipper/expression/builder.rb#45
  def less_than(object); end

  # source://flipper//lib/flipper/expression/builder.rb#50
  def less_than_or_equal(object); end

  # source://flipper//lib/flipper/expression/builder.rb#50
  def less_than_or_equal_to(object); end

  # source://flipper//lib/flipper/expression/builder.rb#45
  def lt(object); end

  # source://flipper//lib/flipper/expression/builder.rb#50
  def lte(object); end

  # source://flipper//lib/flipper/expression/builder.rb#29
  def neq(object); end

  # source://flipper//lib/flipper/expression/builder.rb#29
  def not_equal(object); end

  # source://flipper//lib/flipper/expression/builder.rb#56
  def percentage_of_actors(object); end

  # source://flipper//lib/flipper/expression/builder.rb#12
  def remove(*expressions); end
end

# Public: A constant value like a "string", Number (1, 3.5), Boolean (true, false).
#
# Implements the same interface as Expression
#
# source://flipper//lib/flipper/expression/constant.rb#6
class Flipper::Expression::Constant
  include ::Flipper::Expression::Builder

  # @return [Constant] a new instance of Constant
  #
  # source://flipper//lib/flipper/expression/constant.rb#11
  def initialize(value); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression/constant.rb#19
  def ==(other); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/expression/constant.rb#19
  def eql?(other); end

  # source://flipper//lib/flipper/expression/constant.rb#15
  def evaluate(_ = T.unsafe(nil)); end

  # Returns the value of attribute value.
  #
  # source://flipper//lib/flipper/expression/constant.rb#9
  def value; end
end

# source://flipper//lib/flipper/expressions/all.rb#4
module Flipper::Expressions; end

# source://flipper//lib/flipper/expressions/all.rb#5
class Flipper::Expressions::All
  class << self
    # source://flipper//lib/flipper/expressions/all.rb#6
    def call(*args); end
  end
end

# source://flipper//lib/flipper/expressions/any.rb#3
class Flipper::Expressions::Any
  class << self
    # source://flipper//lib/flipper/expressions/any.rb#4
    def call(*args); end
  end
end

# source://flipper//lib/flipper/expressions/boolean.rb#3
class Flipper::Expressions::Boolean
  class << self
    # source://flipper//lib/flipper/expressions/boolean.rb#4
    def call(value); end
  end
end

# source://flipper//lib/flipper/expressions/comparable.rb#3
class Flipper::Expressions::Comparable
  class << self
    # source://flipper//lib/flipper/expressions/comparable.rb#8
    def call(left, right); end

    # @raise [NotImplementedError]
    #
    # source://flipper//lib/flipper/expressions/comparable.rb#4
    def operator; end
  end
end

# source://flipper//lib/flipper/expressions/duration.rb#3
class Flipper::Expressions::Duration
  class << self
    # source://flipper//lib/flipper/expressions/duration.rb#14
    def call(scalar, unit = T.unsafe(nil)); end
  end
end

# source://flipper//lib/flipper/expressions/duration.rb#4
Flipper::Expressions::Duration::SECONDS_PER = T.let(T.unsafe(nil), Hash)

# source://flipper//lib/flipper/expressions/equal.rb#3
class Flipper::Expressions::Equal < ::Flipper::Expressions::Comparable
  class << self
    # source://flipper//lib/flipper/expressions/equal.rb#4
    def operator; end
  end
end

# source://flipper//lib/flipper/expressions/greater_than.rb#3
class Flipper::Expressions::GreaterThan < ::Flipper::Expressions::Comparable
  class << self
    # source://flipper//lib/flipper/expressions/greater_than.rb#4
    def operator; end
  end
end

# source://flipper//lib/flipper/expressions/greater_than_or_equal_to.rb#3
class Flipper::Expressions::GreaterThanOrEqualTo < ::Flipper::Expressions::Comparable
  class << self
    # source://flipper//lib/flipper/expressions/greater_than_or_equal_to.rb#4
    def operator; end
  end
end

# source://flipper//lib/flipper/expressions/less_than.rb#3
class Flipper::Expressions::LessThan < ::Flipper::Expressions::Comparable
  class << self
    # source://flipper//lib/flipper/expressions/less_than.rb#4
    def operator; end
  end
end

# source://flipper//lib/flipper/expressions/less_than_or_equal_to.rb#3
class Flipper::Expressions::LessThanOrEqualTo < ::Flipper::Expressions::Comparable
  class << self
    # source://flipper//lib/flipper/expressions/less_than_or_equal_to.rb#4
    def operator; end
  end
end

# source://flipper//lib/flipper/expressions/not_equal.rb#3
class Flipper::Expressions::NotEqual < ::Flipper::Expressions::Comparable
  class << self
    # source://flipper//lib/flipper/expressions/not_equal.rb#4
    def operator; end
  end
end

# source://flipper//lib/flipper/expressions/now.rb#3
class Flipper::Expressions::Now
  class << self
    # source://flipper//lib/flipper/expressions/now.rb#4
    def call; end
  end
end

# source://flipper//lib/flipper/expressions/number.rb#3
class Flipper::Expressions::Number
  class << self
    # source://flipper//lib/flipper/expressions/number.rb#4
    def call(value); end
  end
end

# source://flipper//lib/flipper/expressions/percentage.rb#3
class Flipper::Expressions::Percentage
  class << self
    # source://flipper//lib/flipper/expressions/percentage.rb#4
    def call(value); end
  end
end

# source://flipper//lib/flipper/expressions/percentage_of_actors.rb#3
class Flipper::Expressions::PercentageOfActors
  class << self
    # source://flipper//lib/flipper/expressions/percentage_of_actors.rb#6
    def call(text, percentage, context: T.unsafe(nil)); end
  end
end

# source://flipper//lib/flipper/expressions/percentage_of_actors.rb#4
Flipper::Expressions::PercentageOfActors::SCALING_FACTOR = T.let(T.unsafe(nil), Integer)

# source://flipper//lib/flipper/expressions/property.rb#3
class Flipper::Expressions::Property
  class << self
    # source://flipper//lib/flipper/expressions/property.rb#4
    def call(key, context:); end
  end
end

# source://flipper//lib/flipper/expressions/random.rb#3
class Flipper::Expressions::Random
  class << self
    # source://flipper//lib/flipper/expressions/random.rb#4
    def call(max = T.unsafe(nil)); end
  end
end

# source://flipper//lib/flipper/expressions/string.rb#3
class Flipper::Expressions::String
  class << self
    # source://flipper//lib/flipper/expressions/string.rb#4
    def call(value); end
  end
end

# source://flipper//lib/flipper/expressions/time.rb#3
class Flipper::Expressions::Time
  class << self
    # source://flipper//lib/flipper/expressions/time.rb#4
    def call(value); end
  end
end

# source://flipper//lib/flipper/feature.rb#8
class Flipper::Feature
  # Internal: Initializes a new feature instance.
  #
  # name - The Symbol or String name of the feature.
  # adapter - The adapter that will be used to store details about this feature.
  #
  # options - The Hash of options.
  #           :instrumenter - What to use to instrument all the things.
  #
  # @return [Feature] a new instance of Feature
  #
  # source://flipper//lib/flipper/feature.rb#32
  def initialize(name, adapter, options = T.unsafe(nil)); end

  # Public: Get the adapter value for the actors gate.
  #
  # Returns Set of String flipper_id's.
  #
  # source://flipper//lib/flipper/feature.rb#319
  def actors_value; end

  # Private: The adapter this feature should use.
  #
  # source://flipper//lib/flipper/feature.rb#19
  def adapter; end

  # Public: Adds this feature.
  #
  # Returns the result of Adapter#add.
  #
  # source://flipper//lib/flipper/feature.rb#74
  def add; end

  # Public: Add an expression for a feature.
  #
  # expression_to_add - an expression or Hash that can be converted to an expression.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/feature.rb#137
  def add_expression(expression_to_add); end

  # Public: Get the adapter value for the boolean gate.
  #
  # Returns true or false.
  #
  # source://flipper//lib/flipper/feature.rb#326
  def boolean_value; end

  # Public: Clears all gate values for this feature.
  #
  # Returns the result of Adapter#clear.
  #
  # source://flipper//lib/flipper/feature.rb#95
  def clear; end

  # Public: Is the feature conditionally enabled for a given actor, group,
  # percentage of actors or percentage of the time.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/feature.rb#273
  def conditional?; end

  # Public: Disable this feature for something.
  #
  # Returns the result of Adapter#disable.
  #
  # source://flipper//lib/flipper/feature.rb#58
  def disable(thing = T.unsafe(nil)); end

  # Public: Disables a feature for an actor.
  #
  # actor - a Flipper::Types::Actor instance or an object that responds
  #         to flipper_id.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/feature.rb#212
  def disable_actor(actor); end

  # Public: Disables an expression for a feature.
  #
  # expression - an expression or Hash that can be converted to an expression.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/feature.rb#190
  def disable_expression; end

  # Public: Disables a feature for a group.
  #
  # group - a Flipper::Types::Group instance or a String or Symbol name of a
  #         registered group.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/feature.rb#222
  def disable_group(group); end

  # Public: Disables a feature for a percentage of actors.
  #
  # percentage - a Flipper::Types::PercentageOfTime instance or an object that
  #              responds to to_i.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/feature.rb#242
  def disable_percentage_of_actors; end

  # Public: Disables a feature a percentage of time.
  #
  # percentage - a Flipper::Types::PercentageOfTime instance or an object that
  #              responds to to_i.
  #
  # Returns result of disable.
  #
  # source://flipper//lib/flipper/feature.rb#232
  def disable_percentage_of_time; end

  # Public: Get the names of the disabled gates.
  #
  # Returns an Array of gate names.
  #
  # source://flipper//lib/flipper/feature.rb#369
  def disabled_gate_names; end

  # Public: Get the gates that have not been enabled for the feature.
  #
  # Returns an Array of Flipper::Gate instances.
  #
  # source://flipper//lib/flipper/feature.rb#362
  def disabled_gates; end

  # Public: Get groups not enabled for this feature.
  #
  # Returns Set of Flipper::Types::Group instances.
  #
  # source://flipper//lib/flipper/feature.rb#294
  def disabled_groups; end

  # Public: Enable this feature for something.
  #
  # Returns the result of Adapter#enable.
  #
  # source://flipper//lib/flipper/feature.rb#42
  def enable(thing = T.unsafe(nil)); end

  # Public: Enables a feature for an actor.
  #
  # actor - a Flipper::Types::Actor instance or an object that responds
  #         to flipper_id.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/feature.rb#151
  def enable_actor(actor); end

  # Public: Enables an expression_to_add for a feature.
  #
  # expression - an Expression or Hash that can be converted to an expression.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/feature.rb#128
  def enable_expression(expression); end

  # Public: Enables a feature for a group.
  #
  # group - a Flipper::Types::Group instance or a String or Symbol name of a
  #         registered group.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/feature.rb#161
  def enable_group(group); end

  # Public: Enables a feature for a percentage of actors.
  #
  # percentage - a Flipper::Types::PercentageOfTime instance or an object that
  #              responds to to_i.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/feature.rb#181
  def enable_percentage_of_actors(percentage); end

  # Public: Enables a feature a percentage of time.
  #
  # percentage - a Flipper::Types::PercentageOfTime instance or an object that
  #              responds to to_i.
  #
  # Returns result of enable.
  #
  # source://flipper//lib/flipper/feature.rb#171
  def enable_percentage_of_time(percentage); end

  # Public: Check if a feature is enabled for zero or more actors.
  #
  # Returns true if enabled, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/feature.rb#102
  def enabled?(*actors); end

  # Public: Get the names of the enabled gates.
  #
  # Returns an Array of gate names.
  #
  # source://flipper//lib/flipper/feature.rb#355
  def enabled_gate_names; end

  # Public: Get the gates that have been enabled for the feature.
  #
  # Returns an Array of Flipper::Gate instances.
  #
  # source://flipper//lib/flipper/feature.rb#347
  def enabled_gates; end

  # Public: Get groups enabled for this feature.
  #
  # Returns Set of Flipper::Types::Group instances.
  #
  # source://flipper//lib/flipper/feature.rb#286
  def enabled_groups; end

  # Public: Does this feature exist in the adapter.
  #
  # Returns true if exists in adapter else false.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/feature.rb#81
  def exist?; end

  # source://flipper//lib/flipper/feature.rb#298
  def expression; end

  # Public: Get the adapter value for the expression gate.
  #
  # Returns expression.
  #
  # source://flipper//lib/flipper/feature.rb#312
  def expression_value; end

  # Public: Find a gate by name.
  #
  # Returns a Flipper::Gate if found, nil if not.
  #
  # source://flipper//lib/flipper/feature.rb#415
  def gate(name); end

  # Public: Find the gate that protects an actor.
  #
  # actor - The object for which you would like to find a gate
  #
  # Returns a Flipper::Gate.
  # Raises Flipper::GateNotFound if no gate found for actor
  #
  # source://flipper//lib/flipper/feature.rb#425
  def gate_for(actor); end

  # Public: Returns the raw gate values stored by the adapter.
  #
  # source://flipper//lib/flipper/feature.rb#278
  def gate_values; end

  # Public: Get all the gates used to determine enabled/disabled for the feature.
  #
  # Returns an array of gates
  #
  # source://flipper//lib/flipper/feature.rb#397
  def gates; end

  # source://flipper//lib/flipper/feature.rb#401
  def gates_hash; end

  # Public: Get groups enabled for this feature.
  #
  # Returns Set of Flipper::Types::Group instances.
  #
  # source://flipper//lib/flipper/feature.rb#286
  def groups; end

  # Public: Get the adapter value for the groups gate.
  #
  # Returns Set of String group names.
  #
  # source://flipper//lib/flipper/feature.rb#305
  def groups_value; end

  # Public: Pretty string version for debugging.
  #
  # source://flipper//lib/flipper/feature.rb#384
  def inspect; end

  # Private: What is being used to instrument all the things.
  #
  # source://flipper//lib/flipper/feature.rb#22
  def instrumenter; end

  # Public: Name converted to value safe for adapter.
  #
  # source://flipper//lib/flipper/feature.rb#16
  def key; end

  # Public: The name of the feature.
  #
  # source://flipper//lib/flipper/feature.rb#13
  def name; end

  # Public: Is the feature fully disabled.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/feature.rb#267
  def off?; end

  # Public: Is the feature fully enabled.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/feature.rb#262
  def on?; end

  # Public: Get the adapter value for the percentage of actors gate.
  #
  # Returns Integer greater than or equal to 0 and less than or equal to 100.
  #
  # source://flipper//lib/flipper/feature.rb#333
  def percentage_of_actors_value; end

  # Public: Get the adapter value for the percentage of time gate.
  #
  # Returns Integer greater than or equal to 0 and less than or equal to 100.
  #
  # source://flipper//lib/flipper/feature.rb#340
  def percentage_of_time_value; end

  # Public: Removes this feature.
  #
  # Returns the result of Adapter#remove.
  #
  # source://flipper//lib/flipper/feature.rb#88
  def remove; end

  # Public: Remove an expression from a feature. Does nothing if no expression is
  # currently enabled.
  #
  # expression - an Expression or Hash that can be converted to an expression.
  #
  # Returns result of enable or nil (if no expression enabled).
  #
  # source://flipper//lib/flipper/feature.rb#200
  def remove_expression(expression_to_remove); end

  # Public: Returns state for feature (:on, :off, or :conditional).
  #
  # source://flipper//lib/flipper/feature.rb#247
  def state; end

  # Public: Identifier to be used in the url (a rails-ism).
  #
  # source://flipper//lib/flipper/feature.rb#379
  def to_param; end

  # Public: Returns the string representation of the feature.
  #
  # source://flipper//lib/flipper/feature.rb#374
  def to_s; end

  private

  # Private: Instrument a feature operation.
  #
  # source://flipper//lib/flipper/feature.rb#432
  def instrument(operation, initial_payload = T.unsafe(nil)); end
end

# Private: The name of feature instrumentation events.
#
# source://flipper//lib/flipper/feature.rb#10
Flipper::Feature::InstrumentationName = T.let(T.unsafe(nil), String)

# source://flipper//lib/flipper/feature_check_context.rb#2
class Flipper::FeatureCheckContext
  # @return [FeatureCheckContext] a new instance of FeatureCheckContext
  #
  # source://flipper//lib/flipper/feature_check_context.rb#13
  def initialize(feature_name:, values:, actors:); end

  # Public: The actors we want to know if a feature is enabled for.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#11
  def actors; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/feature_check_context.rb#19
  def actors?; end

  # Public: Convenience method for actors value value like Feature has.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#29
  def actors_value; end

  # Public: Convenience method for boolean value value like Feature has.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#34
  def boolean_value; end

  # Public: The name of the feature.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#4
  def feature_name; end

  # Public: Convenience method for groups value like Feature has.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#24
  def groups_value; end

  # Public: Convenience method for percentage of actors value like Feature has.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#39
  def percentage_of_actors_value; end

  # Public: Convenience method for percentage of time value like Feature has.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#44
  def percentage_of_time_value; end

  # Public: The GateValues instance that keeps track of the values for the
  # gates for the feature.
  #
  # source://flipper//lib/flipper/feature_check_context.rb#8
  def values; end
end

# source://flipper//lib/flipper/gate.rb#2
class Flipper::Gate
  # Public
  #
  # @return [Gate] a new instance of Gate
  #
  # source://flipper//lib/flipper/gate.rb#4
  def initialize(options = T.unsafe(nil)); end

  # source://flipper//lib/flipper/gate.rb#17
  def data_type; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gate.rb#21
  def enabled?(value); end

  # Public: Pretty string version for debugging.
  #
  # source://flipper//lib/flipper/gate.rb#47
  def inspect; end

  # Private: Name converted to value safe for adapter. Implemented in subclass.
  #
  # source://flipper//lib/flipper/gate.rb#13
  def key; end

  # Public: The name of the gate. Implemented in subclass.
  #
  # source://flipper//lib/flipper/gate.rb#8
  def name; end

  # Internal: Check if a gate is open for one or more actors. Implemented
  # in subclass.
  #
  # Returns true if gate open for any actor, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gate.rb#29
  def open?(actors, value, options = T.unsafe(nil)); end

  # Internal: Check if a gate is protects an actor. Implemented in subclass.
  #
  # Returns true if gate protects actor, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gate.rb#36
  def protects?(actor); end

  # Internal: Allows gate to wrap actor using one of the supported flipper
  # types so adapters always get someactor that responds to value.
  #
  # source://flipper//lib/flipper/gate.rb#42
  def wrap(actor); end
end

# Raised when gate can not be found for an actor.
#
# source://flipper//lib/flipper/errors.rb#6
class Flipper::GateNotFound < ::Flipper::Error
  # @return [GateNotFound] a new instance of GateNotFound
  #
  # source://flipper//lib/flipper/errors.rb#7
  def initialize(actor); end
end

# source://flipper//lib/flipper/gate_values.rb#5
class Flipper::GateValues
  # @return [GateValues] a new instance of GateValues
  #
  # source://flipper//lib/flipper/gate_values.rb#13
  def initialize(adapter_values); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gate_values.rb#22
  def ==(other); end

  # Returns the value of attribute actors.
  #
  # source://flipper//lib/flipper/gate_values.rb#7
  def actors; end

  # Returns the value of attribute boolean.
  #
  # source://flipper//lib/flipper/gate_values.rb#6
  def boolean; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gate_values.rb#22
  def eql?(other); end

  # Returns the value of attribute expression.
  #
  # source://flipper//lib/flipper/gate_values.rb#9
  def expression; end

  # Returns the value of attribute groups.
  #
  # source://flipper//lib/flipper/gate_values.rb#8
  def groups; end

  # Returns the value of attribute percentage_of_actors.
  #
  # source://flipper//lib/flipper/gate_values.rb#10
  def percentage_of_actors; end

  # Returns the value of attribute percentage_of_time.
  #
  # source://flipper//lib/flipper/gate_values.rb#11
  def percentage_of_time; end
end

# source://flipper//lib/flipper/gates/actor.rb#2
module Flipper::Gates; end

# source://flipper//lib/flipper/gates/actor.rb#4
class Flipper::Gates::Actor < ::Flipper::Gate
  # source://flipper//lib/flipper/gates/actor.rb#14
  def data_type; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/actor.rb#18
  def enabled?(value); end

  # Internal: Name converted to value safe for adapter.
  #
  # source://flipper//lib/flipper/gates/actor.rb#10
  def key; end

  # Internal: The name of the gate. Used for instrumentation, etc.
  #
  # source://flipper//lib/flipper/gates/actor.rb#5
  def name; end

  # Internal: Checks if the gate is open for an actor.
  #
  # Returns true if gate open for actor, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/actor.rb#25
  def open?(context); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/actor.rb#37
  def protects?(actor); end

  # source://flipper//lib/flipper/gates/actor.rb#33
  def wrap(actor); end
end

# source://flipper//lib/flipper/gates/boolean.rb#4
class Flipper::Gates::Boolean < ::Flipper::Gate
  # source://flipper//lib/flipper/gates/boolean.rb#14
  def data_type; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/boolean.rb#18
  def enabled?(value); end

  # Internal: Name converted to value safe for adapter.
  #
  # source://flipper//lib/flipper/gates/boolean.rb#10
  def key; end

  # Internal: The name of the gate. Used for instrumentation, etc.
  #
  # source://flipper//lib/flipper/gates/boolean.rb#5
  def name; end

  # Internal: Checks if the gate is open for a thing.
  #
  # Returns true if explicitly set to true, false if explicitly set to false
  # or nil if not explicitly set.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/boolean.rb#26
  def open?(context); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/boolean.rb#34
  def protects?(thing); end

  # source://flipper//lib/flipper/gates/boolean.rb#30
  def wrap(thing); end
end

# source://flipper//lib/flipper/gates/expression.rb#6
class Flipper::Gates::Expression < ::Flipper::Gate
  # source://flipper//lib/flipper/gates/expression.rb#16
  def data_type; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/expression.rb#20
  def enabled?(value); end

  # Internal: Name converted to value safe for adapter.
  #
  # source://flipper//lib/flipper/gates/expression.rb#12
  def key; end

  # Internal: The name of the gate. Used for instrumentation, etc.
  #
  # source://flipper//lib/flipper/gates/expression.rb#7
  def name; end

  # Internal: Checks if the gate is open for a thing.
  #
  # Returns true if gate open for thing, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/expression.rb#27
  def open?(context); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/expression.rb#41
  def protects?(thing); end

  # source://flipper//lib/flipper/gates/expression.rb#45
  def wrap(thing); end

  private

  # source://flipper//lib/flipper/gates/expression.rb#54
  def properties(actor); end
end

# Internal
#
# source://flipper//lib/flipper/gates/expression.rb#52
Flipper::Gates::Expression::DEFAULT_PROPERTIES = T.let(T.unsafe(nil), Hash)

# source://flipper//lib/flipper/gates/group.rb#4
class Flipper::Gates::Group < ::Flipper::Gate
  # source://flipper//lib/flipper/gates/group.rb#14
  def data_type; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/group.rb#18
  def enabled?(value); end

  # Internal: Name converted to value safe for adapter.
  #
  # source://flipper//lib/flipper/gates/group.rb#10
  def key; end

  # Internal: The name of the gate. Used for instrumentation, etc.
  #
  # source://flipper//lib/flipper/gates/group.rb#5
  def name; end

  # Internal: Checks if the gate is open for a thing.
  #
  # Returns true if gate open for thing, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/group.rb#25
  def open?(context); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/group.rb#39
  def protects?(thing); end

  # source://flipper//lib/flipper/gates/group.rb#35
  def wrap(thing); end
end

# source://flipper//lib/flipper/gates/percentage_of_actors.rb#6
class Flipper::Gates::PercentageOfActors < ::Flipper::Gate
  # source://flipper//lib/flipper/gates/percentage_of_actors.rb#16
  def data_type; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/percentage_of_actors.rb#20
  def enabled?(value); end

  # Internal: Name converted to value safe for adapter.
  #
  # source://flipper//lib/flipper/gates/percentage_of_actors.rb#12
  def key; end

  # Internal: The name of the gate. Used for instrumentation, etc.
  #
  # source://flipper//lib/flipper/gates/percentage_of_actors.rb#7
  def name; end

  # Internal: Checks if the gate is open for one or more actors.
  #
  # Returns true if gate open for any actors, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/percentage_of_actors.rb#32
  def open?(context); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/percentage_of_actors.rb#38
  def protects?(thing); end
end

# Private: this constant is used to support up to 3 decimal places
# in percentages.
#
# source://flipper//lib/flipper/gates/percentage_of_actors.rb#26
Flipper::Gates::PercentageOfActors::SCALING_FACTOR = T.let(T.unsafe(nil), Integer)

# source://flipper//lib/flipper/gates/percentage_of_time.rb#4
class Flipper::Gates::PercentageOfTime < ::Flipper::Gate
  # source://flipper//lib/flipper/gates/percentage_of_time.rb#14
  def data_type; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/percentage_of_time.rb#18
  def enabled?(value); end

  # Internal: Name converted to value safe for adapter.
  #
  # source://flipper//lib/flipper/gates/percentage_of_time.rb#10
  def key; end

  # Internal: The name of the gate. Used for instrumentation, etc.
  #
  # source://flipper//lib/flipper/gates/percentage_of_time.rb#5
  def name; end

  # Internal: Checks if the gate is open for a thing.
  #
  # Returns true if gate open for thing, false if not.
  #
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/percentage_of_time.rb#25
  def open?(context); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/gates/percentage_of_time.rb#29
  def protects?(thing); end
end

# A default implementation of `#flipper_id` for actors.
#
#   class User < Struct.new(:id)
#     include Flipper::Identifier
#   end
#
#   user = User.new(99)
#   Flipper.enable :some_feature, user
#   Flipper.enabled? :some_feature, user #=> true
#
# source://flipper//lib/flipper/identifier.rb#12
module Flipper::Identifier
  # source://flipper//lib/flipper/identifier.rb#13
  def flipper_id; end
end

# source://flipper//lib/flipper/instrumentation/log_subscriber.rb#7
module Flipper::Instrumentation; end

# source://flipper//lib/flipper/instrumentation/log_subscriber.rb#16
class Flipper::Instrumentation::LogSubscriber < ::ActiveSupport::LogSubscriber
  # Logs an adapter operation. If operation is for a feature, then that
  # feature is included in log output.
  #
  # Example Output
  #
  #   # log output for adapter operation with feature
  #   # Flipper feature(search) adapter(memory) enable  (0.0ms)  [ result=...]
  #
  #   # log output for adapter operation with no feature
  #   # Flipper adapter(memory) features (0.0ms)  [ result=... ]
  #
  # Returns nothing.
  #
  # source://flipper//lib/flipper/instrumentation/log_subscriber.rb#51
  def adapter_operation(event); end

  # Logs a feature operation.
  #
  # Example Output
  #
  #   flipper[:search].enabled?(user)
  #   # Flipper feature(search) enabled? false (1.2ms)  [ actors=... ]
  #
  # Returns nothing.
  #
  # source://flipper//lib/flipper/instrumentation/log_subscriber.rb#17
  def feature_operation(event); end

  # source://flipper//lib/flipper/instrumentation/log_subscriber.rb#71
  def logger; end

  private

  # source://flipper//lib/flipper/instrumentation/log_subscriber.rb#94
  def color_name(name); end

  class << self
    # source://flipper//lib/flipper/instrumentation/log_subscriber.rb#75
    def attach; end

    # source://flipper//lib/flipper/instrumentation/log_subscriber.rb#79
    def detach; end
  end
end

# Rails 7.1 changed the signature of this function.
#
# source://flipper//lib/flipper/instrumentation/log_subscriber.rb#87
Flipper::Instrumentation::LogSubscriber::COLOR_OPTIONS = T.let(T.unsafe(nil), TrueClass)

# Private: The namespace for all instrumented events.
#
# source://flipper//lib/flipper.rb#8
Flipper::InstrumentationNamespace = T.let(T.unsafe(nil), Symbol)

# source://flipper//lib/flipper/instrumenters/memory.rb#2
module Flipper::Instrumenters; end

# Instrumentor that is useful for tests as it stores each of the events that
# are instrumented.
#
# source://flipper//lib/flipper/instrumenters/memory.rb#5
class Flipper::Instrumenters::Memory
  # @return [Memory] a new instance of Memory
  #
  # source://flipper//lib/flipper/instrumenters/memory.rb#10
  def initialize; end

  # source://flipper//lib/flipper/instrumenters/memory.rb#33
  def event_by_name(name); end

  # Returns the value of attribute events.
  #
  # source://flipper//lib/flipper/instrumenters/memory.rb#8
  def events; end

  # source://flipper//lib/flipper/instrumenters/memory.rb#29
  def events_by_name(name); end

  # source://flipper//lib/flipper/instrumenters/memory.rb#14
  def instrument(name, payload = T.unsafe(nil)); end

  # source://flipper//lib/flipper/instrumenters/memory.rb#37
  def reset; end
end

# source://flipper//lib/flipper/instrumenters/memory.rb#6
class Flipper::Instrumenters::Memory::Event < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute payload
  #
  # @return [Object] the current value of payload
  def payload; end

  # Sets the attribute payload
  #
  # @param value [Object] the value to set the attribute payload to.
  # @return [Object] the newly set value
  def payload=(_); end

  # Returns the value of attribute result
  #
  # @return [Object] the current value of result
  def result; end

  # Sets the attribute result
  #
  # @param value [Object] the value to set the attribute result to.
  # @return [Object] the newly set value
  def result=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://flipper//lib/flipper/instrumenters/noop.rb#3
class Flipper::Instrumenters::Noop
  class << self
    # @yield [payload]
    #
    # source://flipper//lib/flipper/instrumenters/noop.rb#4
    def instrument(_name, payload = T.unsafe(nil)); end
  end
end

# Raised when an invalid value is set to a configuration property
#
# source://flipper//lib/flipper/errors.rb#16
class Flipper::InvalidConfigurationValue < ::Flipper::Error
  # @return [InvalidConfigurationValue] a new instance of InvalidConfigurationValue
  #
  # source://flipper//lib/flipper/errors.rb#17
  def initialize(message = T.unsafe(nil)); end
end

# source://flipper//lib/flipper/middleware/memoizer.rb#2
module Flipper::Middleware; end

# source://flipper//lib/flipper/middleware/memoizer.rb#3
class Flipper::Middleware::Memoizer
  # Public: Initializes an instance of the Memoizer middleware. Flipper must
  # be configured with a default instance or the flipper instance must be
  # setup in the env of the request. You can do this by using the
  # Flipper::Middleware::SetupEnv middleware.
  #
  # app - The app this middleware is included in.
  # opts - The Hash of options.
  #        :preload - Boolean to preload all features or Array of Symbol feature names to preload.
  #
  # Examples
  #
  #   use Flipper::Middleware::Memoizer
  #
  #   # using with preload_all features
  #   use Flipper::Middleware::Memoizer, preload: true
  #
  #   # using with preload specific features
  #   use Flipper::Middleware::Memoizer, preload: [:stats, :search, :some_feature]
  #
  #   # using with preload block that returns true/false
  #   use Flipper::Middleware::Memoizer, preload: ->(request) { !request.path.start_with?('/assets') }
  #
  #   # using with preload block that returns specific features
  #   use Flipper::Middleware::Memoizer, preload: ->(request) {
  #     request.path.starts_with?('/admin') ? [:stats, :search] : false
  #   }
  #
  # @return [Memoizer] a new instance of Memoizer
  #
  # source://flipper//lib/flipper/middleware/memoizer.rb#31
  def initialize(app, opts = T.unsafe(nil)); end

  # source://flipper//lib/flipper/middleware/memoizer.rb#41
  def call(env); end

  private

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/middleware/memoizer.rb#53
  def memoize?(request); end

  # source://flipper//lib/flipper/middleware/memoizer.rb#63
  def memoized_call(request); end
end

# source://flipper//lib/flipper/middleware/setup_env.rb#3
class Flipper::Middleware::SetupEnv
  # Public: Initializes an instance of the SetupEnv middleware. Allows for
  # lazy initialization of the flipper instance being set in the env by
  # providing a block.
  #
  # app - The app this middleware is included in.
  # flipper_or_block - The Flipper::DSL instance or a block that yields a
  #                    Flipper::DSL instance to use for all operations
  #                    (optional, default: Flipper).
  #
  # Examples
  #
  #   flipper = Flipper.new(...)
  #
  #   # using with a normal flipper instance
  #   use Flipper::Middleware::SetupEnv, flipper
  #
  #   # using with a block that yields a flipper instance
  #   use Flipper::Middleware::SetupEnv, lambda { Flipper.new(...) }
  #
  #   # using default configured Flipper instance
  #   Flipper.configure do |config|
  #     config.default { Flipper.new(...) }
  #   end
  #   use Flipper::Middleware::SetupEnv
  #
  # @return [SetupEnv] a new instance of SetupEnv
  #
  # source://flipper//lib/flipper/middleware/setup_env.rb#28
  def initialize(app, flipper_or_block = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://flipper//lib/flipper/middleware/setup_env.rb#39
  def call(env); end

  # source://flipper//lib/flipper/middleware/setup_env.rb#43
  def call!(env); end

  private

  # source://flipper//lib/flipper/middleware/setup_env.rb#50
  def flipper; end
end

# source://flipper//lib/flipper/model/active_record.rb#2
module Flipper::Model; end

# source://flipper//lib/flipper/model/active_record.rb#3
module Flipper::Model::ActiveRecord
  # The id of the record when used as an actor.
  #
  #   class User < ActiveRecord::Base
  #   end
  #
  #   user = User.first
  #   Flipper.enable :some_feature, user
  #   Flipper.enabled? :some_feature, user #=> true
  #
  # source://flipper//lib/flipper/model/active_record.rb#13
  def flipper_id; end

  # Properties used to evaluate expressions
  #
  # source://flipper//lib/flipper/model/active_record.rb#18
  def flipper_properties; end
end

# source://flipper//lib/flipper/poller.rb#7
class Flipper::Poller
  # @return [Poller] a new instance of Poller
  #
  # source://flipper//lib/flipper/poller.rb#25
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute adapter.
  #
  # source://flipper//lib/flipper/poller.rb#8
  def adapter; end

  # Returns the value of attribute interval.
  #
  # source://flipper//lib/flipper/poller.rb#8
  def interval; end

  # Returns the value of attribute last_synced_at.
  #
  # source://flipper//lib/flipper/poller.rb#8
  def last_synced_at; end

  # Returns the value of attribute mutex.
  #
  # source://flipper//lib/flipper/poller.rb#8
  def mutex; end

  # Returns the value of attribute pid.
  #
  # source://flipper//lib/flipper/poller.rb#8
  def pid; end

  # source://flipper//lib/flipper/poller.rb#59
  def run; end

  # source://flipper//lib/flipper/poller.rb#47
  def start; end

  # source://flipper//lib/flipper/poller.rb#52
  def stop; end

  # source://flipper//lib/flipper/poller.rb#73
  def sync; end

  # Returns the value of attribute thread.
  #
  # source://flipper//lib/flipper/poller.rb#8
  def thread; end

  private

  # source://flipper//lib/flipper/poller.rb#90
  def ensure_worker_running; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/poller.rb#86
  def forked?; end

  # source://flipper//lib/flipper/poller.rb#82
  def jitter; end

  # source://flipper//lib/flipper/poller.rb#113
  def reset; end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/poller.rb#109
  def thread_alive?; end

  class << self
    # source://flipper//lib/flipper/poller.rb#15
    def get(key, options = T.unsafe(nil)); end

    # source://flipper//lib/flipper/poller.rb#19
    def reset; end

    private

    # source://flipper//lib/flipper/poller.rb#10
    def instances; end
  end
end

# source://flipper//lib/flipper/poller.rb#23
Flipper::Poller::MINIMUM_POLL_INTERVAL = T.let(T.unsafe(nil), Integer)

# Internal: Used to store registry of groups by name.
#
# source://flipper//lib/flipper/registry.rb#5
class Flipper::Registry
  include ::Enumerable

  # @return [Registry] a new instance of Registry
  #
  # source://flipper//lib/flipper/registry.rb#21
  def initialize(source = T.unsafe(nil)); end

  # source://flipper//lib/flipper/registry.rb#34
  def add(key, value); end

  # source://flipper//lib/flipper/registry.rb#64
  def clear; end

  # source://flipper//lib/flipper/registry.rb#60
  def each(&block); end

  # source://flipper//lib/flipper/registry.rb#46
  def get(key); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/registry.rb#53
  def key?(key); end

  # source://flipper//lib/flipper/registry.rb#26
  def keys; end

  # source://flipper//lib/flipper/registry.rb#30
  def values; end
end

# source://flipper//lib/flipper/registry.rb#9
class Flipper::Registry::DuplicateKey < ::Flipper::Registry::Error; end

# source://flipper//lib/flipper/registry.rb#8
class Flipper::Registry::Error < ::StandardError; end

# source://flipper//lib/flipper/registry.rb#12
class Flipper::Registry::KeyNotFound < ::Flipper::Registry::Error
  # @return [KeyNotFound] a new instance of KeyNotFound
  #
  # source://flipper//lib/flipper/registry.rb#15
  def initialize(key); end

  # Public: The key that was not found
  #
  # source://flipper//lib/flipper/registry.rb#13
  def key; end
end

# source://flipper//lib/flipper/serializers/json.rb#4
module Flipper::Serializers; end

# source://flipper//lib/flipper/serializers/gzip.rb#6
class Flipper::Serializers::Gzip
  class << self
    # source://flipper//lib/flipper/serializers/gzip.rb#16
    def deserialize(source); end

    # source://flipper//lib/flipper/serializers/gzip.rb#7
    def serialize(source); end
  end
end

# source://flipper//lib/flipper/serializers/json.rb#5
class Flipper::Serializers::Json
  class << self
    # source://flipper//lib/flipper/serializers/json.rb#11
    def deserialize(source); end

    # source://flipper//lib/flipper/serializers/json.rb#6
    def serialize(source); end
  end
end

# Internal: Root class for all flipper types. You should never need to use this.
#
# source://flipper//lib/flipper/type.rb#3
class Flipper::Type
  # @return [Boolean]
  #
  # source://flipper//lib/flipper/type.rb#11
  def ==(other); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/type.rb#11
  def eql?(other); end

  # Returns the value of attribute value.
  #
  # source://flipper//lib/flipper/type.rb#9
  def value; end

  class << self
    # source://flipper//lib/flipper/type.rb#4
    def wrap(value_or_instance); end
  end
end

# source://flipper//lib/flipper/typecast.rb#6
class Flipper::Typecast
  class << self
    # source://flipper//lib/flipper/typecast.rb#76
    def features_hash(source); end

    # source://flipper//lib/flipper/typecast.rb#107
    def from_gzip(source); end

    # source://flipper//lib/flipper/typecast.rb#99
    def from_json(source); end

    # Internal: Convert value to a boolean.
    #
    # Returns true or false.
    #
    # source://flipper//lib/flipper/typecast.rb#17
    def to_boolean(value); end

    # Internal: Convert value to a float.
    #
    # Returns a Float representation of the value.
    # Raises ArgumentError if conversion is not possible.
    #
    # source://flipper//lib/flipper/typecast.rb#35
    def to_float(value); end

    # source://flipper//lib/flipper/typecast.rb#103
    def to_gzip(source); end

    # Internal: Convert value to an integer.
    #
    # Returns an Integer representation of the value.
    # Raises ArgumentError if conversion is not possible.
    #
    # source://flipper//lib/flipper/typecast.rb#25
    def to_integer(value); end

    # source://flipper//lib/flipper/typecast.rb#95
    def to_json(source); end

    # Internal: Convert value to a number.
    #
    # Returns a Integer or Float representation of the value.
    # Raises ArgumentError if conversion is not possible.
    #
    # source://flipper//lib/flipper/typecast.rb#45
    def to_number(value); end

    # source://flipper//lib/flipper/typecast.rb#45
    def to_percentage(value); end

    # Internal: Convert value to a set.
    #
    # Returns a Set representation of the value.
    # Raises ArgumentError if conversion is not possible.
    #
    # source://flipper//lib/flipper/typecast.rb#65
    def to_set(value); end
  end
end

# source://flipper//lib/flipper/typecast.rb#7
Flipper::Typecast::TRUTH_MAP = T.let(T.unsafe(nil), Hash)

# source://flipper//lib/flipper/types/actor.rb#2
module Flipper::Types; end

# source://flipper//lib/flipper/types/actor.rb#3
class Flipper::Types::Actor < ::Flipper::Type
  # @raise [ArgumentError]
  # @return [Actor] a new instance of Actor
  #
  # source://flipper//lib/flipper/types/actor.rb#11
  def initialize(actor); end

  # Returns the value of attribute actor.
  #
  # source://flipper//lib/flipper/types/actor.rb#9
  def actor; end

  # source://flipper//lib/flipper/types/actor.rb#27
  def method_missing(name, *args, **kwargs, &block); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/types/actor.rb#22
  def respond_to?(*args); end

  class << self
    # @return [Boolean]
    #
    # source://flipper//lib/flipper/types/actor.rb#4
    def wrappable?(actor); end
  end
end

# source://flipper//lib/flipper/types/boolean.rb#5
class Flipper::Types::Boolean < ::Flipper::Type
  # @return [Boolean] a new instance of Boolean
  #
  # source://flipper//lib/flipper/types/boolean.rb#6
  def initialize(value = T.unsafe(nil)); end
end

# source://flipper//lib/flipper/types/group.rb#3
class Flipper::Types::Group < ::Flipper::Type
  # @return [Group] a new instance of Group
  #
  # source://flipper//lib/flipper/types/group.rb#11
  def initialize(name, &block); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/types/group.rb#33
  def call_with_no_context?(block); end

  # @return [Boolean]
  #
  # source://flipper//lib/flipper/types/group.rb#24
  def match?(actor, context); end

  # Returns the value of attribute name.
  #
  # source://flipper//lib/flipper/types/group.rb#9
  def name; end

  class << self
    # source://flipper//lib/flipper/types/group.rb#4
    def wrap(group_or_name); end
  end
end

# source://flipper//lib/flipper/types/group.rb#32
Flipper::Types::Group::NO_PARAMS_IN_RUBY_3 = T.let(T.unsafe(nil), Array)

# source://flipper//lib/flipper/types/percentage.rb#5
class Flipper::Types::Percentage < ::Flipper::Type
  # @return [Percentage] a new instance of Percentage
  #
  # source://flipper//lib/flipper/types/percentage.rb#6
  def initialize(value); end
end

# source://flipper//lib/flipper/types/percentage_of_actors.rb#3
class Flipper::Types::PercentageOfActors < ::Flipper::Types::Percentage; end

# source://flipper//lib/flipper/types/percentage_of_time.rb#3
class Flipper::Types::PercentageOfTime < ::Flipper::Types::Percentage; end
