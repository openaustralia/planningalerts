# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `capistrano` gem.
# Please instead update this file by running `bin/tapioca gem capistrano`.

# Add custom log formatters
#
# Passing a hash or a array of hashes with custom log formatters.
#
# Add the following to your deploy.rb or in your ~/.caprc
#
# == Example:
#
#   capistrano_log_formatters = [
#     { :match => /command finished/,       :color => :hide,      :priority => 10, :prepend => "$$$" },
#     { :match => /executing command/,      :color => :blue,      :priority => 10, :style => :underscore, :timestamp => true },
#     { :match => /^transaction: commit$/,  :color => :magenta,   :priority => 10, :style => :blink },
#     { :match => /git/,                    :color => :white,     :priority => 20, :style => :reverse }
#   ]
#
#   log_formatter capistrano_log_formatters
#
# You can call log_formatter multiple times, with either a hash or an array of hashes.
#
# == Colors:
#
# :color can have the following values:
#
# * :hide  (hides the row completely)
# * :none
# * :black
# * :red
# * :green
# * :yellow
# * :blue
# * :magenta
# * :cyan
# * :white
#
# == Styles:
#
# :style can have the following values:
#
# * :bright
# * :dim
# * :underscore
# * :blink
# * :reverse
# * :hidden
#
#
#  == Text alterations
#
# :prepend gives static text to be prepended to the output
# :replace replaces the matched text in the output
# :timestamp adds the current time before the output
#
# source://capistrano//lib/capistrano/logger.rb#1
module Capistrano
  class << self
    # source://capistrano//lib/capistrano/extensions.rb#53
    def configuration(*args); end

    # Register the given module as a plugin with the given name. It will henceforth
    # be available via a proxy object on Configuration instances, accessible by
    # a method with the given name.
    #
    # source://capistrano//lib/capistrano/extensions.rb#20
    def plugin(name, mod); end

    # Unregister the plugin with the given name.
    #
    # source://capistrano//lib/capistrano/extensions.rb#43
    def remove_plugin(name); end
  end
end

# source://capistrano//lib/capistrano/callback.rb#2
class Capistrano::Callback
  # @return [Callback] a new instance of Callback
  #
  # source://capistrano//lib/capistrano/callback.rb#5
  def initialize(source, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/callback.rb#12
  def applies_to?(task); end

  # Returns the value of attribute except.
  #
  # source://capistrano//lib/capistrano/callback.rb#3
  def except; end

  # Returns the value of attribute only.
  #
  # source://capistrano//lib/capistrano/callback.rb#3
  def only; end

  # Returns the value of attribute options.
  #
  # source://capistrano//lib/capistrano/callback.rb#3
  def options; end

  # Returns the value of attribute source.
  #
  # source://capistrano//lib/capistrano/callback.rb#3
  def source; end
end

# source://capistrano//lib/capistrano/errors.rb#5
class Capistrano::CaptureError < ::Capistrano::Error; end

# This class encapsulates a single command to be executed on a set of remote
# machines, in parallel.
#
# source://capistrano//lib/capistrano/command.rb#9
class Capistrano::Command
  include ::Capistrano::Processable

  # Instantiates a new command object. The +command+ must be a string
  # containing the command to execute. +sessions+ is an array of Net::SSH
  # session instances, and +options+ must be a hash containing any of the
  # following keys:
  #
  # * +logger+: (optional), a Capistrano::Logger instance
  # * +data+: (optional), a string to be sent to the command via it's stdin
  # * +env+: (optional), a string or hash to be interpreted as environment
  #   variables that should be defined for this command invocation.
  #
  # @return [Command] a new instance of Command
  #
  # source://capistrano//lib/capistrano/command.rb#152
  def initialize(tree, sessions, options = T.unsafe(nil), &block); end

  # Returns the value of attribute options.
  #
  # source://capistrano//lib/capistrano/command.rb#137
  def options; end

  # Processes the command in parallel on all specified hosts. If the command
  # fails (non-zero return code) on any of the hosts, this will raise a
  # Capistrano::CommandError.
  #
  # source://capistrano//lib/capistrano/command.rb#168
  def process!; end

  # Returns the value of attribute sessions.
  #
  # source://capistrano//lib/capistrano/command.rb#137
  def sessions; end

  # Force the command to stop processing, by closing all open channels
  # associated with this command.
  #
  # source://capistrano//lib/capistrano/command.rb#190
  def stop!; end

  # Returns the value of attribute tree.
  #
  # source://capistrano//lib/capistrano/command.rb#137
  def tree; end

  private

  # prepare a space-separated sequence of variables assignments
  # intended to be prepended to a command, so the shell sets
  # the environment before running the command.
  # i.e.: options[:env] = {'PATH' => '/opt/ruby/bin:$PATH',
  #                        'TEST' => '( "quoted" )'}
  # environment returns:
  # "env TEST=(\ \"quoted\"\ ) PATH=/opt/ruby/bin:$PATH"
  #
  # source://capistrano//lib/capistrano/command.rb#291
  def environment; end

  # source://capistrano//lib/capistrano/command.rb#198
  def logger; end

  # source://capistrano//lib/capistrano/command.rb#202
  def open_channels; end

  # source://capistrano//lib/capistrano/command.rb#277
  def replace_placeholders(command, channel); end

  # source://capistrano//lib/capistrano/command.rb#267
  def request_pty_if_necessary(channel); end

  class << self
    # source://capistrano//lib/capistrano/command.rb#139
    def process(tree, sessions, options = T.unsafe(nil)); end
  end
end

# source://capistrano//lib/capistrano/command.rb#12
class Capistrano::Command::Tree
  include ::Enumerable

  # @return [Tree] a new instance of Tree
  # @yield [_self]
  # @yieldparam _self [Capistrano::Command::Tree] the object that the method was called on
  #
  # source://capistrano//lib/capistrano/command.rb#104
  def initialize(config); end

  # Returns the value of attribute branches.
  #
  # source://capistrano//lib/capistrano/command.rb#14
  def branches; end

  # source://capistrano//lib/capistrano/command.rb#118
  def branches_for(server); end

  # Returns the value of attribute configuration.
  #
  # source://capistrano//lib/capistrano/command.rb#13
  def configuration; end

  # @yield [fallback]
  #
  # source://capistrano//lib/capistrano/command.rb#130
  def each; end

  # source://capistrano//lib/capistrano/command.rb#114
  def else(command, &block); end

  # Returns the value of attribute fallback.
  #
  # source://capistrano//lib/capistrano/command.rb#15
  def fallback; end

  # source://capistrano//lib/capistrano/command.rb#110
  def when(condition, command, options = T.unsafe(nil), &block); end
end

# source://capistrano//lib/capistrano/command.rb#19
class Capistrano::Command::Tree::Branch
  # @return [Branch] a new instance of Branch
  #
  # source://capistrano//lib/capistrano/command.rb#23
  def initialize(command, options, callback); end

  # Returns the value of attribute callback.
  #
  # source://capistrano//lib/capistrano/command.rb#20
  def callback; end

  # Sets the attribute callback
  #
  # @param value the value to set the attribute callback to.
  #
  # source://capistrano//lib/capistrano/command.rb#20
  def callback=(_arg0); end

  # Returns the value of attribute command.
  #
  # source://capistrano//lib/capistrano/command.rb#20
  def command; end

  # Sets the attribute command
  #
  # @param value the value to set the attribute command to.
  #
  # source://capistrano//lib/capistrano/command.rb#20
  def command=(_arg0); end

  # Returns the value of attribute condition.
  #
  # source://capistrano//lib/capistrano/command.rb#20
  def condition; end

  # Sets the attribute condition
  #
  # @param value the value to set the attribute condition to.
  #
  # source://capistrano//lib/capistrano/command.rb#20
  def condition=(_arg0); end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/command.rb#30
  def last?; end

  # source://capistrano//lib/capistrano/command.rb#42
  def match(server); end

  # Returns the value of attribute options.
  #
  # source://capistrano//lib/capistrano/command.rb#21
  def options; end

  # source://capistrano//lib/capistrano/command.rb#38
  def skip!; end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/command.rb#34
  def skip?; end

  # source://capistrano//lib/capistrano/command.rb#46
  def to_s(parallel = T.unsafe(nil)); end
end

# source://capistrano//lib/capistrano/command.rb#55
class Capistrano::Command::Tree::ConditionBranch < ::Capistrano::Command::Tree::Branch
  # @return [ConditionBranch] a new instance of ConditionBranch
  #
  # source://capistrano//lib/capistrano/command.rb#86
  def initialize(configuration, condition, command, options, callback); end

  # Returns the value of attribute configuration.
  #
  # source://capistrano//lib/capistrano/command.rb#56
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  #
  # source://capistrano//lib/capistrano/command.rb#56
  def configuration=(_arg0); end

  # source://capistrano//lib/capistrano/command.rb#92
  def match(server); end
end

# source://capistrano//lib/capistrano/command.rb#58
class Capistrano::Command::Tree::ConditionBranch::Evaluator
  # @return [Evaluator] a new instance of Evaluator
  #
  # source://capistrano//lib/capistrano/command.rb#61
  def initialize(config, condition, server); end

  # Returns the value of attribute condition.
  #
  # source://capistrano//lib/capistrano/command.rb#59
  def condition; end

  # Returns the value of attribute configuration.
  #
  # source://capistrano//lib/capistrano/command.rb#59
  def configuration; end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/command.rb#67
  def in?(role); end

  # source://capistrano//lib/capistrano/command.rb#75
  def method_missing(sym, *args, &block); end

  # source://capistrano//lib/capistrano/command.rb#71
  def result; end

  # Returns the value of attribute server.
  #
  # source://capistrano//lib/capistrano/command.rb#59
  def server; end
end

# source://capistrano//lib/capistrano/command.rb#97
class Capistrano::Command::Tree::ElseBranch < ::Capistrano::Command::Tree::Branch
  # @return [ElseBranch] a new instance of ElseBranch
  #
  # source://capistrano//lib/capistrano/command.rb#98
  def initialize(command, options, callback); end
end

# source://capistrano//lib/capistrano/errors.rb#15
class Capistrano::CommandError < ::Capistrano::RemoteError; end

# Represents a specific Capistrano configuration. A Configuration instance
# may be used to load multiple recipe files, define and describe tasks,
# define roles, and set configuration variables.
#
# source://capistrano//lib/capistrano/configuration/alias_task.rb#2
class Capistrano::Configuration
  include ::Capistrano::Configuration::Variables
  include ::Capistrano::Configuration::Servers
  include ::Capistrano::Configuration::Roles
  include ::Capistrano::Configuration::Namespaces
  include ::Capistrano::Configuration::LogFormatters
  include ::Capistrano::Configuration::Loading
  include ::Capistrano::Configuration::Execution
  include ::Capistrano::Configuration::Connections
  include ::Capistrano::Configuration::AliasTask
  include ::Capistrano::Configuration::Actions::Invocation
  include ::Capistrano::Configuration::Actions::Inspect
  include ::Capistrano::Configuration::Actions::FileTransfer
  include ::Capistrano::Configuration::Callbacks
  extend ::Capistrano::Configuration::Loading::ClassMethods
  extend ::Capistrano::Configuration::Actions::Invocation::ClassMethods

  # @return [Configuration] a new instance of Configuration
  #
  # source://capistrano//lib/capistrano/configuration/callbacks.rb#16
  def initialize(*args); end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def debug; end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def debug=(_arg0); end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def dry_run; end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def dry_run=(_arg0); end

  # source://capistrano//lib/capistrano/configuration/callbacks.rb#21
  def invoke_task_directly(task); end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def logger; end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def logger=(_arg0); end

  # source://capistrano//lib/capistrano/configuration/variables.rb#118
  def method_missing(sym, *args, &block); end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def preserve_roles; end

  # The logger instance defined for this configuration.
  #
  # source://capistrano//lib/capistrano/configuration.rb#24
  def preserve_roles=(_arg0); end

  # source://capistrano//lib/capistrano/configuration/variables.rb#114
  def respond_to?(sym, include_priv = T.unsafe(nil)); end

  def respond_to_without_variables?(*_arg0); end

  protected

  # source://capistrano//lib/capistrano/configuration/execution.rb#137
  def invoke_task_directly_without_callbacks(task); end

  private

  # make the DSL easier to read when using lazy evaluation via lambdas
  def defer; end

  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#23
  def initialize_without_callbacks(*args); end

  # source://capistrano//lib/capistrano/configuration/execution.rb#14
  def initialize_without_connections(*args); end

  # source://capistrano//lib/capistrano/configuration/loading.rb#55
  def initialize_without_execution(*args); end

  # source://capistrano//lib/capistrano/configuration/connections.rb#79
  def initialize_without_invocation(*args); end

  # source://capistrano//lib/capistrano/configuration/namespaces.rb#27
  def initialize_without_loading(*args); end

  # source://capistrano//lib/capistrano/configuration/roles.rb#17
  def initialize_without_namespaces(*args); end

  # source://capistrano//lib/capistrano/configuration/variables.rb#98
  def initialize_without_roles(*args); end

  # source://capistrano//lib/capistrano/configuration.rb#26
  def initialize_without_variables(options = T.unsafe(nil)); end

  def method_missing_without_variables(*_arg0); end
end

# source://capistrano//lib/capistrano/configuration/actions/file_transfer.rb#5
module Capistrano::Configuration::Actions; end

# source://capistrano//lib/capistrano/configuration/actions/file_transfer.rb#6
module Capistrano::Configuration::Actions::FileTransfer
  # source://capistrano//lib/capistrano/configuration/actions/file_transfer.rb#33
  def download(from, to, options = T.unsafe(nil), &block); end

  # Get file remote_path from FIRST server targeted by
  # the current task and transfer it to local machine as path.
  #
  # get "#{deploy_to}/current/log/production.log", "log/production.log.web"
  #
  # source://capistrano//lib/capistrano/configuration/actions/file_transfer.rb#20
  def get(remote_path, path, options = T.unsafe(nil), &block); end

  # Store the given data at the given location on all servers targetted
  # by the current task. If <tt>:mode</tt> is specified it is used to
  # set the mode on the file.
  #
  # source://capistrano//lib/capistrano/configuration/actions/file_transfer.rb#11
  def put(data, path, options = T.unsafe(nil)); end

  # source://capistrano//lib/capistrano/configuration/actions/file_transfer.rb#37
  def transfer(direction, from, to, options = T.unsafe(nil), &block); end

  # source://capistrano//lib/capistrano/configuration/actions/file_transfer.rb#24
  def upload(from, to, options = T.unsafe(nil), &block); end
end

# source://capistrano//lib/capistrano/configuration/actions/inspect.rb#6
module Capistrano::Configuration::Actions::Inspect
  # Executes the given command on the first server targetted by the
  # current task, collects it's stdout into a string, and returns the
  # string. The command is invoked via #invoke_command.
  #
  # source://capistrano//lib/capistrano/configuration/actions/inspect.rb#32
  def capture(command, options = T.unsafe(nil)); end

  # Streams the result of the command from all servers that are the
  # target of the current task. All these streams will be joined into a
  # single one, so you can, say, watch 10 log files as though they were
  # one. Do note that this is quite expensive from a bandwidth
  # perspective, so use it with care.
  #
  # The command is invoked via #invoke_command.
  #
  # Usage:
  #
  #   desc "Run a tail on multiple log files at the same time"
  #   task :tail_fcgi, :roles => :app do
  #     stream "tail -f #{shared_path}/log/fastcgi.crash.log"
  #   end
  #
  # source://capistrano//lib/capistrano/configuration/actions/inspect.rb#22
  def stream(command, options = T.unsafe(nil)); end
end

# source://capistrano//lib/capistrano/configuration/actions/invocation.rb#6
module Capistrano::Configuration::Actions::Invocation
  mixes_in_class_methods ::Capistrano::Configuration::Actions::Invocation::ClassMethods

  # Merges the various default command options into the options hash and
  # returns the result. The default command options that are understand
  # are:
  #
  # * :default_environment: If the :env key already exists, the :env
  #   key is merged into default_environment and then added back into
  #   options.
  # * :default_shell: if the :shell key already exists, it will be used.
  #   Otherwise, if the :default_shell key exists in the configuration,
  #   it will be used. Otherwise, no :shell key is added.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#277
  def add_default_command_options(options); end

  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#296
  def continue_execution(tree); end

  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#305
  def continue_execution_for_branch(branch); end

  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#23
  def initialize_with_invocation(*args); end

  # Invokes the given command. If a +via+ key is given, it will be used
  # to determine what method to use to invoke the command. It defaults
  # to :run, but may be :sudo, or any other method that conforms to the
  # same interface as run and sudo.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#86
  def invoke_command(cmd, options = T.unsafe(nil), &block); end

  # Executes different commands in parallel. This is useful for commands
  # that need to be different on different hosts, but which could be
  # otherwise run in parallel.
  #
  # The +options+ parameter is currently unused.
  #
  # Example:
  #
  #   task :restart_everything do
  #     parallel do |session|
  #       session.when "in?(:app)", "/path/to/restart/mongrel"
  #       session.when "in?(:web)", "/path/to/restart/apache"
  #       session.when "in?(:db)", "/path/to/restart/mysql"
  #     end
  #   end
  #
  # Each command may have its own callback block, for capturing and
  # responding to output, with semantics identical to #run:
  #
  #   session.when "in?(:app)", "/path/to/restart/mongrel" do |ch, stream, data|
  #     # ch is the SSH channel for this command, used to send data
  #     #    back to the command (e.g. ch.send_data("password\n"))
  #     # stream is either :out or :err, for which stream the data arrived on
  #     # data is a string containing data sent from the remote command
  #   end
  #
  # Also, you can specify a fallback command, to use when none of the
  # conditions match a server:
  #
  #   session.else "/execute/something/else"
  #
  # The string specified as the first argument to +when+ may be any valid
  # Ruby code. It has access to the following variables and methods:
  #
  # * +in?(role)+ returns true if the server participates in the given role
  # * +server+ is the ServerDefinition object for the server. This can be
  #   used to get the host-name, etc.
  # * +configuration+ is the current Capistrano::Configuration object, which
  #   you can use to get the value of variables, etc.
  #
  # For example:
  #
  #   session.when "server.host =~ /app/", "/some/command"
  #   session.when "server.host == configuration[:some_var]", "/another/command"
  #   session.when "in?(:web) || in?(:app)", "/more/commands"
  #
  # See #run for a description of the valid +options+.
  #
  # @raise [ArgumentError]
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#76
  def parallel(options = T.unsafe(nil)); end

  # Execute the given command on all servers that are the target of the
  # current task. If a block is given, it is invoked for all output
  # generated by the command, and should accept three parameters: the SSH
  # channel (which may be used to send data back to the remote process),
  # the stream identifier (<tt>:err</tt> for stderr, and <tt>:out</tt> for
  # stdout), and the data that was received.
  #
  # The +options+ hash may include any of the following keys:
  #
  # * :hosts - this is either a string (for a single target host) or an array
  #   of strings, indicating which hosts the command should run on. By default,
  #   the hosts are determined from the task definition.
  # * :roles - this is either a string or symbol (for a single target role) or
  #   an array of strings or symbols, indicating which roles the command should
  #   run on. If :hosts is specified, :roles will be ignored.
  # * :only - specifies a condition limiting which hosts will be selected to
  #   run the command. This should refer to values set in the role definition.
  #   For example, if a role is defined with :primary => true, then you could
  #   select only hosts with :primary true by setting :only => { :primary => true }.
  # * :except - specifies a condition limiting which hosts will be selected to
  #   run the command. This is the inverse of :only (hosts that do _not_ match
  #   the condition will be selected).
  # * :on_no_matching_servers - if :continue, will continue to execute tasks if
  #   no matching servers are found for the host criteria. The default is to raise
  #   a NoMatchingServersError exception.
  # * :once - if true, only the first matching server will be selected. The default
  #   is false (all matching servers will be selected).
  # * :max_hosts - specifies the maximum number of hosts that should be selected
  #   at a time. If this value is less than the number of hosts that are selected
  #   to run, then the hosts will be run in groups of max_hosts. The default is nil,
  #   which indicates that there is no maximum host limit. Please note this does not
  #   limit the number of SSH channels that can be open, only the number of hosts upon
  #   which this will be called.
  # * :shell - says which shell should be used to invoke commands. This
  #   defaults to "sh". Setting this to false causes Capistrano to invoke
  #   the commands directly, without wrapping them in a shell invocation.
  # * :data - if not nil (the default), this should be a string that will
  #   be passed to the command's stdin stream.
  # * :pty - if true, a pseudo-tty will be allocated for each command. The
  #   default is false. Note that there are benefits and drawbacks both ways.
  #   Empirically, it appears that if a pty is allocated, the SSH server daemon
  #   will _not_ read user shell start-up scripts (e.g. bashrc, etc.). However,
  #   if a pty is _not_ allocated, some commands will refuse to run in
  #   interactive mode and will not prompt for (e.g.) passwords.
  # * :env - a hash of environment variable mappings that should be made
  #   available to the command. The keys should be environment variable names,
  #   and the values should be their corresponding values. The default is
  #   empty, but may be modified by changing the +default_environment+
  #   Capistrano variable.
  # * :eof - if true, the standard input stream will be closed after sending
  #   any data specified in the :data option. If false, the input stream is
  #   left open. The default is to close the input stream only if no block is
  #   passed.
  #
  # Note that if you set these keys in the +default_run_options+ Capistrano
  # variable, they will apply for all invocations of #run, #invoke_command,
  # and #parallel.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#149
  def run(cmd, options = T.unsafe(nil), &block); end

  # Executes a Capistrano::Command::Tree object. This is not for direct
  # use, but should instead be called indirectly, via #run or #parallel,
  # or #invoke_command.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#161
  def run_tree(tree, options = T.unsafe(nil)); end

  # Returns the command string used by capistrano to invoke a comamnd via
  # sudo.
  #
  #   run "#{sudo :as => 'bob'} mkdir /path/to/dir"
  #
  # It can also be invoked like #run, but executing the command via sudo.
  # This assumes that the sudo password (if required) is the same as the
  # password for logging in to the server.
  #
  #   sudo "mkdir /path/to/dir"
  #
  # Also, this method understands a <tt>:sudo</tt> configuration variable,
  # which (if specified) will be used as the full path to the sudo
  # executable on the remote machine:
  #
  #   set :sudo, "/opt/local/bin/sudo"
  #
  # If you know what you're doing, you can also set <tt>:sudo_prompt</tt>,
  # which tells capistrano which prompt sudo should use when asking for
  # a password. (This is so that capistrano knows what prompt to look for
  # in the output.) If you set :sudo_prompt to an empty string, Capistrano
  # will not send a preferred prompt.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#224
  def sudo(*parameters, &block); end

  # Returns a Proc object that defines the behavior of the sudo
  # callback. The returned Proc will defer to the +fallback+ argument
  # (which should also be a Proc) for any output it does not
  # explicitly handle.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#244
  def sudo_behavior_callback(fallback); end

  # Returns the prompt text to use with sudo
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#292
  def sudo_prompt; end

  private

  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#317
  def branches_for_servers(tree, servers); end

  class << self
    # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#7
    def included(base); end
  end
end

# source://capistrano//lib/capistrano/configuration/actions/invocation.rb#19
module Capistrano::Configuration::Actions::Invocation::ClassMethods
  # Returns the value of attribute default_io_proc.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#20
  def default_io_proc; end

  # Sets the attribute default_io_proc
  #
  # @param value the value to set the attribute default_io_proc to.
  #
  # source://capistrano//lib/capistrano/configuration/actions/invocation.rb#20
  def default_io_proc=(_arg0); end
end

# source://capistrano//lib/capistrano/configuration/alias_task.rb#3
module Capistrano::Configuration::AliasTask
  # Attempts to find the task at the given fully-qualified path, and
  # alias it. If arguments don't have correct task names, an ArgumentError
  # will be raised. If no such task exists, a Capistrano::NoSuchTaskError
  # will be raised.
  #
  # Usage:
  #
  #   alias_task :original_deploy, :deploy
  #
  # source://capistrano//lib/capistrano/configuration/alias_task.rb#13
  def alias_task(new_name, old_name); end
end

# source://capistrano//lib/capistrano/configuration/callbacks.rb#5
module Capistrano::Configuration::Callbacks
  # Defines a callback to be invoked after the given task. You must
  # specify the fully-qualified task name, both for the primary task, and
  # for the task(s) to be executed after. Alternatively, you can pass a
  # block to be executed after the given task.
  #
  #   after "deploy:update_code", :log_difference
  #   after :deploy, "custom:announce"
  #   after :deploy, :this, "then:this", "and:then:this"
  #   after :some_task do
  #     puts "an anonymous hook!"
  #   end
  #
  # This just provides a convenient interface to the more general #on method.
  #
  # source://capistrano//lib/capistrano/configuration/callbacks.rb#64
  def after(task_name, *args, &block); end

  # Defines a callback to be invoked before the given task. You must
  # specify the fully-qualified task name, both for the primary task, and
  # for the task(s) to be executed before. Alternatively, you can pass a
  # block to be executed before the given task.
  #
  #   before "deploy:update_code", :record_difference
  #   before :deploy, "custom:log_deploy"
  #   before :deploy, :this, "then:this", "and:then:this"
  #   before :some_task do
  #     puts "an anonymous hook!"
  #   end
  #
  # This just provides a convenient interface to the more general #on method.
  #
  # source://capistrano//lib/capistrano/configuration/callbacks.rb#45
  def before(task_name, *args, &block); end

  # The hash of callbacks that have been registered for this configuration
  #
  # source://capistrano//lib/capistrano/configuration/callbacks.rb#14
  def callbacks; end

  # Filters the given task name or names and attempts to replace deprecated tasks with their equivalents.
  #
  # source://capistrano//lib/capistrano/configuration/callbacks.rb#118
  def filter_deprecated_tasks(names); end

  # source://capistrano//lib/capistrano/configuration/callbacks.rb#16
  def initialize_with_callbacks(*args); end

  # source://capistrano//lib/capistrano/configuration/callbacks.rb#21
  def invoke_task_directly_with_callbacks(task); end

  # Defines one or more callbacks to be invoked in response to some event.
  # Capistrano currently understands the following events:
  #
  # * :before, triggered before a task is invoked
  # * :after, triggered after a task is invoked
  # * :start, triggered before a top-level task is invoked via the command-line
  # * :finish, triggered when a top-level task completes
  # * :load, triggered after all recipes have loaded
  # * :exit, triggered after all tasks have completed
  #
  # Specify the (fully-qualified) task names that you want invoked in
  # response to the event. Alternatively, you can specify a block to invoke
  # when the event is triggered. You can also pass a hash of options as the
  # last parameter, which may include either of two keys:
  #
  # * :only, should specify an array of task names. Restricts this callback
  #   so that it will only fire when the event applies to those tasks.
  # * :except, should specify an array of task names. Restricts this callback
  #   so that it will never fire when the event applies to those tasks.
  #
  # Usage:
  #
  #  on :before, "some:hook", "another:hook", :only => "deploy:update"
  #  on :after, "some:hook", :except => "deploy:create_symlink"
  #  on :before, "global:hook"
  #  on :after, :only => :deploy do
  #    puts "after deploy here"
  #  end
  #
  # source://capistrano//lib/capistrano/configuration/callbacks.rb#98
  def on(event, *args, &block); end

  # Trigger the named event for the named task. All associated callbacks
  # will be fired, in the order they were defined.
  #
  # source://capistrano//lib/capistrano/configuration/callbacks.rb#135
  def trigger(event, task = T.unsafe(nil)); end

  class << self
    # source://capistrano//lib/capistrano/configuration/callbacks.rb#6
    def included(base); end
  end
end

# source://capistrano//lib/capistrano/configuration/connections.rb#8
module Capistrano::Configuration::Connections
  # Used to force connections to be made to the current task's servers.
  # Connections are normally made lazily in Capistrano--you can use this
  # to force them open before performing some operation that might be
  # time-sensitive.
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#100
  def connect!(options = T.unsafe(nil)); end

  # Returns the object responsible for establishing new SSH connections.
  # The factory will respond to #connect_to, which can be used to
  # establish connections to servers defined via ServerDefinition objects.
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#107
  def connection_factory; end

  # Ensures that there are active sessions for each server in the list.
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#119
  def establish_connections_to(servers); end

  # Determines the set of servers within the current task's scope and
  # establishes connections to them, and then yields that list of
  # servers.
  #
  # @raise [ArgumentError]
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#182
  def execute_on_servers(options = T.unsafe(nil)); end

  # Indicate that the given server could not be connected to.
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#86
  def failed!(server); end

  # Determines the set of servers within the current task's scope
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#151
  def filter_servers(options = T.unsafe(nil)); end

  # Query whether previous connection attempts to the given server have
  # failed.
  #
  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#92
  def has_failed?(server); end

  # source://capistrano//lib/capistrano/configuration/connections.rb#79
  def initialize_with_connections(*args); end

  # A hash of the SSH sessions that are currently open and available.
  # Because sessions are constructed lazily, this will only contain
  # connections to those servers that have been the targets of one or more
  # executed tasks. Stored on a per-thread basis to improve thread-safety.
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#75
  def sessions; end

  # Destroys sessions for each server in the list.
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#139
  def teardown_connections_to(servers); end

  private

  # We establish the connection by creating a thread in a new method--this
  # prevents problems with the thread's scope seeing the wrong 'server'
  # variable if the thread just happens to take too long to start up.
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#223
  def establish_connection_to(server, failures = T.unsafe(nil)); end

  # source://capistrano//lib/capistrano/configuration/connections.rb#228
  def safely_establish_connection_to(server, thread, failures = T.unsafe(nil)); end

  class << self
    # source://capistrano//lib/capistrano/configuration/connections.rb#9
    def included(base); end
  end
end

# source://capistrano//lib/capistrano/configuration/connections.rb#14
class Capistrano::Configuration::Connections::DefaultConnectionFactory
  # @return [DefaultConnectionFactory] a new instance of DefaultConnectionFactory
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#15
  def initialize(options); end

  # source://capistrano//lib/capistrano/configuration/connections.rb#19
  def connect_to(server); end
end

# source://capistrano//lib/capistrano/configuration/connections.rb#24
class Capistrano::Configuration::Connections::GatewayConnectionFactory
  # @return [GatewayConnectionFactory] a new instance of GatewayConnectionFactory
  #
  # source://capistrano//lib/capistrano/configuration/connections.rb#25
  def initialize(gateway, options); end

  # source://capistrano//lib/capistrano/configuration/connections.rb#44
  def add_gateway(gateway); end

  # source://capistrano//lib/capistrano/configuration/connections.rb#58
  def connect_to(server); end

  # source://capistrano//lib/capistrano/configuration/connections.rb#66
  def gateway_for(server); end
end

# source://capistrano//lib/capistrano/configuration/execution.rb#5
module Capistrano::Configuration::Execution
  # Returns the TaskDefinition object for the currently executing task.
  # It returns nil if there is no task being executed.
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#79
  def current_task; end

  # Executes the task with the given name, without invoking any associated
  # callbacks.
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#86
  def execute_task(task); end

  # Attempts to locate the task at the given fully-qualified path, and
  # execute it. If no such task exists, a Capistrano::NoSuchTaskError will
  # be raised.
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#97
  def find_and_execute_task(path, hooks = T.unsafe(nil)); end

  # Specifies an on_rollback hook for the currently executing task. If this
  # or any subsequent task then fails, and a transaction is active, this
  # hook will be executed.
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#69
  def on_rollback(&block); end

  # The stack of tasks that have registered rollback handlers within the
  # current transaction. If this is nil, then there is no transaction
  # that is currently active.
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#35
  def rollback_requests; end

  # source://capistrano//lib/capistrano/configuration/execution.rb#39
  def rollback_requests=(rollback_requests); end

  # The call stack of the tasks. The currently executing task may inspect
  # this to see who its caller was. The current task is always the last
  # element of this stack.
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#27
  def task_call_frames; end

  # Invoke a set of tasks in a transaction. If any task fails (raises an
  # exception), all tasks executed within the transaction are inspected to
  # see if they have an associated on_rollback hook, and if so, that hook
  # is called.
  #
  # @raise [ArgumentError]
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#47
  def transaction; end

  # Returns true if there is a transaction currently active.
  #
  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#20
  def transaction?; end

  protected

  # Invokes the task's body directly, without setting up the call frame.
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#137
  def invoke_task_directly(task); end

  # source://capistrano//lib/capistrano/configuration/execution.rb#132
  def pop_task_call_frame; end

  # source://capistrano//lib/capistrano/configuration/execution.rb#127
  def push_task_call_frame(task); end

  # source://capistrano//lib/capistrano/configuration/execution.rb#109
  def rollback!; end

  private

  # source://capistrano//lib/capistrano/configuration/execution.rb#14
  def initialize_with_execution(*args); end

  class << self
    # source://capistrano//lib/capistrano/configuration/execution.rb#6
    def included(base); end
  end
end

# A struct for representing a single instance of an invoked task.
#
# source://capistrano//lib/capistrano/configuration/execution.rb#12
class Capistrano::Configuration::Execution::TaskCallFrame < ::Struct
  # Returns the value of attribute rollback
  #
  # @return [Object] the current value of rollback
  def rollback; end

  # Sets the attribute rollback
  #
  # @param value [Object] the value to set the attribute rollback to.
  # @return [Object] the newly set value
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#12
  def rollback=(_); end

  # Returns the value of attribute task
  #
  # @return [Object] the current value of task
  def task; end

  # Sets the attribute task
  #
  # @param value [Object] the value to set the attribute task to.
  # @return [Object] the newly set value
  #
  # source://capistrano//lib/capistrano/configuration/execution.rb#12
  def task=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://capistrano//lib/capistrano/configuration/loading.rb#3
module Capistrano::Configuration::Loading
  mixes_in_class_methods ::Capistrano::Configuration::Loading::ClassMethods

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#166
  def file_in_load_path?(file); end

  # Load a configuration file or string into this configuration.
  #
  # Usage:
  #
  #   load("recipe"):
  #     Look for and load the contents of 'recipe.rb' into this
  #     configuration.
  #
  #   load(:file => "recipe"):
  #     same as above
  #
  #   load(:string => "set :scm, :subversion"):
  #     Load the given string as a configuration specification.
  #
  #   load { ... }
  #     Load the block in the context of the configuration.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#78
  def load(*args, &block); end

  # The load paths used for locating recipe files.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#53
  def load_paths; end

  # Require another file. This is identical to the standard require method,
  # with the exception that it sets the receiver as the "current" configuration
  # so that third-party task bundles can include themselves relative to
  # that configuration.
  #
  # This is a bit more complicated than an initial review would seem to
  # necessitate, but the use case that complicates things is this: An
  # advanced user wants to embed capistrano, and needs to instantiate
  # more than one capistrano configuration at a time. They also want each
  # configuration to require a third-party capistrano extension. Using a
  # naive require implementation, this would allow the first configuration
  # to successfully load the third-party extension, but the require would
  # fail for the second configuration because the extension has already
  # been loaded.
  #
  # To work around this, we do a few things:
  #
  # 1. Each time a 'require' is invoked inside of a capistrano recipe,
  #    we remember the arguments (see "current_feature").
  # 2. Each time a 'load' is invoked inside of a capistrano recipe, and
  #    "current_feature" is not nil (meaning we are inside of a pending
  #    require) we remember the options (see "remember_load" and
  #    "recipes_per_feature").
  # 3. Each time a 'require' is invoked inside of a capistrano recipe,
  #    we check to see if this particular configuration has ever seen these
  #    arguments to require (see @loaded_features), and if not, we proceed
  #    as if the file had never been required. If the superclass' require
  #    returns false (meaning, potentially, that the file has already been
  #    required), then we look in the recipes_per_feature collection and
  #    load any remembered recipes from there.
  #
  # It's kind of a bear, but it works, and works transparently. Note that
  # a simpler implementation would just muck with $", allowing files to be
  # required multiple times, but that will cause warnings (and possibly
  # errors) if the file to be required contains constant definitions and
  # such, alongside (or instead of) capistrano recipe definitions.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#140
  def require(*args); end

  private

  # @raise [LoadError]
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#183
  def find_file_in_load_path(file); end

  # source://capistrano//lib/capistrano/configuration/loading.rb#55
  def initialize_with_loading(*args); end

  # Load a recipe from the named file. If +name+ is given, the file will
  # be reported using that name.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#178
  def load_from_file(file, name = T.unsafe(nil)); end

  # If a file is being required, the options associated with loading a
  # recipe are remembered in the recipes_per_feature archive under the
  # name of the file currently being required.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#197
  def remember_load(options); end

  class << self
    # source://capistrano//lib/capistrano/configuration/loading.rb#4
    def included(base); end
  end
end

# source://capistrano//lib/capistrano/configuration/loading.rb#10
module Capistrano::Configuration::Loading::ClassMethods
  # Used internally to determine what the current "feature" being
  # required is. This is used to track which files load which recipes
  # via require.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#39
  def current_feature; end

  # Used internally to specify the current file being required, so that
  # any recipes loaded by that file can be remembered. This allows
  # recipes loaded via require to be correctly reloaded in different
  # Configuration instances in the same Ruby instance.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#47
  def current_feature=(feature); end

  # Used by third-party task bundles to identify the capistrano
  # configuration that is loading them. Its return value is not reliable
  # in other contexts. If +require_config+ is not false, an exception
  # will be raised if the current configuration is not set.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#15
  def instance(require_config = T.unsafe(nil)); end

  # Used internally by Capistrano to specify the current configuration
  # before loading a third-party task bundle.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#25
  def instance=(config); end

  # Used internally by Capistrano to track which recipes have been loaded
  # via require, so that they may be successfully reloaded when require
  # is called again.
  #
  # source://capistrano//lib/capistrano/configuration/loading.rb#32
  def recipes_per_feature; end
end

# source://capistrano//lib/capistrano/configuration/log_formatters.rb#55
module Capistrano::Configuration::LogFormatters
  # source://capistrano//lib/capistrano/configuration/log_formatters.rb#66
  def default_log_formatters(formatters); end

  # source://capistrano//lib/capistrano/configuration/log_formatters.rb#70
  def disable_log_formatters; end

  # source://capistrano//lib/capistrano/configuration/log_formatters.rb#56
  def log_formatter(options); end
end

# source://capistrano//lib/capistrano/configuration/namespaces.rb#5
module Capistrano::Configuration::Namespaces
  # Returns the default task for this namespace. This will be +nil+ if
  # the namespace is at the top-level, and will otherwise return the
  # task named "default". If no such task exists, +nil+ will be returned.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#155
  def default_task; end

  # source://capistrano//lib/capistrano/configuration/namespaces.rb#106
  def define_task(task); end

  # Describe the next task to be defined. The given text will be attached to
  # the next task that is defined and used as its description.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#50
  def desc(text); end

  # Find the task with the given name, where name is the fully-qualified
  # name of the task. This will search into the namespaces and return
  # the referenced task, or nil if no such task can be found. If the name
  # refers to a namespace, the task in that namespace named "default"
  # will be returned instead, if one exists.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#118
  def find_task(name); end

  # Returns the fully-qualified name of this namespace, or nil if the
  # namespace is at the top-level.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#43
  def fully_qualified_name; end

  # The name of this namespace. Defaults to +nil+ for the top-level
  # namespace.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#15
  def name; end

  # Open a namespace in which to define new tasks. If the namespace was
  # defined previously, it will be reopened, otherwise a new namespace
  # will be created for the given name.
  #
  # @raise [ArgumentError]
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#65
  def namespace(name, &block); end

  # The hash of namespaces defined for this namespace.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#25
  def namespaces; end

  # Returns the value set by the last, pending "desc" call. If +reset+ is
  # not false, the value will be reset immediately afterwards.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#56
  def next_description(reset = T.unsafe(nil)); end

  # The parent namespace of this namespace. Returns +nil+ for the top-level
  # namespace.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#19
  def parent; end

  # Given a task name, this will search the current namespace, and all
  # parent namespaces, looking for a task that matches the name, exactly.
  # It returns the task, if found, or nil, if not.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#140
  def search_task(name); end

  # Describe a new task. If a description is active (see #desc), it is added
  # to the options under the <tt>:desc</tt> key. The new task is added to
  # the namespace.
  #
  # @raise [ArgumentError]
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#90
  def task(name, options = T.unsafe(nil), &block); end

  # Returns the tasks in this namespace as an array of TaskDefinition
  # objects. If a non-false parameter is given, all tasks in all
  # namespaces under this namespace will be returned as well.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#163
  def task_list(all = T.unsafe(nil)); end

  # The hash of tasks defined for this namespace.
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#22
  def tasks; end

  # Returns the top-level namespace (the one with no parent).
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#36
  def top; end

  private

  # source://capistrano//lib/capistrano/configuration/namespaces.rb#171
  def all_methods; end

  # source://capistrano//lib/capistrano/configuration/namespaces.rb#27
  def initialize_with_namespaces(*args); end

  class << self
    # source://capistrano//lib/capistrano/configuration/namespaces.rb#8
    def included(base); end
  end
end

# source://capistrano//lib/capistrano/configuration/namespaces.rb#6
Capistrano::Configuration::Namespaces::DEFAULT_TASK = T.let(T.unsafe(nil), Symbol)

# source://capistrano//lib/capistrano/configuration/namespaces.rb#175
class Capistrano::Configuration::Namespaces::Namespace
  include ::Capistrano::Configuration::AliasTask
  include ::Capistrano::Configuration::Namespaces

  # @return [Namespace] a new instance of Namespace
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#27
  def initialize(*args); end

  # source://capistrano//lib/capistrano/configuration/namespaces.rb#189
  def method_missing(sym, *args, &block); end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#185
  def respond_to?(sym, include_priv = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://capistrano//lib/capistrano/configuration/namespaces.rb#181
  def role(*args); end

  private

  # source://capistrano//lib/capistrano/configuration/namespaces.rb#176
  def initialize_without_namespaces(name, parent); end
end

# source://capistrano//lib/capistrano/configuration/roles.rb#6
module Capistrano::Configuration::Roles
  # source://capistrano//lib/capistrano/configuration/roles.rb#17
  def initialize_with_roles(*args); end

  # Define a new role and its associated servers. You must specify at least
  # one host for each role. Also, you can specify additional information
  # (in the form of a Hash) which can be used to more uniquely specify the
  # subset of servers specified by this specific role definition.
  #
  # Usage:
  #
  #   role :db,  "db1.example.com", "db2.example.com"
  #   role :db,  "master.example.com", :primary => true
  #   role :app, "app1.example.com", "app2.example.com"
  #
  # You can also encode the username and port number for each host in the
  # server string, if needed:
  #
  #   role :web,  "www@web1.example.com"
  #   role :file, "files.example.com:4144"
  #   role :db,   "admin@db3.example.com:1234"
  #
  # Lastly, username and port number may be passed as options, if that is
  # preferred; note that the options apply to all servers defined in
  # that call to "role":
  #
  #   role :web, "web2", "web3", :user => "www", :port => 2345
  #
  # source://capistrano//lib/capistrano/configuration/roles.rb#45
  def role(which, *args, &block); end

  # source://capistrano//lib/capistrano/configuration/roles.rb#78
  def role_names_for_host(host); end

  # The hash of roles defined for this configuration. Each entry in the
  # hash points to an array of server definitions that belong in that
  # role.
  #
  # source://capistrano//lib/capistrano/configuration/roles.rb#15
  def roles; end

  # An alternative way to associate servers with roles. If you have a server
  # that participates in multiple roles, this can be a DRYer way to describe
  # the relationships. Pass the host definition as the first parameter, and
  # the roles as the remaining parameters:
  #
  #   server "master.example.com", :web, :app
  #
  # Also, you can specify additional information
  # (in the form of a Hash) which can be used to more uniquely specify the
  # subset of servers specified by this specific definition:
  #
  #   server "master.example.com", :db, :primary => true
  #
  # @raise [ArgumentError]
  #
  # source://capistrano//lib/capistrano/configuration/roles.rb#72
  def server(host, *roles); end

  class << self
    # source://capistrano//lib/capistrano/configuration/roles.rb#7
    def included(base); end
  end
end

# source://capistrano//lib/capistrano/configuration/servers.rb#3
module Capistrano::Configuration::Servers
  # Attempts to find all defined servers that match the given criteria.
  # The options hash may include a :hosts option (which should specify
  # an array of host names or ServerDefinition instances), a :roles
  # option (specifying an array of roles), an :only option (specifying
  # a hash of key/value pairs that any matching server must match),
  # an :except option (like :only, but the inverse), and a
  # :skip_hostfilter option to ignore the HOSTFILTER environment variable
  # described below.
  #
  # Additionally, if the HOSTS environment variable is set, it will take
  # precedence over any other options. Similarly, the ROLES environment
  # variable will take precedence over other options. If both HOSTS and
  # ROLES are given, HOSTS wins.
  #
  # Yet additionally, if the HOSTFILTER environment variable is set, it
  # will limit the result to hosts found in that (comma-separated) list.
  #
  # If the HOSTROLEFILTER environment variable is set, it will limit the
  # result to hosts found in that (comma-separated) list of roles
  #
  # Usage:
  #
  #   # return all known servers
  #   servers = find_servers
  #
  #   # find all servers in the app role that are not exempted from
  #   # deployment
  #   servers = find_servers :roles => :app,
  #                :except => { :no_release => true }
  #
  #   # returns the given hosts, translated to ServerDefinition objects
  #   servers = find_servers :hosts => "jamis@example.host.com"
  #
  # source://capistrano//lib/capistrano/configuration/servers.rb#44
  def find_servers(options = T.unsafe(nil)); end

  # Identifies all servers that the given task should be executed on.
  # The options hash accepts the same arguments as #find_servers, and any
  # preexisting options there will take precedence over the options in
  # the task.
  #
  # source://capistrano//lib/capistrano/configuration/servers.rb#8
  def find_servers_for_task(task, options = T.unsafe(nil)); end

  protected

  # source://capistrano//lib/capistrano/configuration/servers.rb#111
  def build_list(list); end

  # source://capistrano//lib/capistrano/configuration/servers.rb#78
  def filter_server_list(servers); end

  # source://capistrano//lib/capistrano/configuration/servers.rb#102
  def role_list_from(roles); end

  # source://capistrano//lib/capistrano/configuration/servers.rb#96
  def server_list_from(hosts); end
end

# source://capistrano//lib/capistrano/configuration/variables.rb#5
module Capistrano::Configuration::Variables
  # source://capistrano//lib/capistrano/configuration/variables.rb#94
  def [](variable); end

  # Set a variable to the given value.
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#20
  def []=(variable, *args, &block); end

  # Returns true if the variable has been defined, and false otherwise.
  #
  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#50
  def exists?(variable); end

  # Access a named variable. If the value of the variable responds_to? :call,
  # #call will be invoked (without parameters) and the return value cached
  # and returned.
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#72
  def fetch(variable, *args); end

  # source://capistrano//lib/capistrano/configuration/variables.rb#118
  def method_missing_with_variables(sym, *args, &block); end

  # If the variable was originally a proc value, it will be reset to it's
  # original proc value. Otherwise, this method does nothing. It returns
  # true if the variable was actually reset.
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#57
  def reset!(variable); end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#114
  def respond_to_with_variables?(sym, include_priv = T.unsafe(nil)); end

  # Set a variable to the given value.
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#20
  def set(variable, *args, &block); end

  # Removes any trace of the given variable.
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#41
  def unset(variable); end

  # The hash of variables that have been defined in this configuration
  # instance.
  #
  # source://capistrano//lib/capistrano/configuration/variables.rb#17
  def variables; end

  private

  # source://capistrano//lib/capistrano/configuration/variables.rb#98
  def initialize_with_variables(*args); end

  # source://capistrano//lib/capistrano/configuration/variables.rb#109
  def protect(variable); end

  class << self
    # source://capistrano//lib/capistrano/configuration/variables.rb#6
    def included(base); end
  end
end

# source://capistrano//lib/capistrano/errors.rb#13
class Capistrano::ConnectionError < ::Capistrano::RemoteError; end

# Holds the set of registered plugins, keyed by name (where the name is a
# symbol).
#
# source://capistrano//lib/capistrano/extensions.rb#15
Capistrano::EXTENSIONS = T.let(T.unsafe(nil), Hash)

# source://capistrano//lib/capistrano/errors.rb#3
class Capistrano::Error < ::RuntimeError; end

# source://capistrano//lib/capistrano/extensions.rb#2
class Capistrano::ExtensionProxy
  # @return [ExtensionProxy] a new instance of ExtensionProxy
  #
  # source://capistrano//lib/capistrano/extensions.rb#3
  def initialize(config, mod); end

  # source://capistrano//lib/capistrano/extensions.rb#8
  def method_missing(sym, *args, &block); end
end

# source://capistrano//lib/capistrano/errors.rb#17
class Capistrano::LocalArgumentError < ::Capistrano::Error; end

# source://capistrano//lib/capistrano/logger.rb#2
class Capistrano::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://capistrano//lib/capistrano/logger.rb#78
  def initialize(options = T.unsafe(nil)); end

  # source://capistrano//lib/capistrano/logger.rb#92
  def close; end

  # source://capistrano//lib/capistrano/logger.rb#153
  def debug(message, line_prefix = T.unsafe(nil)); end

  # Returns the value of attribute device.
  #
  # source://capistrano//lib/capistrano/logger.rb#3
  def device; end

  # Sets the attribute device
  #
  # @param value the value to set the attribute device to.
  #
  # source://capistrano//lib/capistrano/logger.rb#3
  def device=(_arg0); end

  # Returns the value of attribute disable_formatters.
  #
  # source://capistrano//lib/capistrano/logger.rb#3
  def disable_formatters; end

  # Sets the attribute disable_formatters
  #
  # @param value the value to set the attribute disable_formatters to.
  #
  # source://capistrano//lib/capistrano/logger.rb#3
  def disable_formatters=(_arg0); end

  # source://capistrano//lib/capistrano/logger.rb#161
  def format(message, color, style, nl = T.unsafe(nil)); end

  # source://capistrano//lib/capistrano/logger.rb#145
  def important(message, line_prefix = T.unsafe(nil)); end

  # source://capistrano//lib/capistrano/logger.rb#149
  def info(message, line_prefix = T.unsafe(nil)); end

  # Returns the value of attribute level.
  #
  # source://capistrano//lib/capistrano/logger.rb#3
  def level; end

  # Sets the attribute level
  #
  # @param value the value to set the attribute level to.
  #
  # source://capistrano//lib/capistrano/logger.rb#3
  def level=(_arg0); end

  # source://capistrano//lib/capistrano/logger.rb#96
  def log(level, message, line_prefix = T.unsafe(nil)); end

  # source://capistrano//lib/capistrano/logger.rb#157
  def trace(message, line_prefix = T.unsafe(nil)); end

  class << self
    # source://capistrano//lib/capistrano/logger.rb#67
    def add_formatter(options); end

    # source://capistrano//lib/capistrano/logger.rb#55
    def default_formatters; end

    # source://capistrano//lib/capistrano/logger.rb#59
    def default_formatters=(defaults = T.unsafe(nil)); end

    # source://capistrano//lib/capistrano/logger.rb#72
    def sorted_formatters; end
  end
end

# source://capistrano//lib/capistrano/logger.rb#12
Capistrano::Logger::COLORS = T.let(T.unsafe(nil), Hash)

# source://capistrano//lib/capistrano/logger.rb#7
Capistrano::Logger::DEBUG = T.let(T.unsafe(nil), Integer)

# source://capistrano//lib/capistrano/logger.rb#5
Capistrano::Logger::IMPORTANT = T.let(T.unsafe(nil), Integer)

# source://capistrano//lib/capistrano/logger.rb#6
Capistrano::Logger::INFO = T.let(T.unsafe(nil), Integer)

# source://capistrano//lib/capistrano/logger.rb#10
Capistrano::Logger::MAX_LEVEL = T.let(T.unsafe(nil), Integer)

# source://capistrano//lib/capistrano/logger.rb#24
Capistrano::Logger::STYLES = T.let(T.unsafe(nil), Hash)

# source://capistrano//lib/capistrano/logger.rb#8
Capistrano::Logger::TRACE = T.let(T.unsafe(nil), Integer)

# source://capistrano//lib/capistrano/errors.rb#7
class Capistrano::NoMatchingServersError < ::Capistrano::Error; end

# source://capistrano//lib/capistrano/errors.rb#6
class Capistrano::NoSuchTaskError < ::Capistrano::Error; end

# source://capistrano//lib/capistrano/callback.rb#23
class Capistrano::ProcCallback < ::Capistrano::Callback
  # source://capistrano//lib/capistrano/callback.rb#24
  def call; end
end

# source://capistrano//lib/capistrano/processable.rb#2
module Capistrano::Processable
  # source://capistrano//lib/capistrano/processable.rb#40
  def ensure_each_session; end

  # source://capistrano//lib/capistrano/processable.rb#16
  def process_iteration(wait = T.unsafe(nil), &block); end
end

# source://capistrano//lib/capistrano/processable.rb#3
module Capistrano::Processable::SessionAssociation
  # Returns the value of attribute session.
  #
  # source://capistrano//lib/capistrano/processable.rb#13
  def session; end

  # Sets the attribute session
  #
  # @param value the value to set the attribute session to.
  #
  # source://capistrano//lib/capistrano/processable.rb#13
  def session=(_arg0); end

  class << self
    # source://capistrano//lib/capistrano/processable.rb#4
    def on(exception, session); end
  end
end

# source://capistrano//lib/capistrano/errors.rb#9
class Capistrano::RemoteError < ::Capistrano::Error
  # Returns the value of attribute hosts.
  #
  # source://capistrano//lib/capistrano/errors.rb#10
  def hosts; end

  # Sets the attribute hosts
  #
  # @param value the value to set the attribute hosts to.
  #
  # source://capistrano//lib/capistrano/errors.rb#10
  def hosts=(_arg0); end
end

# source://capistrano//lib/capistrano/role.rb#2
class Capistrano::Role
  include ::Enumerable

  # @return [Role] a new instance of Role
  #
  # source://capistrano//lib/capistrano/role.rb#5
  def initialize(*list); end

  # source://capistrano//lib/capistrano/role.rb#15
  def <<(*list); end

  # source://capistrano//lib/capistrano/role.rb#36
  def clear; end

  # source://capistrano//lib/capistrano/role.rb#11
  def each(&block); end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/role.rb#32
  def empty?; end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/role.rb#41
  def include?(server); end

  # source://capistrano//lib/capistrano/role.rb#15
  def push(*list); end

  # source://capistrano//lib/capistrano/role.rb#27
  def servers; end

  # source://capistrano//lib/capistrano/role.rb#27
  def to_ary; end

  protected

  # Attribute reader for the cached results of executing the blocks in turn
  #
  # source://capistrano//lib/capistrano/role.rb#73
  def dynamic_servers; end

  class << self
    # Turns a list, or something resembling a list, into a properly-formatted
    # ServerDefinition list. Keep an eye on this one -- it's entirely too
    # magical for its own good. In particular, if ServerDefinition ever inherits
    # from Array, this will break.
    #
    # source://capistrano//lib/capistrano/role.rb#87
    def wrap_list(*list); end

    # Wraps a string in a ServerDefinition, if it isn't already.
    # This and wrap_list should probably go in ServerDefinition in some form.
    #
    # source://capistrano//lib/capistrano/role.rb#79
    def wrap_server(item, options); end
  end
end

# This is the combination of a block, a hash of options, and a cached value.
#
# source://capistrano//lib/capistrano/role.rb#48
class Capistrano::Role::DynamicServerList
  # @return [DynamicServerList] a new instance of DynamicServerList
  #
  # source://capistrano//lib/capistrano/role.rb#49
  def initialize(block, options); end

  # Clear the cached value
  #
  # source://capistrano//lib/capistrano/role.rb#66
  def reset!; end

  # Convert to a list of ServerDefinitions
  #
  # source://capistrano//lib/capistrano/role.rb#57
  def to_ary; end
end

# A helper class for dealing with SSH connections.
#
# source://capistrano//lib/capistrano/ssh.rb#5
class Capistrano::SSH
  class << self
    # An abstraction to make it possible to connect to the server via public key
    # without prompting for the password. If the public key authentication fails
    # this will fall back to password authentication.
    #
    # +server+ must be an instance of ServerDefinition.
    #
    # If a block is given, the new session is yielded to it, otherwise the new
    # session is returned.
    #
    # If an :ssh_options key exists in +options+, it is passed to the Net::SSH
    # constructor. Values in +options+ are then merged into it, and any
    # connection information in +server+ is added last, so that +server+ info
    # takes precedence over +options+, which takes precendence over ssh_options.
    #
    # source://capistrano//lib/capistrano/ssh.rb#33
    def connect(server, options = T.unsafe(nil)); end

    # Abstracts the logic for establishing an SSH connection (which includes
    # testing for connection failures and retrying with a password, and so forth,
    # mostly made complicated because of the fact that some of these variables
    # might be lazily evaluated and try to do something like prompt the user,
    # which should only happen when absolutely necessary.
    #
    # This will yield the hostname, username, and a hash of connection options
    # to the given block, which should return a new connection.
    #
    # source://capistrano//lib/capistrano/ssh.rb#48
    def connection_strategy(server, options = T.unsafe(nil), &block); end
  end
end

# Patch an accessor onto an SSH connection so that we can record the server
# definition object that defines the connection. This is useful because
# the gateway returns connections whose "host" is 127.0.0.1, instead of
# the host on the other side of the tunnel.
#
# source://capistrano//lib/capistrano/ssh.rb#10
module Capistrano::SSH::Server
  # Returns the value of attribute xserver.
  #
  # source://capistrano//lib/capistrano/ssh.rb#17
  def xserver; end

  # Sets the attribute xserver
  #
  # @param value the value to set the attribute xserver to.
  #
  # source://capistrano//lib/capistrano/ssh.rb#17
  def xserver=(_arg0); end

  class << self
    # source://capistrano//lib/capistrano/ssh.rb#11
    def apply_to(connection, server); end
  end
end

# source://capistrano//lib/capistrano/server_definition.rb#2
class Capistrano::ServerDefinition
  include ::Comparable

  # @return [ServerDefinition] a new instance of ServerDefinition
  #
  # source://capistrano//lib/capistrano/server_definition.rb#15
  def initialize(string, options = T.unsafe(nil)); end

  # source://capistrano//lib/capistrano/server_definition.rb#27
  def <=>(server); end

  # Redefined, so that Array#uniq will work to remove duplicate server
  # definitions, based solely on their host names.
  #
  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/server_definition.rb#33
  def ==(server); end

  # Redefined, so that Array#uniq will work to remove duplicate server
  # definitions, based solely on their host names.
  #
  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/server_definition.rb#33
  def eql?(server); end

  # Redefined, so that Array#uniq will work to remove duplicate server
  # definitions, based on their connection information.
  #
  # source://capistrano//lib/capistrano/server_definition.rb#43
  def hash; end

  # Returns the value of attribute host.
  #
  # source://capistrano//lib/capistrano/server_definition.rb#5
  def host; end

  # Returns the value of attribute options.
  #
  # source://capistrano//lib/capistrano/server_definition.rb#8
  def options; end

  # Returns the value of attribute port.
  #
  # source://capistrano//lib/capistrano/server_definition.rb#7
  def port; end

  # source://capistrano//lib/capistrano/server_definition.rb#47
  def to_s; end

  # Returns the value of attribute user.
  #
  # source://capistrano//lib/capistrano/server_definition.rb#6
  def user; end

  class << self
    # The default user name to use when a user name is not explicitly provided
    #
    # source://capistrano//lib/capistrano/server_definition.rb#11
    def default_user; end
  end
end

# source://capistrano//lib/capistrano/callback.rb#29
class Capistrano::TaskCallback < ::Capistrano::Callback
  # @return [TaskCallback] a new instance of TaskCallback
  #
  # source://capistrano//lib/capistrano/callback.rb#32
  def initialize(config, source, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/callback.rb#41
  def applies_to?(task); end

  # source://capistrano//lib/capistrano/callback.rb#37
  def call; end

  # Returns the value of attribute config.
  #
  # source://capistrano//lib/capistrano/callback.rb#30
  def config; end
end

# source://capistrano//lib/capistrano/task_definition.rb#5
class Capistrano::TaskDefinition
  # @return [TaskDefinition] a new instance of TaskDefinition
  #
  # source://capistrano//lib/capistrano/task_definition.rb#9
  def initialize(name, namespace, options = T.unsafe(nil), &block); end

  # Returns the value of attribute body.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#7
  def body; end

  # Returns the first sentence of the full description. If +max_length+ is
  # given, the result will be truncated if it is longer than +max_length+,
  # and an ellipsis appended.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#60
  def brief_description(max_length = T.unsafe(nil)); end

  # Indicates whether the task wants to continue, even if a server has failed
  # previously
  #
  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/task_definition.rb#72
  def continue_on_error?; end

  # Returns the value of attribute desc.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#7
  def desc; end

  # Returns the description for this task, with newlines collapsed and
  # whitespace stripped. Returns the empty string if there is no
  # description for this task.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#37
  def description(rebuild = T.unsafe(nil)); end

  # Returns the task's fully-qualified name, including the namespace
  #
  # source://capistrano//lib/capistrano/task_definition.rb#19
  def fully_qualified_name; end

  # Returns the value of attribute max_hosts.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#7
  def max_hosts; end

  # Returns the value of attribute name.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#7
  def name; end

  # @raise [ArgumentError]
  #
  # source://capistrano//lib/capistrano/task_definition.rb#29
  def name=(value); end

  # Returns the value of attribute namespace.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#7
  def namespace; end

  # Returns the value of attribute on_error.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#7
  def on_error; end

  # Returns the value of attribute options.
  #
  # source://capistrano//lib/capistrano/task_definition.rb#7
  def options; end
end

# source://capistrano//lib/capistrano/transfer.rb#7
class Capistrano::Transfer
  include ::Capistrano::Processable

  # @return [Transfer] a new instance of Transfer
  #
  # source://capistrano//lib/capistrano/transfer.rb#26
  def initialize(direction, from, to, sessions, options = T.unsafe(nil), &block); end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/transfer.rb#70
  def active?; end

  # Returns the value of attribute callback.
  #
  # source://capistrano//lib/capistrano/transfer.rb#16
  def callback; end

  # Returns the value of attribute direction.
  #
  # source://capistrano//lib/capistrano/transfer.rb#19
  def direction; end

  # Returns the value of attribute from.
  #
  # source://capistrano//lib/capistrano/transfer.rb#20
  def from; end

  # Returns the value of attribute logger.
  #
  # source://capistrano//lib/capistrano/transfer.rb#23
  def logger; end

  # source://capistrano//lib/capistrano/transfer.rb#74
  def operation; end

  # Returns the value of attribute options.
  #
  # source://capistrano//lib/capistrano/transfer.rb#15
  def options; end

  # source://capistrano//lib/capistrano/transfer.rb#42
  def process!; end

  # source://capistrano//lib/capistrano/transfer.rb#78
  def sanitized_from; end

  # source://capistrano//lib/capistrano/transfer.rb#86
  def sanitized_to; end

  # Returns the value of attribute sessions.
  #
  # source://capistrano//lib/capistrano/transfer.rb#14
  def sessions; end

  # Returns the value of attribute to.
  #
  # source://capistrano//lib/capistrano/transfer.rb#21
  def to; end

  # Returns the value of attribute transfers.
  #
  # source://capistrano//lib/capistrano/transfer.rb#24
  def transfers; end

  # Returns the value of attribute transport.
  #
  # source://capistrano//lib/capistrano/transfer.rb#18
  def transport; end

  private

  # source://capistrano//lib/capistrano/transfer.rb#205
  def handle_error(error); end

  # source://capistrano//lib/capistrano/transfer.rb#192
  def normalize(argument, session); end

  # source://capistrano//lib/capistrano/transfer.rb#118
  def prepare_scp_transfer(from, to, session); end

  # source://capistrano//lib/capistrano/transfer.rb#164
  def prepare_sftp_transfer(from, to, session); end

  # source://capistrano//lib/capistrano/transfer.rb#100
  def prepare_transfers; end

  # source://capistrano//lib/capistrano/transfer.rb#96
  def session_map; end

  class << self
    # source://capistrano//lib/capistrano/transfer.rb#10
    def process(direction, from, to, sessions, options = T.unsafe(nil), &block); end
  end
end

# source://capistrano//lib/capistrano/transfer.rb#138
class Capistrano::Transfer::SFTPTransferWrapper
  # @return [SFTPTransferWrapper] a new instance of SFTPTransferWrapper
  #
  # source://capistrano//lib/capistrano/transfer.rb#141
  def initialize(session, &callback); end

  # source://capistrano//lib/capistrano/transfer.rb#151
  def [](key); end

  # source://capistrano//lib/capistrano/transfer.rb#155
  def []=(key, value); end

  # source://capistrano//lib/capistrano/transfer.rb#159
  def abort!; end

  # @return [Boolean]
  #
  # source://capistrano//lib/capistrano/transfer.rb#147
  def active?; end

  # Returns the value of attribute operation.
  #
  # source://capistrano//lib/capistrano/transfer.rb#139
  def operation; end
end

# source://capistrano//lib/capistrano/errors.rb#14
class Capistrano::TransferError < ::Capistrano::RemoteError; end

# source://capistrano//lib/capistrano/configuration/namespaces.rb#205
module Kernel
  class << self
    # Detect method additions to Kernel and remove them in the Namespace class
    #
    # source://capistrano//lib/capistrano/configuration/namespaces.rb#210
    def method_added(name); end
  end
end

# source://capistrano//lib/capistrano/ext/string.rb#1
class String
  include ::Comparable

  # source://capistrano//lib/capistrano/ext/string.rb#2
  def compact; end
end

# source://activesupport/7.0.4/lib/active_support/core_ext/object/blank.rb#104
String::BLANK_RE = T.let(T.unsafe(nil), Regexp)

# source://activesupport/7.0.4/lib/active_support/core_ext/object/blank.rb#105
String::ENCODED_BLANKS = T.let(T.unsafe(nil), Concurrent::Map)
