# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sassc` gem.
# Please instead update this file by running `bin/tapioca gem sassc`.

# typed: true

module SassC
  class << self
    def load_paths; end
  end
end

class SassC::BaseError < ::StandardError; end

class SassC::Dependency
  def initialize(filename); end

  def filename; end
  def options; end

  class << self
    def from_filenames(filenames); end
  end
end

class SassC::Engine
  def initialize(template, options = T.unsafe(nil)); end

  def dependencies; end
  def filename; end
  def options; end
  def render; end
  def source_map; end
  def template; end

  private

  def functions_handler; end
  def import_handler; end
  def line_comments?; end
  def load_paths; end
  def omit_source_map_url?; end
  def output_style; end
  def output_style_enum; end
  def precision; end
  def quiet?; end
  def sass?; end
  def source_map_contents?; end
  def source_map_embed?; end
  def source_map_file; end
end

SassC::Engine::OUTPUT_STYLES = T.let(T.unsafe(nil), Array)

class SassC::FunctionsHandler
  def initialize(options); end

  def setup(native_options, functions: T.unsafe(nil)); end

  private

  def arguments_from_native_list(native_argument_list); end
  def error(message); end
  def to_native_value(sass_value); end
end

class SassC::ImportHandler
  def initialize(options); end

  def setup(native_options); end

  private

  def import_function; end
  def imports_to_native(imports); end
end

class SassC::Importer
  def initialize(options); end

  def imports(path, parent_path); end
  def options; end
end

class SassC::Importer::Import
  def initialize(path, source: T.unsafe(nil), source_map_path: T.unsafe(nil)); end

  def path; end
  def path=(_arg0); end
  def source; end
  def source=(_arg0); end
  def source_map_path; end
  def source_map_path=(_arg0); end
  def to_s; end
end

class SassC::InvalidStyleError < ::SassC::BaseError; end

module SassC::Native
  extend ::FFI::Library

  def _context_get_included_files(*_arg0); end
  def _make_data_context(*_arg0); end
  def boolean_get_value(*_arg0); end
  def color_get_a(*_arg0); end
  def color_get_b(*_arg0); end
  def color_get_g(*_arg0); end
  def color_get_r(*_arg0); end
  def color_set_a(*_arg0); end
  def color_set_b(*_arg0); end
  def color_set_g(*_arg0); end
  def color_set_r(*_arg0); end
  def compile_data_context(*_arg0); end
  def compile_file_context(*_arg0); end
  def compiler_get_last_import(*_arg0); end
  def context_get_error_column(*_arg0); end
  def context_get_error_file(*_arg0); end
  def context_get_error_json(*_arg0); end
  def context_get_error_line(*_arg0); end
  def context_get_error_message(*_arg0); end
  def context_get_error_status(*_arg0); end
  def context_get_options(*_arg0); end
  def context_get_output_string(*_arg0); end
  def context_get_source_map_string(*_arg0); end
  def data_context_get_context(*_arg0); end
  def data_context_get_options(*_arg0); end
  def data_context_set_options(*_arg0); end
  def delete_data_context(*_arg0); end
  def delete_file_context(*_arg0); end
  def error_get_message(*_arg0); end
  def error_set_message(*_arg0); end
  def file_context_get_context(*_arg0); end
  def file_context_get_options(*_arg0); end
  def file_context_set_options(*_arg0); end
  def function_get_cookie(*_arg0); end
  def function_get_function(*_arg0); end
  def function_get_list_entry(*_arg0); end
  def function_get_signature(*_arg0); end
  def function_set_list_entry(*_arg0); end
  def import_get_abs_path(*_arg0); end
  def import_get_imp_path(*_arg0); end
  def import_get_source(*_arg0); end
  def import_set_list_entry(*_arg0); end
  def list_get_length(*_arg0); end
  def list_get_value(*_arg0); end
  def list_set_value(*_arg0); end
  def make_boolean(*_arg0); end
  def make_color(*_arg0); end
  def make_error(*_arg0); end
  def make_file_context(*_arg0); end
  def make_function(*_arg0); end
  def make_function_list(*_arg0); end
  def make_import_entry(*_arg0); end
  def make_import_list(*_arg0); end
  def make_importer(*_arg0); end
  def make_list(*_arg0); end
  def make_map(*_arg0); end
  def make_number(*_arg0); end
  def make_options(*_arg0); end
  def make_qstring(*_arg0); end
  def make_string(*_arg0); end
  def map_get_key(*_arg0); end
  def map_get_length(*_arg0); end
  def map_get_value(*_arg0); end
  def map_set_key(*_arg0); end
  def map_set_value(*_arg0); end
  def number_get_unit(*_arg0); end
  def number_get_value(*_arg0); end
  def option_get_c_functions(*_arg0); end
  def option_get_include_path(*_arg0); end
  def option_get_input_path(*_arg0); end
  def option_get_is_indented_syntax_src(*_arg0); end
  def option_get_omit_source_map_url(*_arg0); end
  def option_get_output_path(*_arg0); end
  def option_get_output_style(*_arg0); end
  def option_get_precision(*_arg0); end
  def option_get_source_comments(*_arg0); end
  def option_get_source_map_contents(*_arg0); end
  def option_get_source_map_embed(*_arg0); end
  def option_get_source_map_file(*_arg0); end
  def option_set_c_functions(*_arg0); end
  def option_set_c_importers(*_arg0); end
  def option_set_include_path(*_arg0); end
  def option_set_input_path(*_arg0); end
  def option_set_is_indented_syntax_src(*_arg0); end
  def option_set_omit_source_map_url(*_arg0); end
  def option_set_output_path(*_arg0); end
  def option_set_output_style(*_arg0); end
  def option_set_precision(*_arg0); end
  def option_set_source_comments(*_arg0); end
  def option_set_source_map_contents(*_arg0); end
  def option_set_source_map_embed(*_arg0); end
  def option_set_source_map_file(*_arg0); end
  def sass2scss(*_arg0); end
  def string_get_value(*_arg0); end
  def string_is_quoted(*_arg0); end
  def value_get_tag(*_arg0); end
  def value_is_null(*_arg0); end
  def version(*_arg0); end

  class << self
    def _context_get_included_files(*_arg0); end
    def _make_data_context(*_arg0); end
    def attach_function(*args); end
    def boolean_get_value(*_arg0); end
    def color_get_a(*_arg0); end
    def color_get_b(*_arg0); end
    def color_get_g(*_arg0); end
    def color_get_r(*_arg0); end
    def color_set_a(*_arg0); end
    def color_set_b(*_arg0); end
    def color_set_g(*_arg0); end
    def color_set_r(*_arg0); end
    def compile_data_context(*_arg0); end
    def compile_file_context(*_arg0); end
    def compiler_get_last_import(*_arg0); end
    def context_get_error_column(*_arg0); end
    def context_get_error_file(*_arg0); end
    def context_get_error_json(*_arg0); end
    def context_get_error_line(*_arg0); end
    def context_get_error_message(*_arg0); end
    def context_get_error_status(*_arg0); end
    def context_get_included_files(*args); end
    def context_get_options(*_arg0); end
    def context_get_output_string(*_arg0); end
    def context_get_source_map_string(*_arg0); end
    def data_context_get_context(*_arg0); end
    def data_context_get_options(*_arg0); end
    def data_context_set_options(*_arg0); end
    def delete_data_context(*_arg0); end
    def delete_file_context(*_arg0); end
    def error_get_message(*_arg0); end
    def error_set_message(*_arg0); end
    def file_context_get_context(*_arg0); end
    def file_context_get_options(*_arg0); end
    def file_context_set_options(*_arg0); end
    def function_get_cookie(*_arg0); end
    def function_get_function(*_arg0); end
    def function_get_list_entry(*_arg0); end
    def function_get_signature(*_arg0); end
    def function_set_list_entry(*_arg0); end
    def import_get_abs_path(*_arg0); end
    def import_get_imp_path(*_arg0); end
    def import_get_source(*_arg0); end
    def import_set_list_entry(*_arg0); end
    def list_get_length(*_arg0); end
    def list_get_value(*_arg0); end
    def list_set_value(*_arg0); end
    def make_boolean(*_arg0); end
    def make_color(*_arg0); end
    def make_data_context(data); end
    def make_error(*_arg0); end
    def make_file_context(*_arg0); end
    def make_function(*_arg0); end
    def make_function_list(*_arg0); end
    def make_import_entry(*_arg0); end
    def make_import_list(*_arg0); end
    def make_importer(*_arg0); end
    def make_list(*_arg0); end
    def make_map(*_arg0); end
    def make_number(*_arg0); end
    def make_options(*_arg0); end
    def make_qstring(*_arg0); end
    def make_string(*_arg0); end
    def map_get_key(*_arg0); end
    def map_get_length(*_arg0); end
    def map_get_value(*_arg0); end
    def map_set_key(*_arg0); end
    def map_set_value(*_arg0); end
    def native_string(string); end
    def number_get_unit(*_arg0); end
    def number_get_value(*_arg0); end
    def option_get_c_functions(*_arg0); end
    def option_get_include_path(*_arg0); end
    def option_get_input_path(*_arg0); end
    def option_get_is_indented_syntax_src(*_arg0); end
    def option_get_omit_source_map_url(*_arg0); end
    def option_get_output_path(*_arg0); end
    def option_get_output_style(*_arg0); end
    def option_get_precision(*_arg0); end
    def option_get_source_comments(*_arg0); end
    def option_get_source_map_contents(*_arg0); end
    def option_get_source_map_embed(*_arg0); end
    def option_get_source_map_file(*_arg0); end
    def option_set_c_functions(*_arg0); end
    def option_set_c_importers(*_arg0); end
    def option_set_include_path(*_arg0); end
    def option_set_input_path(*_arg0); end
    def option_set_is_indented_syntax_src(*_arg0); end
    def option_set_omit_source_map_url(*_arg0); end
    def option_set_output_path(*_arg0); end
    def option_set_output_style(*_arg0); end
    def option_set_precision(*_arg0); end
    def option_set_source_comments(*_arg0); end
    def option_set_source_map_contents(*_arg0); end
    def option_set_source_map_embed(*_arg0); end
    def option_set_source_map_file(*_arg0); end
    def return_string_array(ptr); end
    def sass2scss(*_arg0); end
    def string_get_type(native_value); end
    def string_get_value(*_arg0); end
    def string_is_quoted(*_arg0); end
    def value_get_tag(*_arg0); end
    def value_is_null(*_arg0); end
    def version(*_arg0); end
  end
end

class SassC::Native::SassBoolean < ::FFI::Struct; end
class SassC::Native::SassColor < ::FFI::Struct; end
class SassC::Native::SassError < ::FFI::Struct; end
SassC::Native::SassInputStyle = T.let(T.unsafe(nil), FFI::Enum)
class SassC::Native::SassList < ::FFI::Struct; end
class SassC::Native::SassMap < ::FFI::Struct; end
class SassC::Native::SassMapPair < ::FFI::Struct; end
class SassC::Native::SassNull < ::FFI::Struct; end
class SassC::Native::SassNumber < ::FFI::Struct; end
SassC::Native::SassOutputStyle = T.let(T.unsafe(nil), FFI::Enum)
SassC::Native::SassSeparator = T.let(T.unsafe(nil), FFI::Enum)
class SassC::Native::SassString < ::FFI::Struct; end
SassC::Native::SassTag = T.let(T.unsafe(nil), FFI::Enum)
class SassC::Native::SassUnknown < ::FFI::Struct; end
class SassC::Native::SassValue < ::FFI::Union; end
class SassC::Native::SassWarning < ::FFI::Struct; end
class SassC::Native::StringList < ::FFI::Struct; end
class SassC::NotRenderedError < ::SassC::BaseError; end

class SassC::Sass2Scss
  class << self
    def convert(sass); end
  end
end

module SassC::Script
  class << self
    def custom_functions(functions: T.unsafe(nil)); end
    def formatted_function_name(function_name, functions: T.unsafe(nil)); end
  end
end

module SassC::Script::Functions
  include ::Sprockets::SassProcessor::Functions
end

class SassC::Script::Value
  def initialize(value = T.unsafe(nil)); end

  def ==(other); end
  def assert_int!; end
  def bracketed; end
  def eql?(other); end
  def hash; end
  def inspect; end
  def null?; end
  def options; end
  def options=(_arg0); end
  def separator; end
  def source_range; end
  def source_range=(_arg0); end
  def to_a; end
  def to_bool; end
  def to_h; end
  def to_i; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def value; end
  def with_contents(contents, separator: T.unsafe(nil), bracketed: T.unsafe(nil)); end

  protected

  def _perform(environment); end
end

class SassC::Script::Value::Bool < ::SassC::Script::Value
  def to_bool; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def value; end

  class << self
    def new(value); end
  end
end

SassC::Script::Value::Bool::FALSE = T.let(T.unsafe(nil), SassC::Script::Value::Bool)
SassC::Script::Value::Bool::TRUE = T.let(T.unsafe(nil), SassC::Script::Value::Bool)

class SassC::Script::Value::Color < ::SassC::Script::Value
  def initialize(red: T.unsafe(nil), green: T.unsafe(nil), blue: T.unsafe(nil), hue: T.unsafe(nil), saturation: T.unsafe(nil), lightness: T.unsafe(nil), alpha: T.unsafe(nil)); end

  def ==(other_color); end
  def alpha; end
  def alpha_string; end
  def blue; end
  def eql?(other_color); end
  def green; end
  def hash; end
  def hlsa?; end
  def hue; end
  def lightness; end
  def red; end
  def rgba?; end
  def saturation; end
  def to_s; end
  def value; end
end

class SassC::Script::Value::List < ::SassC::Script::Value
  def initialize(value, separator: T.unsafe(nil), bracketed: T.unsafe(nil)); end

  def bracketed; end
  def eq(other); end
  def hash; end
  def inspect; end
  def options=(options); end
  def separator; end
  def to_a; end
  def to_h; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def value; end

  private

  def element_needs_parens?(element); end
  def sep_str(opts = T.unsafe(nil)); end

  class << self
    def assert_valid_index(list, n); end
  end
end

class SassC::Script::Value::Map < ::SassC::Script::Value
  def initialize(hash); end

  def eq(other); end
  def hash; end
  def inspect(opts = T.unsafe(nil)); end
  def options=(options); end
  def separator; end
  def to_a; end
  def to_h; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def value; end
end

class SassC::Script::Value::Number < ::SassC::Script::Value
  def initialize(value, numerator_units = T.unsafe(nil), denominator_units = T.unsafe(nil)); end

  def coerce(num_units, den_units); end
  def comparable_to?(other); end
  def denominator_units; end
  def eql?(other); end
  def hash; end
  def inspect(opts = T.unsafe(nil)); end
  def int?; end
  def is_unit?(unit); end
  def legal_units?; end
  def numerator_units; end
  def original; end
  def original=(_arg0); end
  def to_i; end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def unit_str; end
  def unitless?; end
  def value; end

  private

  def basically_equal?(num1, num2); end
  def coercion_factor(from_units, to_units); end
  def compute_units(this, other, operation); end
  def conversion_factor(from_unit, to_unit); end
  def convertable?(units); end
  def normalize!; end
  def operate(other, operation); end
  def sans_common_units(units1, units2); end

  class << self
    def basically_equal?(num1, num2); end
    def epsilon; end
    def precision; end
    def precision=(digits); end
    def precision_factor; end
    def round(num); end
  end
end

SassC::Script::Value::Number::CONVERSION_TABLE = T.let(T.unsafe(nil), Hash)
SassC::Script::Value::Number::MUTUALLY_CONVERTIBLE = T.let(T.unsafe(nil), Hash)
SassC::Script::Value::Number::NO_UNITS = T.let(T.unsafe(nil), Array)
SassC::Script::Value::Number::OPERATIONS = T.let(T.unsafe(nil), Array)

class SassC::Script::Value::String < ::SassC::Script::Value
  def initialize(value, type = T.unsafe(nil)); end

  def inspect; end
  def plus(other); end
  def to_s(opts = T.unsafe(nil)); end
  def to_sass(opts = T.unsafe(nil)); end
  def type; end
  def value; end

  class << self
    def quote(contents, opts = T.unsafe(nil)); end
  end
end

module SassC::Script::ValueConversion
  class << self
    def from_native(native_value, options); end
    def to_native(value); end
  end
end

class SassC::Script::ValueConversion::Base
  def initialize(value); end
end

class SassC::Script::ValueConversion::Bool < ::SassC::Script::ValueConversion::Base
  def to_native; end
end

class SassC::Script::ValueConversion::Color < ::SassC::Script::ValueConversion::Base
  def to_native; end
end

class SassC::Script::ValueConversion::List < ::SassC::Script::ValueConversion::Base
  def to_native; end
end

class SassC::Script::ValueConversion::Map < ::SassC::Script::ValueConversion::Base
  def to_native; end
end

class SassC::Script::ValueConversion::Number < ::SassC::Script::ValueConversion::Base
  def to_native; end
end

SassC::Script::ValueConversion::SEPARATORS = T.let(T.unsafe(nil), Hash)

class SassC::Script::ValueConversion::String < ::SassC::Script::ValueConversion::Base
  def to_native(opts = T.unsafe(nil)); end
end

class SassC::SyntaxError < ::SassC::BaseError
  def initialize(message, filename: T.unsafe(nil), line: T.unsafe(nil)); end

  def backtrace; end
  def sass_backtrace; end
end

class SassC::UnsupportedValue < ::SassC::BaseError; end

module SassC::Util
  extend ::SassC::Util

  private

  def abstract(obj); end
  def caller_info(entry = T.unsafe(nil)); end
  def clamp(value, min, max); end
  def deprecated(obj, message = T.unsafe(nil)); end
  def ironruby?; end
  def jruby?; end
  def jruby_version; end
  def map_keys(hash); end
  def paths(arrs); end
  def rails_env; end
  def rails_root; end
  def rbx?; end
  def relative_path_from(path, from); end
  def round(value); end
  def sass_warn(msg); end
  def silence_sass_warnings; end
  def windows?; end

  class << self
    def abstract(obj); end
    def caller_info(entry = T.unsafe(nil)); end
    def clamp(value, min, max); end
    def deprecated(obj, message = T.unsafe(nil)); end
    def ironruby?; end
    def jruby?; end
    def jruby_version; end
    def map_keys(hash); end
    def paths(arrs); end
    def rails_env; end
    def rails_root; end
    def rbx?; end
    def relative_path_from(path, from); end
    def round(value); end
    def sass_warn(msg); end
    def silence_sass_warnings; end
    def windows?; end
  end
end

class SassC::Util::NormalizedMap
  def initialize(map = T.unsafe(nil)); end

  def [](k); end
  def []=(k, v); end
  def as_stored; end
  def delete(k); end
  def denormalize(key); end
  def dup; end
  def each; end
  def empty?; end
  def has_key?(k); end
  def keys; end
  def map; end
  def method_missing(method, *args, &block); end
  def normalize(key); end
  def size; end
  def sort_by; end
  def to_a; end
  def to_hash; end
  def update(map); end
  def values; end

  private

  def respond_to_missing?(method, include_private = T.unsafe(nil)); end
end

SassC::Util::RUBY_ENGINE = T.let(T.unsafe(nil), String)
SassC::Util::RUBY_VERSION_COMPONENTS = T.let(T.unsafe(nil), Array)
SassC::VERSION = T.let(T.unsafe(nil), String)
