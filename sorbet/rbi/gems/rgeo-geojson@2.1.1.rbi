# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rgeo-geojson` gem.
# Please instead update this file by running `bin/tapioca gem rgeo-geojson`.

# typed: true

module RGeo; end

module RGeo::GeoJSON
  class << self
    def coder(opts = T.unsafe(nil)); end
    def decode(input_, opts = T.unsafe(nil)); end
    def encode(object, opts = T.unsafe(nil)); end
  end
end

class RGeo::GeoJSON::Coder
  def initialize(opts = T.unsafe(nil)); end

  def decode(input); end
  def encode(object); end
  def entity_factory; end
  def geo_factory; end

  private

  def decode_feature(input); end
  def decode_geometry(input); end
  def decode_geometry_collection(input); end
  def decode_line_string_coords(line_coords); end
  def decode_multi_line_string_coords(multi_line_coords); end
  def decode_multi_point_coords(multi_point_coords); end
  def decode_multi_polygon_coords(multi_polygon_coords); end
  def decode_point_coords(point_coords); end
  def decode_polygon_coords(poly_coords); end
  def encode_feature(object); end
  def encode_geometry(object); end
end

class RGeo::GeoJSON::EntityFactory
  def feature(geometry, id = T.unsafe(nil), properties = T.unsafe(nil)); end
  def feature_collection(features = T.unsafe(nil)); end
  def get_feature_geometry(object); end
  def get_feature_id(object); end
  def get_feature_properties(object); end
  def is_feature?(object); end
  def is_feature_collection?(object); end
  def map_feature_collection(object, &block); end

  class << self
    def instance; end
  end
end

class RGeo::GeoJSON::Feature
  def initialize(geometry, id = T.unsafe(nil), properties = T.unsafe(nil)); end

  def ==(other); end
  def [](key); end
  def eql?(other); end
  def feature_id; end
  def geometry; end
  def hash; end
  def inspect; end
  def keys; end
  def properties; end
  def property(key); end
  def to_s; end
end

class RGeo::GeoJSON::FeatureCollection
  include ::Enumerable

  def initialize(features = T.unsafe(nil)); end

  def ==(other); end
  def [](index); end
  def each(&block); end
  def eql?(other); end
  def hash; end
  def inspect; end
  def size; end
  def to_s; end
end

RGeo::GeoJSON::VERSION = T.let(T.unsafe(nil), String)
RGeo::VERSION = T.let(T.unsafe(nil), String)
