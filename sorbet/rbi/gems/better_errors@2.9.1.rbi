# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `better_errors` gem.
# Please instead update this file by running `bin/tapioca gem better_errors`.

# @private
#
# source://better_errors//lib/better_errors/version.rb#1
module BetterErrors
  class << self
    # The path to the root of the application. Better Errors uses this property
    # to determine if a file in a backtrace should be considered an application
    # frame. If you are using Better Errors with Rails, you do not need to set
    # this attribute manually.
    #
    # @return [String]
    #
    # source://better_errors//lib/better_errors.rb#24
    def application_root; end

    # The path to the root of the application. Better Errors uses this property
    # to determine if a file in a backtrace should be considered an application
    # frame. If you are using Better Errors with Rails, you do not need to set
    # this attribute manually.
    #
    # @return [String]
    #
    # source://better_errors//lib/better_errors.rb#24
    def application_root=(_arg0); end

    # @private
    #
    # source://better_errors//lib/better_errors.rb#34
    def binding_of_caller_available; end

    # @private
    #
    # source://better_errors//lib/better_errors.rb#34
    def binding_of_caller_available=(_arg0); end

    # @private
    # @private
    #
    # source://better_errors//lib/better_errors.rb#34
    def binding_of_caller_available?; end

    # Automatically sniffs a default editor preset based on the EDITOR
    # environment variable.
    #
    # @return [Symbol]
    #
    # source://better_errors//lib/better_errors.rb#132
    def default_editor; end

    # Returns an object which responds to #url, which when called with
    # a filename and line number argument,
    # returns a URL to open the filename and line in the selected editor.
    #
    # Generates TextMate URLs by default.
    #
    #   BetterErrors.editor.url("/some/file", 123)
    #     # => txmt://open?url=file:///some/file&line=123
    #
    # @return [Proc]
    #
    # source://better_errors//lib/better_errors.rb#66
    def editor; end

    # Configures how Better Errors generates open-in-editor URLs.
    #
    # @overload BetterErrors.editor=
    # @overload BetterErrors.editor=
    # @overload BetterErrors.editor=
    #
    # source://better_errors//lib/better_errors.rb#107
    def editor=(editor); end

    # List of classes that are excluded from inspection.
    #
    # @return [Array]
    #
    # source://better_errors//lib/better_errors.rb#50
    def ignored_classes; end

    # List of classes that are excluded from inspection.
    #
    # @return [Array]
    #
    # source://better_errors//lib/better_errors.rb#50
    def ignored_classes=(_arg0); end

    # The ignored instance variables.
    #
    # @return [Array]
    #
    # source://better_errors//lib/better_errors.rb#41
    def ignored_instance_variables; end

    # The ignored instance variables.
    #
    # @return [Array]
    #
    # source://better_errors//lib/better_errors.rb#41
    def ignored_instance_variables=(_arg0); end

    # The logger to use when logging exception details and backtraces. If you
    # are using Better Errors with Rails, you do not need to set this attribute
    # manually. If this attribute is `nil`, nothing will be logged.
    #
    # @return [Logger, nil]
    #
    # source://better_errors//lib/better_errors.rb#31
    def logger; end

    # The logger to use when logging exception details and backtraces. If you
    # are using Better Errors with Rails, you do not need to set this attribute
    # manually. If this attribute is `nil`, nothing will be logged.
    #
    # @return [Logger, nil]
    #
    # source://better_errors//lib/better_errors.rb#31
    def logger=(_arg0); end

    # The maximum variable payload size. If variable.inspect exceeds this,
    # the variable won't be returned.
    #
    # @return int
    #
    # source://better_errors//lib/better_errors.rb#46
    def maximum_variable_inspect_size; end

    # The maximum variable payload size. If variable.inspect exceeds this,
    # the variable won't be returned.
    #
    # @return int
    #
    # source://better_errors//lib/better_errors.rb#46
    def maximum_variable_inspect_size=(_arg0); end

    # Enables experimental Pry support in the inline REPL
    #
    # If you encounter problems while using Pry, *please* file a bug report at
    # https://github.com/BetterErrors/better_errors/issues
    #
    # source://better_errors//lib/better_errors.rb#124
    def use_pry!; end
  end
end

# @private
#
# source://better_errors//lib/better_errors/code_formatter.rb#3
class BetterErrors::CodeFormatter
  # @return [CodeFormatter] a new instance of CodeFormatter
  #
  # source://better_errors//lib/better_errors/code_formatter.rb#17
  def initialize(filename, line, context = T.unsafe(nil)); end

  # source://better_errors//lib/better_errors/code_formatter.rb#33
  def coderay_scanner; end

  # Returns the value of attribute context.
  #
  # source://better_errors//lib/better_errors/code_formatter.rb#15
  def context; end

  # source://better_errors//lib/better_errors/code_formatter.rb#48
  def context_lines; end

  # source://better_errors//lib/better_errors/code_formatter.rb#38
  def each_line_of(lines, &blk); end

  # Returns the value of attribute filename.
  #
  # source://better_errors//lib/better_errors/code_formatter.rb#15
  def filename; end

  # source://better_errors//lib/better_errors/code_formatter.rb#29
  def formatted_code; end

  # source://better_errors//lib/better_errors/code_formatter.rb#44
  def highlighted_lines; end

  # Returns the value of attribute line.
  #
  # source://better_errors//lib/better_errors/code_formatter.rb#15
  def line; end

  # source://better_errors//lib/better_errors/code_formatter.rb#57
  def line_range; end

  # source://better_errors//lib/better_errors/code_formatter.rb#23
  def output; end

  # source://better_errors//lib/better_errors/code_formatter.rb#53
  def source_lines; end
end

# source://better_errors//lib/better_errors/code_formatter.rb#7
BetterErrors::CodeFormatter::FILE_TYPES = T.let(T.unsafe(nil), Hash)

# @private
#
# source://better_errors//lib/better_errors/code_formatter/html.rb#3
class BetterErrors::CodeFormatter::HTML < ::BetterErrors::CodeFormatter
  # source://better_errors//lib/better_errors/code_formatter/html.rb#22
  def formatted_code; end

  # source://better_errors//lib/better_errors/code_formatter/html.rb#8
  def formatted_lines; end

  # source://better_errors//lib/better_errors/code_formatter/html.rb#15
  def formatted_nums; end

  # source://better_errors//lib/better_errors/code_formatter/html.rb#4
  def source_unavailable; end
end

# @private
#
# source://better_errors//lib/better_errors/code_formatter/text.rb#3
class BetterErrors::CodeFormatter::Text < ::BetterErrors::CodeFormatter
  # source://better_errors//lib/better_errors/code_formatter/text.rb#8
  def formatted_lines; end

  # source://better_errors//lib/better_errors/code_formatter/text.rb#4
  def source_unavailable; end
end

# source://better_errors//lib/better_errors/editor.rb#4
class BetterErrors::Editor
  # @return [Editor] a new instance of Editor
  #
  # source://better_errors//lib/better_errors/editor.rb#69
  def initialize(url_proc); end

  # source://better_errors//lib/better_errors/editor.rb#73
  def url(raw_path, line); end

  private

  # source://better_errors//lib/better_errors/editor.rb#95
  def host_path; end

  # Returns the value of attribute url_proc.
  #
  # source://better_errors//lib/better_errors/editor.rb#89
  def url_proc; end

  # source://better_errors//lib/better_errors/editor.rb#91
  def virtual_path; end

  class << self
    # Automatically sniffs a default editor preset based on
    # environment variables.
    #
    # @return [Symbol]
    #
    # source://better_errors//lib/better_errors/editor.rb#31
    def default_editor; end

    # source://better_errors//lib/better_errors/editor.rb#52
    def editor_from_command(editor_command); end

    # source://better_errors//lib/better_errors/editor.rb#37
    def editor_from_environment_editor; end

    # source://better_errors//lib/better_errors/editor.rb#57
    def editor_from_environment_formatting_string; end

    # source://better_errors//lib/better_errors/editor.rb#63
    def editor_from_symbol(symbol); end

    # source://better_errors//lib/better_errors/editor.rb#17
    def for_formatting_string(formatting_string); end

    # source://better_errors//lib/better_errors/editor.rb#23
    def for_proc(url_proc); end
  end
end

# source://better_errors//lib/better_errors/editor.rb#5
BetterErrors::Editor::KNOWN_EDITORS = T.let(T.unsafe(nil), Array)

# @private
#
# source://better_errors//lib/better_errors/error_page.rb#7
class BetterErrors::ErrorPage
  # @return [ErrorPage] a new instance of ErrorPage
  #
  # source://better_errors//lib/better_errors/error_page.rb#18
  def initialize(exception, env); end

  # source://better_errors//lib/better_errors/error_page.rb#80
  def action_dispatch_action_endpoint; end

  # source://better_errors//lib/better_errors/error_page.rb#74
  def active_support_actions; end

  # source://better_errors//lib/better_errors/error_page.rb#86
  def application_frames; end

  # source://better_errors//lib/better_errors/error_page.rb#58
  def backtrace_frames; end

  # source://better_errors//lib/better_errors/error_page.rb#45
  def do_eval(opts); end

  # source://better_errors//lib/better_errors/error_page.rb#38
  def do_variables(opts); end

  # Returns the value of attribute env.
  #
  # source://better_errors//lib/better_errors/error_page.rb#16
  def env; end

  # Returns the value of attribute exception.
  #
  # source://better_errors//lib/better_errors/error_page.rb#16
  def exception; end

  # source://better_errors//lib/better_errors/error_page.rb#70
  def exception_hint; end

  # source://better_errors//lib/better_errors/error_page.rb#66
  def exception_message; end

  # source://better_errors//lib/better_errors/error_page.rb#62
  def exception_type; end

  # source://better_errors//lib/better_errors/error_page.rb#90
  def first_frame; end

  # source://better_errors//lib/better_errors/error_page.rb#25
  def id; end

  # source://better_errors//lib/better_errors/error_page.rb#29
  def render(template_name = T.unsafe(nil), csrf_token = T.unsafe(nil)); end

  # Returns the value of attribute repls.
  #
  # source://better_errors//lib/better_errors/error_page.rb#16
  def repls; end

  private

  # source://better_errors//lib/better_errors/error_page.rb#96
  def editor_url(frame); end

  # source://better_errors//lib/better_errors/error_page.rb#144
  def eval_and_respond(index, code); end

  # source://better_errors//lib/better_errors/error_page.rb#116
  def html_formatted_code_block(frame); end

  # source://better_errors//lib/better_errors/error_page.rb#128
  def inspect_value(obj); end

  # source://better_errors//lib/better_errors/error_page.rb#100
  def rack_session; end

  # source://better_errors//lib/better_errors/error_page.rb#104
  def rails_params; end

  # source://better_errors//lib/better_errors/error_page.rb#112
  def request_path; end

  # source://better_errors//lib/better_errors/error_page.rb#120
  def text_formatted_code_block(frame); end

  # source://better_errors//lib/better_errors/error_page.rb#124
  def text_heading(char, str); end

  # source://better_errors//lib/better_errors/error_page.rb#108
  def uri_prefix; end

  class << self
    # source://better_errors//lib/better_errors/error_page.rb#12
    def template(template_name); end

    # source://better_errors//lib/better_errors/error_page.rb#8
    def template_path(template_name); end
  end
end

# source://better_errors//lib/better_errors/exception_extension.rb#2
module BetterErrors::ExceptionExtension
  # source://better_errors//lib/better_errors/exception_extension.rb#13
  def __better_errors_bindings_stack; end

  # source://better_errors//lib/better_errors/exception_extension.rb#5
  def set_backtrace(*_arg0); end
end

# source://better_errors//lib/better_errors/exception_hint.rb#2
class BetterErrors::ExceptionHint
  # @return [ExceptionHint] a new instance of ExceptionHint
  #
  # source://better_errors//lib/better_errors/exception_hint.rb#3
  def initialize(exception); end

  # source://better_errors//lib/better_errors/exception_hint.rb#7
  def hint; end

  private

  # Returns the value of attribute exception.
  #
  # source://better_errors//lib/better_errors/exception_hint.rb#27
  def exception; end
end

# source://better_errors//lib/better_errors/inspectable_value.rb#7
class BetterErrors::InspectableValue
  # @return [InspectableValue] a new instance of InspectableValue
  #
  # source://better_errors//lib/better_errors/inspectable_value.rb#8
  def initialize(value); end

  # @raise [ValueLargerThanConfiguredMaximum]
  #
  # source://better_errors//lib/better_errors/inspectable_value.rb#12
  def to_html; end

  private

  # Returns the value of attribute original_value.
  #
  # source://better_errors//lib/better_errors/inspectable_value.rb#19
  def original_value; end

  # source://better_errors//lib/better_errors/inspectable_value.rb#25
  def value; end

  # source://better_errors//lib/better_errors/inspectable_value.rb#21
  def value_as_html; end

  # @return [Boolean]
  #
  # source://better_errors//lib/better_errors/inspectable_value.rb#35
  def value_small_enough_to_inspect?; end
end

# Better Errors' error handling middleware. Including this in your middleware
# stack will show a Better Errors error page for exceptions raised below this
# middleware.
#
# If you are using Ruby on Rails, you do not need to manually insert this
# middleware into your middleware stack.
#
# @example Sinatra
#   require "better_errors"
#
#   if development?
#   use BetterErrors::Middleware
#   end
# @example Rack
#   require "better_errors"
#   if ENV["RACK_ENV"] == "development"
#   use BetterErrors::Middleware
#   end
#
# source://better_errors//lib/better_errors/middleware.rb#28
class BetterErrors::Middleware
  # A new instance of BetterErrors::Middleware
  #
  # @param app The Rack app/middleware to wrap with Better Errors
  # @param handler The error handler to use.
  # @return [Middleware] a new instance of Middleware
  #
  # source://better_errors//lib/better_errors/middleware.rb#49
  def initialize(app, handler = T.unsafe(nil)); end

  # Calls the Better Errors middleware
  #
  # @param env [Hash]
  # @return [Array]
  #
  # source://better_errors//lib/better_errors/middleware.rb#58
  def call(env); end

  private

  # @return [Boolean]
  #
  # source://better_errors//lib/better_errors/middleware.rb#68
  def allow_ip?(env); end

  # source://better_errors//lib/better_errors/middleware.rb#140
  def backtrace_frames; end

  # source://better_errors//lib/better_errors/middleware.rb#75
  def better_errors_call(env); end

  # source://better_errors//lib/better_errors/middleware.rb#148
  def internal_call(env, id, method); end

  # source://better_errors//lib/better_errors/middleware.rb#199
  def invalid_csrf_token_json_response; end

  # source://better_errors//lib/better_errors/middleware.rb#191
  def invalid_error_json_response; end

  # source://better_errors//lib/better_errors/middleware.rb#131
  def log_exception; end

  # source://better_errors//lib/better_errors/middleware.rb#171
  def no_errors_json_response; end

  # source://better_errors//lib/better_errors/middleware.rb#166
  def no_errors_page; end

  # source://better_errors//lib/better_errors/middleware.rb#214
  def not_acceptable_json_response; end

  # source://better_errors//lib/better_errors/middleware.rb#207
  def not_found_json_response; end

  # source://better_errors//lib/better_errors/middleware.rb#86
  def protected_app_call(env); end

  # source://better_errors//lib/better_errors/middleware.rb#94
  def show_error_page(env, exception = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://better_errors//lib/better_errors/middleware.rb#126
  def text?(env); end

  class << self
    # Adds an address to the set of IP addresses allowed to access Better
    # Errors.
    #
    # source://better_errors//lib/better_errors/middleware.rb#36
    def allow_ip!(addr); end
  end
end

# The set of IP addresses that are allowed to access Better Errors.
#
# Set to `{ "127.0.0.1/8", "::1/128" }` by default.
#
# source://better_errors//lib/better_errors/middleware.rb#32
BetterErrors::Middleware::ALLOWED_IPS = T.let(T.unsafe(nil), Set)

# source://better_errors//lib/better_errors/middleware.rb#43
BetterErrors::Middleware::CSRF_TOKEN_COOKIE_NAME = T.let(T.unsafe(nil), String)

# @private
#
# source://better_errors//lib/better_errors/repl.rb#3
module BetterErrors::REPL
  class << self
    # source://better_errors//lib/better_errors/repl.rb#17
    def detect; end

    # source://better_errors//lib/better_errors/repl.rb#9
    def provider; end

    # source://better_errors//lib/better_errors/repl.rb#13
    def provider=(prov); end

    # source://better_errors//lib/better_errors/repl.rb#23
    def test_provider(provider); end
  end
end

# source://better_errors//lib/better_errors/repl.rb#4
BetterErrors::REPL::PROVIDERS = T.let(T.unsafe(nil), Array)

# @private
#
# source://better_errors//lib/better_errors/rails.rb#3
class BetterErrors::Railtie < ::Rails::Railtie
  # source://better_errors//lib/better_errors/rails.rb#24
  def app; end

  # source://better_errors//lib/better_errors/rails.rb#12
  def insert_middleware; end

  # @return [Boolean]
  #
  # source://better_errors//lib/better_errors/rails.rb#20
  def use_better_errors?; end
end

# source://better_errors//lib/better_errors/raised_exception.rb#5
class BetterErrors::RaisedException
  # @return [RaisedException] a new instance of RaisedException
  #
  # source://better_errors//lib/better_errors/raised_exception.rb#8
  def initialize(exception); end

  # Returns the value of attribute backtrace.
  #
  # source://better_errors//lib/better_errors/raised_exception.rb#6
  def backtrace; end

  # Returns the value of attribute exception.
  #
  # source://better_errors//lib/better_errors/raised_exception.rb#6
  def exception; end

  # Returns the value of attribute hint.
  #
  # source://better_errors//lib/better_errors/raised_exception.rb#6
  def hint; end

  # Returns the value of attribute message.
  #
  # source://better_errors//lib/better_errors/raised_exception.rb#6
  def message; end

  # source://better_errors//lib/better_errors/raised_exception.rb#32
  def type; end

  private

  # @return [Boolean]
  #
  # source://better_errors//lib/better_errors/raised_exception.rb#37
  def has_bindings?; end

  # source://better_errors//lib/better_errors/raised_exception.rb#71
  def massage_syntax_error; end

  # source://better_errors//lib/better_errors/raised_exception.rb#41
  def setup_backtrace; end

  # source://better_errors//lib/better_errors/raised_exception.rb#63
  def setup_backtrace_from_backtrace; end

  # source://better_errors//lib/better_errors/raised_exception.rb#49
  def setup_backtrace_from_bindings; end

  # source://better_errors//lib/better_errors/raised_exception.rb#85
  def setup_hint; end
end

# @private
#
# source://better_errors//lib/better_errors/stack_frame.rb#5
class BetterErrors::StackFrame
  # @return [StackFrame] a new instance of StackFrame
  #
  # source://better_errors//lib/better_errors/stack_frame.rb#12
  def initialize(filename, line, name, frame_binding = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://better_errors//lib/better_errors/stack_frame.rb#21
  def application?; end

  # source://better_errors//lib/better_errors/stack_frame.rb#27
  def application_path; end

  # source://better_errors//lib/better_errors/stack_frame.rb#43
  def class_name; end

  # source://better_errors//lib/better_errors/stack_frame.rb#51
  def context; end

  # Returns the value of attribute filename.
  #
  # source://better_errors//lib/better_errors/stack_frame.rb#10
  def filename; end

  # Returns the value of attribute frame_binding.
  #
  # source://better_errors//lib/better_errors/stack_frame.rb#10
  def frame_binding; end

  # @return [Boolean]
  #
  # source://better_errors//lib/better_errors/stack_frame.rb#31
  def gem?; end

  # source://better_errors//lib/better_errors/stack_frame.rb#35
  def gem_path; end

  # source://better_errors//lib/better_errors/stack_frame.rb#92
  def instance_variables; end

  # Returns the value of attribute line.
  #
  # source://better_errors//lib/better_errors/stack_frame.rb#10
  def line; end

  # source://better_errors//lib/better_errors/stack_frame.rb#86
  def local_variable(name); end

  # source://better_errors//lib/better_errors/stack_frame.rb#69
  def local_variables; end

  # source://better_errors//lib/better_errors/stack_frame.rb#47
  def method_name; end

  # Returns the value of attribute name.
  #
  # source://better_errors//lib/better_errors/stack_frame.rb#10
  def name; end

  # source://better_errors//lib/better_errors/stack_frame.rb#61
  def pretty_path; end

  # source://better_errors//lib/better_errors/stack_frame.rb#106
  def to_s; end

  # source://better_errors//lib/better_errors/stack_frame.rb#99
  def visible_instance_variables; end

  private

  # source://better_errors//lib/better_errors/stack_frame.rb#132
  def eval_local_variable(name); end

  # source://better_errors//lib/better_errors/stack_frame.rb#126
  def get_local_variable(name); end

  # source://better_errors//lib/better_errors/stack_frame.rb#111
  def set_pretty_method_name; end

  class << self
    # source://better_errors//lib/better_errors/stack_frame.rb#6
    def from_exception(exception); end
  end
end

# source://better_errors//lib/better_errors/version.rb#2
BetterErrors::VERSION = T.let(T.unsafe(nil), String)

# source://better_errors//lib/better_errors/inspectable_value.rb#5
class BetterErrors::ValueLargerThanConfiguredMaximum < ::StandardError; end

class Exception
  include ::BetterErrors::ExceptionExtension
end
