# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `active_record_doctor` gem.
# Please instead update this file by running `bin/tapioca gem active_record_doctor`.

# source://active_record_doctor//lib/active_record_doctor/railtie.rb#3
module ActiveRecordDoctor
  class << self
    # This method is part of the public API that is intended for use by
    # active_record_doctor users. The remaining methods are considered to be
    # public-not-published.
    #
    # @raise [ActiveRecordDoctor::Error::ConfigureCalledTwice]
    #
    # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#11
    def configure(&block); end

    # The config file that's currently being processed by .load_config.
    #
    # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#6
    def current_config; end

    # source://active_record_doctor//lib/active_record_doctor/detectors.rb#7
    def detectors; end

    # source://active_record_doctor//lib/active_record_doctor/errors.rb#4
    def handle_exception; end

    # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#44
    def load_config(path); end

    # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#71
    def load_config_with_defaults(path); end
  end
end

# source://active_record_doctor//lib/active_record_doctor/config.rb#4
class ActiveRecordDoctor::Config < ::Struct
  # Returns the value of attribute detectors
  #
  # @return [Object] the current value of detectors
  def detectors; end

  # Sets the attribute detectors
  #
  # @param value [Object] the value to set the attribute detectors to.
  # @return [Object] the newly set value
  def detectors=(_); end

  # Returns the value of attribute globals
  #
  # @return [Object] the current value of globals
  def globals; end

  # Sets the attribute globals
  #
  # @param value [Object] the value to set the attribute globals to.
  # @return [Object] the newly set value
  def globals=(_); end

  # source://active_record_doctor//lib/active_record_doctor/config.rb#5
  def merge(config); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Container module for all detectors, implemented as separate classes.
#
# source://active_record_doctor//lib/active_record_doctor/detectors.rb#19
module ActiveRecordDoctor::Detectors; end

# Base class for all active_record_doctor detectors.
#
# source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#6
class ActiveRecordDoctor::Detectors::Base
  # @return [Base] a new instance of Base
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#41
  def initialize(config, io); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#47
  def run; end

  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#149
  def check_constraints(table_name); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#120
  def column(table_name, column_name); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#62
  def config(key); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#90
  def connection; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#74
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#94
  def indexes(table_name, except: T.unsafe(nil)); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#78
  def message(**_attrs); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#170
  def models(except: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#142
  def not_null_check_constraint_exists?(table, column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#180
  def postgresql?; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#113
  def primary_key(table_name); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#82
  def problem!(**attrs); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#100
  def tables(except: T.unsafe(nil)); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#176
  def underscored_name; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#124
  def views; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#86
  def warning(message); end

  class << self
    # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#24
    def config; end

    # Returns the value of attribute description.
    #
    # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#14
    def description; end

    # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#28
    def locals_and_globals; end

    # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#16
    def run(config, io); end

    # source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#20
    def underscored_name; end
  end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/base.rb#7
ActiveRecordDoctor::Detectors::Base::BASE_CONFIG = T.let(T.unsafe(nil), Hash)

# source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#7
class ActiveRecordDoctor::Detectors::ExtraneousIndexes < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#30
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#56
  def indexed_primary_keys; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#94
  def indexes(table_name); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#22
  def message(extraneous_index:, replacement_indexes:); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#85
  def opclasses(index); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#89
  def prefix?(lhs, rhs); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#69
  def replaceable_with?(index1, index2); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/extraneous_indexes.rb#35
  def subindexes_of_multi_column_indexes; end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_boolean_presence_validation.rb#7
class ActiveRecordDoctor::Detectors::IncorrectBooleanPresenceValidation < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_boolean_presence_validation.rb#27
  def detect; end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_boolean_presence_validation.rb#41
  def has_presence_validator?(model, column); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_boolean_presence_validation.rb#21
  def message(model:, attribute:); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#7
class ActiveRecordDoctor::Detectors::IncorrectDependentOption < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#92
  def callback_action(reflection); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#111
  def defines_destroy_callbacks?(model); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#99
  def deletable?(model); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#125
  def dependent_models(model); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#43
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#131
  def foreign_key(from_table, to_table); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#21
  def message(model:, association:, problem:, associated_models:); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_dependent_option.rb#81
  def models_having(as:); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_length_validation.rb#7
class ActiveRecordDoctor::Detectors::IncorrectLengthValidation < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_length_validation.rb#33
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_length_validation.rb#55
  def maximum_allowed_by_validations(model); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/incorrect_length_validation.rb#21
  def message(model:, attribute:, table:, database_maximum:, model_maximum:); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/mismatched_foreign_key_type.rb#7
class ActiveRecordDoctor::Detectors::MismatchedForeignKeyType < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/mismatched_foreign_key_type.rb#27
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/mismatched_foreign_key_type.rb#21
  def message(table:, column:); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/missing_foreign_keys.rb#7
class ActiveRecordDoctor::Detectors::MissingForeignKeys < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_foreign_keys.rb#25
  def detect; end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_foreign_keys.rb#46
  def foreign_key?(table, column); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_foreign_keys.rb#21
  def message(table:, column:); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_foreign_keys.rb#42
  def named_like_foreign_key?(column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_foreign_keys.rb#52
  def polymorphic_foreign_key?(table, column); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/missing_non_null_constraint.rb#7
class ActiveRecordDoctor::Detectors::MissingNonNullConstraint < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_non_null_constraint.rb#25
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_non_null_constraint.rb#21
  def message(column:, table:); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_non_null_constraint.rb#52
  def non_null_needed?(model, column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_non_null_constraint.rb#47
  def sti_base_model?(model); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#7
class ActiveRecordDoctor::Detectors::MissingPresenceValidation < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#25
  def detect; end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#61
  def exclusion_validator_present?(model, column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#53
  def inclusion_validator_present?(model, column); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#21
  def message(column:, model:); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#69
  def presence_validator_present?(model, column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#39
  def validator_needed?(model, column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_presence_validation.rb#44
  def validator_present?(model, column); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#7
class ActiveRecordDoctor::Detectors::MissingUniqueIndexes < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#32
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#59
  def has_ones_without_indexes; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#114
  def ignore_columns; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#22
  def message(model:, table:, columns:, problem:); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#91
  def resolve_attributes(model, attributes); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#79
  def supported_validator?(validator); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#105
  def unique_index?(table_name, columns, scope = T.unsafe(nil)); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/missing_unique_indexes.rb#37
  def validations_without_indexes; end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/short_primary_key_type.rb#7
class ActiveRecordDoctor::Detectors::ShortPrimaryKeyType < ::ActiveRecordDoctor::Detectors::Base
  private

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/short_primary_key_type.rb#32
  def bigint?(column); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/short_primary_key_type.rb#22
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/short_primary_key_type.rb#18
  def message(table:, column:); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/short_primary_key_type.rb#40
  def uuid?(column); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/undefined_table_references.rb#7
class ActiveRecordDoctor::Detectors::UndefinedTableReferences < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/undefined_table_references.rb#22
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/undefined_table_references.rb#18
  def message(model:, table:); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_deleted_at.rb#7
class ActiveRecordDoctor::Detectors::UnindexedDeletedAt < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_deleted_at.rb#33
  def detect; end

  # source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_deleted_at.rb#27
  def message(index:, column_name:); end
end

# source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_foreign_keys.rb#7
class ActiveRecordDoctor::Detectors::UnindexedForeignKeys < ::ActiveRecordDoctor::Detectors::Base
  private

  # source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_foreign_keys.rb#27
  def detect; end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_foreign_keys.rb#41
  def foreign_key?(column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_foreign_keys.rb#45
  def indexed?(table, column); end

  # @return [Boolean]
  #
  # source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_foreign_keys.rb#51
  def indexed_as_polymorphic?(table, column); end

  # source://active_record_doctor//lib/active_record_doctor/detectors/unindexed_foreign_keys.rb#21
  def message(table:, column:); end
end

# Generic active_record_doctor exception class.
#
# source://active_record_doctor//lib/active_record_doctor/errors.rb#12
class ActiveRecordDoctor::Error < ::RuntimeError
  # Returns the value of attribute config_path.
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#13
  def config_path; end

  # Sets the attribute config_path
  #
  # @param value the value to set the attribute config_path to.
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#13
  def config_path=(_arg0); end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#19
  def details; end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#23
  def user_message; end

  private

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#48
  def config_path_or_message; end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#52
  def hyphenated_list(items); end

  class << self
    # source://active_record_doctor//lib/active_record_doctor/errors.rb#15
    def [](*args); end
  end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#78
class ActiveRecordDoctor::Error::ConfigurationError < ::ActiveRecordDoctor::Error
  # @return [ConfigurationError] a new instance of ConfigurationError
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#79
  def initialize(exc); end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#84
  def details; end
end

# We don't need extra documentation for error classes because of their
# extensive error messages.
#
# source://active_record_doctor//lib/active_record_doctor/errors.rb#62
class ActiveRecordDoctor::Error::ConfigurationFileMissing < ::ActiveRecordDoctor::Error
  # @return [ConfigurationFileMissing] a new instance of ConfigurationFileMissing
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#63
  def initialize; end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#67
  def details; end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#118
class ActiveRecordDoctor::Error::ConfigureCalledTwice < ::ActiveRecordDoctor::Error
  # @return [ConfigureCalledTwice] a new instance of ConfigureCalledTwice
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#119
  def initialize; end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#123
  def details; end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#102
class ActiveRecordDoctor::Error::ConfigureNotCalled < ::ActiveRecordDoctor::Error
  # @return [ConfigureNotCalled] a new instance of ConfigureNotCalled
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#103
  def initialize; end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#107
  def details; end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#132
class ActiveRecordDoctor::Error::DetectorConfiguredTwice < ::ActiveRecordDoctor::Error
  # @return [DetectorConfiguredTwice] a new instance of DetectorConfiguredTwice
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#133
  def initialize(detector); end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#137
  def details; end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#210
class ActiveRecordDoctor::Error::DuplicateGlobalSetting < ::ActiveRecordDoctor::Error
  # @return [DuplicateGlobalSetting] a new instance of DuplicateGlobalSetting
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#211
  def initialize(name); end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#215
  def details; end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#150
class ActiveRecordDoctor::Error::UnrecognizedDetectorName < ::ActiveRecordDoctor::Error
  # @return [UnrecognizedDetectorName] a new instance of UnrecognizedDetectorName
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#151
  def initialize(detector, recognized_detectors); end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#156
  def details; end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#168
class ActiveRecordDoctor::Error::UnrecognizedDetectorSettings < ::ActiveRecordDoctor::Error
  # @return [UnrecognizedDetectorSettings] a new instance of UnrecognizedDetectorSettings
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#169
  def initialize(detector, unrecognized_settings, recognized_settings); end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#176
  def details; end
end

# source://active_record_doctor//lib/active_record_doctor/errors.rb#192
class ActiveRecordDoctor::Error::UnrecognizedGlobalSetting < ::ActiveRecordDoctor::Error
  # @return [UnrecognizedGlobalSetting] a new instance of UnrecognizedGlobalSetting
  #
  # source://active_record_doctor//lib/active_record_doctor/errors.rb#193
  def initialize(name, recognized_settings); end

  # source://active_record_doctor//lib/active_record_doctor/errors.rb#198
  def details; end
end

# Turn a detector class into a human-readable help text.
#
# source://active_record_doctor//lib/active_record_doctor/help.rb#5
class ActiveRecordDoctor::Help
  # @return [Help] a new instance of Help
  #
  # source://active_record_doctor//lib/active_record_doctor/help.rb#6
  def initialize(klass); end

  # source://active_record_doctor//lib/active_record_doctor/help.rb#10
  def to_s; end

  private

  # source://active_record_doctor//lib/active_record_doctor/help.rb#26
  def config_to_s; end

  # Returns the value of attribute klass.
  #
  # source://active_record_doctor//lib/active_record_doctor/help.rb#21
  def klass; end
end

# source://active_record_doctor//lib/active_record_doctor/help.rb#23
ActiveRecordDoctor::Help::GLOBAL_COMMENT = T.let(T.unsafe(nil), String)

# source://active_record_doctor//lib/active_record_doctor/help.rb#24
ActiveRecordDoctor::Help::LOCAL_COMMENT = T.let(T.unsafe(nil), String)

# A class used for loading user-provided configuration files.
#
# source://active_record_doctor//lib/active_record_doctor/config/loader.rb#81
class ActiveRecordDoctor::Loader
  # @return [Loader] a new instance of Loader
  #
  # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#82
  def initialize(config, recognized_globals, recognized_detectors, &block); end

  # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#106
  def detector(name, settings); end

  # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#89
  def global(name, value); end

  private

  # Returns the value of attribute config.
  #
  # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#135
  def config; end

  # Returns the value of attribute recognized_detectors.
  #
  # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#135
  def recognized_detectors; end

  # Returns the value of attribute recognized_globals.
  #
  # source://active_record_doctor//lib/active_record_doctor/config/loader.rb#135
  def recognized_globals; end
end

# source://active_record_doctor//lib/active_record_doctor/railtie.rb#4
class ActiveRecordDoctor::Railtie < ::Rails::Railtie; end

# An excecution environment for active_record_doctor that provides a config
# and an output device for use by detectors.
#
# source://active_record_doctor//lib/active_record_doctor/runner.rb#6
class ActiveRecordDoctor::Runner
  # io is injected via constructor parameters to facilitate testing.
  #
  # @return [Runner] a new instance of Runner
  #
  # source://active_record_doctor//lib/active_record_doctor/runner.rb#8
  def initialize(config, io = T.unsafe(nil)); end

  # source://active_record_doctor//lib/active_record_doctor/runner.rb#32
  def help(name); end

  # source://active_record_doctor//lib/active_record_doctor/runner.rb#19
  def run_all; end

  # source://active_record_doctor//lib/active_record_doctor/runner.rb#13
  def run_one(name); end

  private

  # Returns the value of attribute config.
  #
  # source://active_record_doctor//lib/active_record_doctor/runner.rb#39
  def config; end

  # Returns the value of attribute io.
  #
  # source://active_record_doctor//lib/active_record_doctor/runner.rb#39
  def io; end
end

# source://active_record_doctor//lib/active_record_doctor/version.rb#4
ActiveRecordDoctor::VERSION = T.let(T.unsafe(nil), String)
