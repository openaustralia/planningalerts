# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `typhoeus` gem.
# Please instead update this file by running `bin/tapioca gem typhoeus`.


# source://typhoeus//lib/typhoeus/adapters/faraday.rb#3
module Faraday
  class << self
    # source://faraday/1.10.3/lib/faraday.rb#81
    def default_adapter; end

    # source://faraday/1.10.3/lib/faraday.rb#137
    def default_adapter=(adapter); end

    # source://faraday/1.10.3/lib/faraday.rb#155
    def default_connection; end

    # source://faraday/1.10.3/lib/faraday.rb#84
    def default_connection=(_arg0); end

    # source://faraday/1.10.3/lib/faraday.rb#162
    def default_connection_options; end

    # source://faraday/1.10.3/lib/faraday.rb#169
    def default_connection_options=(options); end

    # source://faraday/1.10.3/lib/faraday.rb#89
    def ignore_env_proxy; end

    # source://faraday/1.10.3/lib/faraday.rb#89
    def ignore_env_proxy=(_arg0); end

    # source://faraday/1.10.3/lib/faraday.rb#72
    def lib_path; end

    # source://faraday/1.10.3/lib/faraday.rb#72
    def lib_path=(_arg0); end

    # source://faraday/1.10.3/lib/faraday.rb#118
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end

    # source://faraday/1.10.3/lib/faraday.rb#128
    def require_lib(*libs); end

    # source://faraday/1.10.3/lib/faraday.rb#128
    def require_libs(*libs); end

    # source://faraday/1.10.3/lib/faraday.rb#142
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end

    # source://faraday/1.10.3/lib/faraday.rb#68
    def root_path; end

    # source://faraday/1.10.3/lib/faraday.rb#68
    def root_path=(_arg0); end

    private

    # source://faraday/1.10.3/lib/faraday.rb#178
    def method_missing(name, *args, &block); end
  end
end

# source://typhoeus//lib/typhoeus/adapters/faraday.rb#4
class Faraday::Adapter
  # source://faraday/1.10.3/lib/faraday/adapter.rb#33
  def initialize(_app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#60
  def call(env); end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#55
  def close; end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#46
  def connection(env); end

  private

  # source://faraday/1.10.3/lib/faraday/adapter.rb#91
  def request_timeout(type, options); end

  # source://faraday/1.10.3/lib/faraday/adapter.rb#67
  def save_response(env, status, body, headers = T.unsafe(nil), reason_phrase = T.unsafe(nil)); end
end

# Adapter to use Faraday with Typhoeus.
#
# @example Use Typhoeus.
#   require 'faraday'
#   require 'typhoeus'
#   require 'typhoeus/adapters/faraday'
#
#   conn = Faraday.new(url: "www.example.com") do |faraday|
#   faraday.adapter :typhoeus
#
#   # You can include Typhoeus options to be used for every request
#   # faraday.adapter :typhoeus, forbid_reuse: true, maxredirs: 1
#   end
#
#   response = conn.get("/")
#
# source://typhoeus//lib/typhoeus/adapters/faraday.rb#21
class Faraday::Adapter::Typhoeus < ::Faraday::Adapter
  # Initialize the Typhoeus adapter
  #
  # @option [
  # @param app [App] Farday app
  # @param [ [Hash] a customizable set of options
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#44
  def initialize(app, adapter_options = T.unsafe(nil)); end

  # Hook into Faraday and perform the request with Typhoeus.
  #
  # @param env [Hash] The environment.
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#70
  def call(env); end

  private

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#151
  def configure_proxy(req, env); end

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#169
  def configure_socket(req, env); end

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#134
  def configure_ssl(req, env); end

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#163
  def configure_timeout(req, env); end

  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#175
  def parallel?(env); end

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#78
  def perform_request(env); end

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#130
  def read_body(env); end

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#86
  def request(env); end

  # source://typhoeus//lib/typhoeus/adapters/faraday.rb#120
  def typhoeus_request(env); end

  class << self
    # Setup Hydra with provided options.
    #
    # @example Setup Hydra.
    #   Faraday::Adapter::Typhoeus.setup_parallel_manager
    #   #=> #<Typhoeus::Hydra ... >
    # @return [Typhoeus::Hydra] The hydra.
    #
    # source://typhoeus//lib/typhoeus/adapters/faraday.rb#59
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

# source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#1
module Rack
  class << self
    # source://rack/2.2.9/lib/rack/version.rb#26
    def release; end

    # source://rack/2.2.9/lib/rack/version.rb#19
    def version; end
  end
end

# source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#2
module Rack::Typhoeus; end

# source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#3
module Rack::Typhoeus::Middleware; end

# This Rack middleware takes care of the proper deserialization of
# the nested params encoded by Typhoeus.
#
# @author Dwayne Macgowan
# @example Require the railtie when using Rails.
#   require 'typhoeus/railtie'
# @example Include the middleware for Rack based applications.
#   use Rack::Typhoeus::Middleware::ParamsDecoder
# @example Use the helper directly. Not recommended as b/c the interface might change.
#   require 'rack/typhoeus/middleware/params_decoder/helper'
#   include Rack::Typhoeus::Middleware::ParamsDecoder::Helper
#   decode!(params)
# @since 0.5.4
#
# source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#4
class Rack::Typhoeus::Middleware::ParamsDecoder
  include ::Rack::Typhoeus::Middleware::ParamsDecoder::Helper

  # @return [ParamsDecoder] a new instance of ParamsDecoder
  # @since 0.5.4
  #
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder.rb#26
  def initialize(app); end

  # @since 0.5.4
  #
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder.rb#30
  def call(env); end

  private

  # Persist params change in environment. Extracted from:
  # https://github.com/rack/rack/blob/master/lib/rack/request.rb#L243
  #
  # @since 0.5.4
  #
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder.rb#40
  def update_params(req, k, v); end
end

# source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#5
module Rack::Typhoeus::Middleware::ParamsDecoder::Helper
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#36
  def decode(hash); end

  # Recursively decodes Typhoeus encoded arrays in given Hash.
  #
  # @param hash [Hash] . This Hash will be modified!
  # @return [Hash] Hash with properly decoded nested arrays.
  #
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#25
  def decode!(hash); end

  # Recursively decodes Typhoeus encoded arrays in given Hash.
  #
  # @author Dwayne Macgowan
  # @example Use directly in a Rails controller.
  #   class ApplicationController
  #   before_filter :decode_typhoeus_arrays
  #   end
  #
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#16
  def decode_typhoeus_arrays; end

  private

  # If the Hash is an array encoded by typhoeus an array is returned
  # else the self is returned
  #
  # @param hash [Hash] The Hash to convert into an Array.
  # @return [Arraya/Hash]
  #
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#65
  def convert(hash); end

  # Checks if Hash is an Array encoded as a Hash.
  # Specifically will check for the Hash to have this
  # form: {'0' => v0, '1' => v1, .., 'n' => vN }
  #
  # @param hash [Hash]
  # @return [Boolean] True if its a encoded Array, else false.
  #
  # source://typhoeus//lib/rack/typhoeus/middleware/params_decoder/helper.rb#49
  def encoded?(hash); end
end

# Typhoeus is a HTTP client library based on Ethon which
# wraps libcurl. Sitting on top of libcurl makes Typhoeus
# very reliable and fast.
#
# There are some gems using Typhoeus like
# {https://github.com/myronmarston/vcr VCR},
# {https://github.com/bblimke/webmock WebMock} or
# {https://github.com/technoweenie/faraday Faraday}. VCR
# and WebMock provide their own adapter whereas
# Faraday relies on {Faraday::Adapter::Typhoeus}
# since Typhoeus version 0.5.
#
# @example Make a request with the shortcut.
#   response = Typhoeus.get("www.example.com")
# @example Simplest request.
#   response = Typhoeus::Request.new("www.example.com").run
# @example Request with url parameters.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   params: {a: 1}
#   ).run
# @example Request with a body.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   body: {b: 2}
#   ).run
# @example Request with parameters and body.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   params: {a: 1},
#   body: {b: 2}
#   ).run
# @example Create a request and allow follow redirections.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   followlocation: true
#   ).run
# @example Use the hydra to do multiple requests.
#   hydra = Typhoeus::Hydra.new
#   requests = (0..9).map{ Typhoeus::Request.new("www.example.com") }
#   requests.each{ |request| hydra.queue(request) }
#   hydra.run
# @see Typhoeus::Request
# @see Typhoeus::Hydra
# @see Faraday::Adapter::Typhoeus
# @since 0.5.0
#
# source://typhoeus//lib/typhoeus/config.rb#1
module Typhoeus
  extend ::Typhoeus::Request::Actions
  extend ::Typhoeus::Request::Callbacks::Types

  class << self
    # Add before callbacks.
    #
    # @example Add before callback.
    #   Typhoeus.before { |request| p request.base_url }
    # @param block [Block] The callback.
    # @return [Array<Block>] All before blocks.
    # @since 0.5.0
    # @yield [Typhoeus::Request]
    #
    # source://typhoeus//lib/typhoeus.rb#111
    def before(&block); end

    # Set the Typhoeus configuration options by passing a block.
    #
    # @example Set the configuration options within a block.
    #   Typhoeus.configure do |config|
    #   config.verbose = true
    #   end
    # @example Set the configuration directly.
    #   Typhoeus::Config.verbose = true
    # @return [Typhoeus::Config] The configuration.
    # @see Typhoeus::Config
    # @since 0.5.0
    # @yield [Typhoeus::Config]
    #
    # source://typhoeus//lib/typhoeus.rb#76
    def configure; end

    # Stub out a specific request.
    #
    # @example Stub a request and get specified response.
    #   expected = Typhoeus::Response.new
    #   Typhoeus.stub("www.example.com").and_return(expected)
    #
    #   actual = Typhoeus.get("www.example.com")
    #   expected == actual
    #   #=> true
    # @example Stub a request and get a lazily-constructed response containing data from actual widgets that exist in the system when the stubbed request is made.
    #   Typhoeus.stub("www.example.com/widgets") do
    #   actual_widgets = Widget.all
    #   Typhoeus::Response.new(
    #   :body => actual_widgets.inject([]) do |ids, widget|
    #   ids << widget.id
    #   end.join(",")
    #   )
    #   end
    # @example Stub a request and get a lazily-constructed response in the format requested.
    #   Typhoeus.stub("www.example.com") do |request|
    #   accept = (request.options[:headers]||{})['Accept'] || "application/json"
    #   format = accept.split(",").first
    #   body_obj = { 'things' => [ { 'id' => 'foo' } ] }
    #
    #   Typhoeus::Response.new(
    #   :headers => {
    #   'Content-Type' => format
    #   },
    #   :body => SERIALIZERS[format].serialize(body_obj)
    #   )
    #   end
    # @param base_url [String] The url to stub out.
    # @param options [Hash] The options to stub out.
    # @return [Typhoeus::Expectation] The expecatation.
    # @see Typhoeus::Expectation
    # @since 0.5.0
    #
    # source://typhoeus//lib/typhoeus.rb#90
    def stub(base_url, options = T.unsafe(nil), &block); end

    # Execute given block as if block connection is turned off.
    # The old block connection state is restored afterwards.
    #
    # @example Make a real request, no matter if it's blocked.
    #   Typhoeus::Config.block_connection = true
    #   Typhoeus.get("www.example.com").code
    #   #=> raise Typhoeus::Errors::NoStub
    #
    #   Typhoeus.with_connection do
    #   Typhoeus.get("www.example.com").code
    #   #=> :ok
    #   end
    # @return [Object] Returns the return value of the block.
    # @see Typhoeus::Config.block_connection
    # @since 0.5.0
    # @yield Yields control to the block after disabling block_connection.
    #   Afterwards, the block_connection is set to its original
    #   value.
    #
    # source://typhoeus//lib/typhoeus.rb#136
    def with_connection; end
  end
end

# source://typhoeus//lib/typhoeus/cache/redis.rb#2
module Typhoeus::Cache; end

# This module provides a simple way to cache HTTP responses using Dalli.
#
# source://typhoeus//lib/typhoeus/cache/dalli.rb#4
class Typhoeus::Cache::Dalli
  # @example Set Dalli as the Typhoeus cache backend
  #   Typhoeus::Config.cache = Typhoeus::Cache::Dalli.new
  # @option options
  # @param client [Dalli::Client] A connection to the cache server. Defaults to `Dalli::Client.new`
  # @param options [Hash] Options
  # @return [Dalli] a new instance of Dalli
  #
  # source://typhoeus//lib/typhoeus/cache/dalli.rb#14
  def initialize(client = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://typhoeus//lib/typhoeus/cache/dalli.rb#19
  def get(request); end

  # source://typhoeus//lib/typhoeus/cache/dalli.rb#23
  def set(request, response); end
end

# This module provides a simple way to cache HTTP responses in using the Rails cache.
#
# source://typhoeus//lib/typhoeus/cache/rails.rb#4
class Typhoeus::Cache::Rails
  # @example Use the Rails cache setup to cache Typhoeus responses.
  #   Typhoeus::Config.cache = Typhoeus::Cache::Rails.new
  # @option options
  # @param cache [ActiveSupport::Cache::Store] A Rails cache backend. Defaults to Rails.cache.
  # @param options [Hash] Options
  # @return [Rails] a new instance of Rails
  #
  # source://typhoeus//lib/typhoeus/cache/rails.rb#14
  def initialize(cache = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://typhoeus//lib/typhoeus/cache/rails.rb#19
  def get(request); end

  # source://typhoeus//lib/typhoeus/cache/rails.rb#23
  def set(request, response); end
end

# This module provides a simple way to cache HTTP responses in Redis.
#
# source://typhoeus//lib/typhoeus/cache/redis.rb#4
class Typhoeus::Cache::Redis
  # @example Set Redis as the Typhoeus cache backend
  #   Typhoeus::Config.cache = Typhoeus::Cache::Redis.new
  # @option options
  # @param redis [Redis] A connection to Redis. Defaults to `Redis.new`, which uses the
  #   `REDIS_URL` environment variable to connect
  # @param options [Hash] Options
  # @return [Redis] a new instance of Redis
  #
  # source://typhoeus//lib/typhoeus/cache/redis.rb#15
  def initialize(redis = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://typhoeus//lib/typhoeus/cache/redis.rb#20
  def get(request); end

  # source://typhoeus//lib/typhoeus/cache/redis.rb#26
  def set(request, response); end
end

# The Typhoeus configuration used to set global
# options.
#
# @example Set the configuration options within a block.
#   Typhoeus.configure do |config|
#   config.verbose = true
#   end
# @example Set the configuration directly.
#   Typhoeus::Config.verbose = true
#
# source://typhoeus//lib/typhoeus/config.rb#12
module Typhoeus::Config
  extend ::Typhoeus::Config

  # Defines whether the connection is blocked.
  # Defaults to false. When set to true, only
  # stubbed requests are allowed. A
  # {Typhoeus::Errors::NoStub} error is raised,
  # when trying to do a real request. It's possible
  # to work around inside
  # {Typhoeus.with_connection}.
  #
  # @return [Boolean]
  # @see Typhoeus::Request::BlockConnection
  # @see Typhoeus::Hydra::BlockConnection
  # @see Typhoeus#with_connection
  # @see Typhoeus::Errors::NoStub
  #
  # source://typhoeus//lib/typhoeus/config.rb#29
  def block_connection; end

  # Defines whether the connection is blocked.
  # Defaults to false. When set to true, only
  # stubbed requests are allowed. A
  # {Typhoeus::Errors::NoStub} error is raised,
  # when trying to do a real request. It's possible
  # to work around inside
  # {Typhoeus.with_connection}.
  #
  # @return [Boolean]
  # @see Typhoeus::Request::BlockConnection
  # @see Typhoeus::Hydra::BlockConnection
  # @see Typhoeus#with_connection
  # @see Typhoeus::Errors::NoStub
  #
  # source://typhoeus//lib/typhoeus/config.rb#29
  def block_connection=(_arg0); end

  # Defines whether requests are cached.
  #
  # @return [Object]
  # @see Typhoeus::Hydra::Cacheable
  # @see Typhoeus::Request::Cacheable
  #
  # source://typhoeus//lib/typhoeus/config.rb#53
  def cache; end

  # Defines whether requests are cached.
  #
  # @return [Object]
  # @see Typhoeus::Hydra::Cacheable
  # @see Typhoeus::Request::Cacheable
  #
  # source://typhoeus//lib/typhoeus/config.rb#53
  def cache=(_arg0); end

  # Defines whether GET requests are memoized when using the {Typhoeus::Hydra}.
  #
  # @return [Boolean]
  # @see Typhoeus::Hydra
  # @see Typhoeus::Hydra::Memoizable
  #
  # source://typhoeus//lib/typhoeus/config.rb#37
  def memoize; end

  # Defines whether GET requests are memoized when using the {Typhoeus::Hydra}.
  #
  # @return [Boolean]
  # @see Typhoeus::Hydra
  # @see Typhoeus::Hydra::Memoizable
  #
  # source://typhoeus//lib/typhoeus/config.rb#37
  def memoize=(_arg0); end

  # Defines wether to use a proxy server for every request.
  #
  # @return [String]
  # @see Typhoeus::Request#set_defaults
  #
  # source://typhoeus//lib/typhoeus/config.rb#67
  def proxy; end

  # Defines wether to use a proxy server for every request.
  #
  # @return [String]
  # @see Typhoeus::Request#set_defaults
  #
  # source://typhoeus//lib/typhoeus/config.rb#67
  def proxy=(_arg0); end

  # Defines whether to use a default user agent.
  #
  # @return [String]
  # @see Typhoeus::Request#set_defaults
  #
  # source://typhoeus//lib/typhoeus/config.rb#60
  def user_agent; end

  # Defines whether to use a default user agent.
  #
  # @return [String]
  # @see Typhoeus::Request#set_defaults
  #
  # source://typhoeus//lib/typhoeus/config.rb#60
  def user_agent=(_arg0); end

  # Defines whether curls debug output is shown.
  # Unfortunately it prints to stderr.
  #
  # @return [Boolean]
  # @see http://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTVERBOSE
  #
  # source://typhoeus//lib/typhoeus/config.rb#45
  def verbose; end

  # Defines whether curls debug output is shown.
  # Unfortunately it prints to stderr.
  #
  # @return [Boolean]
  # @see http://curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTVERBOSE
  #
  # source://typhoeus//lib/typhoeus/config.rb#45
  def verbose=(_arg0); end
end

# This is a Factory for easies to be used in the hydra.
# Before an easy is ready to be added to a multi the
# on_complete callback to be set.
# This is done by this class.
#
# @api private
#
# source://typhoeus//lib/typhoeus/easy_factory.rb#11
class Typhoeus::EasyFactory
  # Create an easy factory.
  #
  # @api private
  # @example Create easy factory.
  #   Typhoeus::Hydra::EasyFactory.new(request, hydra)
  # @param request [Request] The request to build an easy for.
  # @param hydra [Hydra] The hydra to build an easy for.
  # @return [EasyFactory] a new instance of EasyFactory
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#58
  def initialize(request, hydra = T.unsafe(nil)); end

  # Return the easy in question.
  #
  # @api private
  # @example Return easy.
  #   easy_factory.easy
  # @return [Ethon::Easy] The easy.
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#69
  def easy; end

  # Fabricated easy.
  #
  # @api private
  # @example Prepared easy.
  #   easy_factory.get
  # @return [Ethon::Easy] The easy.
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#79
  def get; end

  # Returns the hydra provided.
  #
  # @api private
  # @return [Typhoeus::Hydra]
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#49
  def hydra; end

  # Returns the request provided.
  #
  # @api private
  # @return [Typhoeus::Request]
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#44
  def request; end

  private

  # @api private
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#172
  def provide_help(option); end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#96
  def sanitize(options); end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#123
  def sanitize_timeout!(options, timeout); end

  # Sets on_complete callback on easy in order to be able to
  # track progress.
  #
  # @api private
  # @example Set callback.
  #   easy_factory.set_callback
  # @return [Ethon::Easy] The easy.
  #
  # source://typhoeus//lib/typhoeus/easy_factory.rb#141
  def set_callback; end
end

# @api private
#
# source://typhoeus//lib/typhoeus/easy_factory.rb#30
Typhoeus::EasyFactory::CHANGED_OPTIONS = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://typhoeus//lib/typhoeus/easy_factory.rb#36
Typhoeus::EasyFactory::REMOVED_OPTIONS = T.let(T.unsafe(nil), Set)

# @api private
#
# source://typhoeus//lib/typhoeus/easy_factory.rb#13
Typhoeus::EasyFactory::RENAMED_OPTIONS = T.let(T.unsafe(nil), Hash)

# @api private
#
# source://typhoeus//lib/typhoeus/easy_factory.rb#38
Typhoeus::EasyFactory::SANITIZE_IGNORE = T.let(T.unsafe(nil), Set)

# @api private
#
# source://typhoeus//lib/typhoeus/easy_factory.rb#39
Typhoeus::EasyFactory::SANITIZE_TIMEOUT = T.let(T.unsafe(nil), Set)

# This namespace contains all errors raised by Typhoeus.
#
# source://typhoeus//lib/typhoeus/errors/typhoeus_error.rb#2
module Typhoeus::Errors; end

# Raises when block connection is turned on
# and making a real request.
#
# source://typhoeus//lib/typhoeus/errors/no_stub.rb#6
class Typhoeus::Errors::NoStub < ::Typhoeus::Errors::TyphoeusError
  # @return [NoStub] a new instance of NoStub
  #
  # source://typhoeus//lib/typhoeus/errors/no_stub.rb#7
  def initialize(request); end
end

# Default typhoeus error class for all custom errors.
#
# source://typhoeus//lib/typhoeus/errors/typhoeus_error.rb#5
class Typhoeus::Errors::TyphoeusError < ::StandardError; end

# This class represents an expectation. It is part
# of the stubbing mechanism. An expectation contains
# a url and options, like a request. They are compared
# to the request url and options in order to evaluate
# whether they match. If that's the case, the attached
# responses are returned one by one.
#
# @example Stub a request and get specified response.
#   expected = Typhoeus::Response.new
#   Typhoeus.stub("www.example.com").and_return(expected)
#
#   actual = Typhoeus.get("www.example.com")
#   expected == actual
#   #=> true
# @example Stub a request and get a lazily-constructed response containing data from actual widgets that exist in the system when the stubbed request is made.
#   Typhoeus.stub("www.example.com/widgets") do
#   actual_widgets = Widget.all
#   Typhoeus::Response.new(
#   :body => actual_widgets.inject([]) do |ids, widget|
#   ids << widget.id
#   end.join(",")
#   )
#   end
# @example Stub a request and get a lazily-constructed response in the format requested.
#   Typhoeus.stub("www.example.com") do |request|
#   accept = (request.options[:headers]||{})['Accept'] || "application/json"
#   format = accept.split(",").first
#   body_obj = { 'things' => [ { 'id' => 'foo' } ] }
#
#   Typhoeus::Response.new(
#   :headers => {
#   'Content-Type' => format
#   },
#   :body => SERIALIZERS[format].serialize(body_obj)
#   )
#   end
#
# source://typhoeus//lib/typhoeus/expectation.rb#41
class Typhoeus::Expectation
  # Creates an expectation.
  #
  # @api private
  # @example Create expectation.
  #   Typhoeus::Expectation.new(base_url)
  # @return [Expectation] The created expectation.
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#108
  def initialize(base_url, options = T.unsafe(nil)); end

  # Specify what should be returned,
  # when this expectation is hit.
  #
  # @example Add response.
  #   expectation.and_return(response)
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#138
  def and_return(response = T.unsafe(nil), &block); end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#44
  def base_url; end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#50
  def from; end

  # Checks whether this expectation matches
  # the provided request.
  #
  # @api private
  # @example Check if request matches.
  #   expectation.matches? request
  # @param request [Request] The request to check.
  # @return [Boolean] True when matches, else false.
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#154
  def matches?(request); end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#47
  def options; end

  # Return the response. When there are
  # multiple responses, they are returned one
  # by one.
  #
  # @api private
  # @example Return response.
  #   expectation.response
  # @return [Response] The response.
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#180
  def response(request); end

  # Return canned responses.
  #
  # @api private
  # @example Return responses.
  #   expectation.responses
  # @return [Array<Typhoeus::Response>] The responses.
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#166
  def responses; end

  # Set from value to mark an expectaion. Useful for
  # other libraries, e.g. WebMock.
  #
  # @api private
  # @example Mark expectation.
  #   expectation.from(:webmock)
  # @param value [String] Value to set.
  # @return [Expectation] Returns self.
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#126
  def stubbed_from(value); end

  private

  # Check whether the options matches the request options.
  # I checks options and original options.
  #
  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#194
  def options_match?(request); end

  # Check whether the base_url matches the request url.
  # The base_url can be a string, regex or nil. String and
  # regexp are checked, nil is always true, else false.
  #
  # Nil serves as a placeholder in case you want to match
  # all urls.
  #
  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/expectation.rb#204
  def url_match?(request_url); end

  class << self
    # Returns all expectations.
    #
    # @example Return expectations.
    #   Typhoeus::Expectation.all
    # @return [Array<Typhoeus::Expectation>] The expectations.
    #
    # source://typhoeus//lib/typhoeus/expectation.rb#60
    def all; end

    # Clears expectations. This is handy while
    # testing, and you want to make sure that
    # you don't get canned responses.
    #
    # @example Clear expectations.
    #   Typhoeus::Expectation.clear
    #
    # source://typhoeus//lib/typhoeus/expectation.rb#70
    def clear; end

    # @api private
    #
    # source://typhoeus//lib/typhoeus/expectation.rb#93
    def find_by(request); end

    # Returns stubbed response matching the
    # provided request.
    #
    # @api private
    # @example Find response
    #   Typhoeus::Expectation.response_for(request)
    # @return [Typhoeus::Response] The stubbed response from a
    #   matching expectation, or nil if no matching expectation
    #   is found.
    #
    # source://typhoeus//lib/typhoeus/expectation.rb#85
    def response_for(request); end
  end
end

# Hydra manages making parallel HTTP requests. This
# is achieved by using libcurls multi interface:
# http://curl.haxx.se/libcurl/c/libcurl-multi.html
# The benefits are that you don't have to worry running
# the requests by yourself.
#
# Hydra will also handle how many requests you can
# make in parallel. Things will get flakey if you
# try to make too many requests at the same time.
# The built in limit is 200. When more requests than
# that are queued up, hydra will save them for later
# and start the requests as others are finished. You
# can raise or lower the concurrency limit through
# the Hydra constructor.
#
# Regarding the asynchronous behavior of the hydra,
# it is important to know that this is completely hidden
# from the developer and you are free to apply
# whatever technique you want to your code. That should not
# conflict with libcurls internal concurrency mechanism.
#
# @example Use the hydra to do multiple requests.
#   hydra = Typhoeus::Hydra.new
#   requests = (0..9).map{ Typhoeus::Request.new("www.example.com") }
#   requests.each{ |request| hydra.queue(request) }
#   hydra.run
# @note Callbacks are going to delay the request
#   execution.
#
# source://typhoeus//lib/typhoeus/hydra/addable.rb#2
class Typhoeus::Hydra
  include ::Typhoeus::Hydra::Addable
  include ::Typhoeus::Hydra::Runnable
  include ::Typhoeus::Hydra::Memoizable
  include ::Typhoeus::Hydra::Cacheable
  include ::Typhoeus::Hydra::BlockConnection
  include ::Typhoeus::Hydra::Stubbable
  include ::Typhoeus::Hydra::Before
  include ::Typhoeus::Hydra::Queueable

  # Create a new hydra. All
  # {http://rubydoc.info/github/typhoeus/ethon/Ethon/Multi#initialize-instance_method Ethon::Multi#initialize}
  # options are also available.
  #
  # @example Create a hydra.
  #   Typhoeus::Hydra.new
  # @example Create a hydra with max_concurrency.
  #   Typhoeus::Hydra.new(max_concurrency: 20)
  # @option options
  # @param options [Hash] The options hash.
  # @return [Hydra] a new instance of Hydra
  # @see http://rubydoc.info/github/typhoeus/ethon/Ethon/Multi#initialize-instance_method Ethon::Multi#initialize
  #
  # source://typhoeus//lib/typhoeus/hydra.rb#89
  def initialize(options = T.unsafe(nil)); end

  # @example Set max_concurrency.
  #   Typhoeus::Hydra.new(max_concurrency: 20)
  #
  # source://typhoeus//lib/typhoeus/hydra.rb#53
  def max_concurrency; end

  # @example Set max_concurrency.
  #   Typhoeus::Hydra.new(max_concurrency: 20)
  #
  # source://typhoeus//lib/typhoeus/hydra.rb#53
  def max_concurrency=(_arg0); end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/hydra.rb#56
  def multi; end

  class << self
    # Returns a memoized hydra instance.
    #
    # @example Get a hydra.
    #   Typhoeus::Hydra.hydra
    # @return [Typhoeus::Hydra] A new hydra.
    #
    # source://typhoeus//lib/typhoeus/hydra.rb#66
    def hydra; end
  end
end

# This module handles the request adding on
# hydra.
#
# @api private
#
# source://typhoeus//lib/typhoeus/hydra/addable.rb#8
module Typhoeus::Hydra::Addable
  # Adds request to multi.
  #
  # @api private
  # @example Add request.
  #   hydra.add(request)
  # @param request [Typhoeus::Request] to add.
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/hydra/addable.rb#18
  def add(request); end
end

# This module provides a way to hook into before
# a request gets queued in hydra. This is very powerful
# and you should be careful because when you accidently
# return a falsy value the request won't be executed.
#
# @api private
#
# source://typhoeus//lib/typhoeus/hydra/before.rb#10
module Typhoeus::Hydra::Before
  # Overrride add in order to execute callbacks in
  # Typhoeus.before. Will break and return when a
  # callback returns nil, false or a response. Calls super
  # otherwise.
  #
  # @api private
  # @example Add the request.
  #   hydra.add(request)
  #
  # source://typhoeus//lib/typhoeus/hydra/before.rb#19
  def add(request); end
end

# This module handles the blocked connection request mode on
# the hydra side, where only stubbed requests
# are allowed.
# Connection blocking needs to be turned on:
#   Typhoeus.configure do |config|
#     config.block_connection = true
#   end
#
# When trying to do real requests a NoStub error
# is raised.
#
# @api private
#
# source://typhoeus//lib/typhoeus/hydra/block_connection.rb#16
module Typhoeus::Hydra::BlockConnection
  # Overrides add in order to check before if block connection
  # is turned on. If thats the case a NoStub error is
  # raised.
  #
  # @api private
  # @example Add the request.
  #   hydra.add(request)
  # @param request [Request] The request to enqueue.
  #
  # source://typhoeus//lib/typhoeus/hydra/block_connection.rb#26
  def add(request); end
end

# source://typhoeus//lib/typhoeus/hydra/cacheable.rb#3
module Typhoeus::Hydra::Cacheable
  # source://typhoeus//lib/typhoeus/hydra/cacheable.rb#4
  def add(request); end
end

# This module handles the GET request memoization
# on the hydra side. Memoization needs to be turned
# on:
#   Typhoeus.configure do |config|
#     config.memoize = true
#   end
#
# @api private
#
# source://typhoeus//lib/typhoeus/hydra/memoizable.rb#12
module Typhoeus::Hydra::Memoizable
  # Overrides add in order to check before if request
  # is memoizable and already in memory. If thats the case,
  # super is not called, instead the response is set and
  # the on_complete callback called.
  #
  # @api private
  # @example Add the request.
  #   hydra.add(request)
  # @param request [Request] The request to add.
  # @return [Request] The added request.
  #
  # source://typhoeus//lib/typhoeus/hydra/memoizable.rb#35
  def add(request); end

  # Return the memory.
  #
  # @api private
  # @example Return the memory.
  #   hydra.memory
  # @return [Hash] The memory.
  #
  # source://typhoeus//lib/typhoeus/hydra/memoizable.rb#20
  def memory; end

  # Overrides run to make sure the memory is cleared after
  # each run.
  #
  # @api private
  # @example Run hydra.
  #   hydra.run
  #
  # source://typhoeus//lib/typhoeus/hydra/memoizable.rb#50
  def run; end
end

# This module handles the request queueing on
# hydra.
#
# @api private
#
# source://typhoeus//lib/typhoeus/hydra/queueable.rb#8
module Typhoeus::Hydra::Queueable
  # Abort the current hydra run as good as
  # possible. This means that it only
  # clears the queued requests and can't do
  # anything about already running requests.
  #
  # @api private
  # @example Abort hydra.
  #   hydra.abort
  #
  # source://typhoeus//lib/typhoeus/hydra/queueable.rb#27
  def abort; end

  # Removes a request from queued_requests and
  # adds it to the hydra in order to be
  # performed next.
  #
  # @api private
  # @example Dequeue request.
  #   hydra.dequeue
  # @since 0.6.4
  #
  # source://typhoeus//lib/typhoeus/hydra/queueable.rb#62
  def dequeue; end

  # Removes requests from queued_requests and
  # adds them to the hydra until max_concurrency
  # is reached.
  #
  # @api private
  # @example Dequeue requests.
  #   hydra.dequeue_many
  # @since 0.6.8
  #
  # source://typhoeus//lib/typhoeus/hydra/queueable.rb#74
  def dequeue_many; end

  # Enqueues a request in order to be performed
  # by the hydra. This can even be done while
  # the hydra is running. Also sets hydra on
  # request.
  #
  # @api private
  # @example Queue request.
  #   hydra.queue(request)
  #
  # source://typhoeus//lib/typhoeus/hydra/queueable.rb#38
  def queue(request); end

  # Pushes a request to the front of the queue,
  # to be performed by the hydra. Also sets hydra
  # on request
  #
  # @api private
  # @example Queue reques.
  #   hydra.queue_front(request)
  #
  # source://typhoeus//lib/typhoeus/hydra/queueable.rb#49
  def queue_front(request); end

  # Return the queued requests.
  #
  # @api private
  # @example Return queued requests.
  #   hydra.queued_requests
  # @return [Array<Typhoeus::Request>] The queued requests.
  #
  # source://typhoeus//lib/typhoeus/hydra/queueable.rb#16
  def queued_requests; end
end

# This module contains logic to run a hydra.
#
# source://typhoeus//lib/typhoeus/hydra/runnable.rb#5
module Typhoeus::Hydra::Runnable
  # Start the hydra run.
  #
  # @example Start hydra run.
  #   hydra.run
  # @return [Symbol] Return value from multi.perform.
  #
  # source://typhoeus//lib/typhoeus/hydra/runnable.rb#13
  def run; end
end

# This module handles stubbing on the hydra side.
# It plays well with the block_connection configuration,
# which raises when you make a request which is not stubbed.
#
# @api private
#
# source://typhoeus//lib/typhoeus/hydra/stubbable.rb#9
module Typhoeus::Hydra::Stubbable
  # Override add in order to check for matching expecations.
  # When an expecation is found, super is not called. Instead a
  # canned response is assigned to the request.
  #
  # @api private
  # @example Add the request.
  #   hydra.add(request)
  #
  # source://typhoeus//lib/typhoeus/hydra/stubbable.rb#17
  def add(request); end
end

# The easy pool stores already initialized
# easy handles for future use. This is useful
# because creating them is expensive.
#
# @api private
#
# source://typhoeus//lib/typhoeus/pool.rb#10
module Typhoeus::Pool
  class << self
    # Clear the pool
    #
    # @api private
    #
    # source://typhoeus//lib/typhoeus/pool.rb#47
    def clear; end

    # @api private
    #
    # source://typhoeus//lib/typhoeus/pool.rb#66
    def easies; end

    # Return an easy from the pool.
    #
    # @api private
    # @example Return easy.
    #   Typhoeus::Pool.get
    # @return [Ethon::Easy] The easy.
    #
    # source://typhoeus//lib/typhoeus/pool.rb#32
    def get; end

    # Releases easy into the pool. The easy handle is
    # reset before it gets back in.
    #
    # @api private
    # @example Release easy.
    #   Typhoeus::Pool.release(easy)
    #
    # source://typhoeus//lib/typhoeus/pool.rb#19
    def release(easy); end

    # Use yielded easy, will be released automatically afterwards.
    #
    # @api private
    # @example Use easy.
    #   Typhoeus::Pool.with_easy do |easy|
    #   # use easy
    #   end
    #
    # source://typhoeus//lib/typhoeus/pool.rb#57
    def with_easy(&block); end
  end
end

# This class represents a request.
#
# @example Make a request with the shortcut.
#   response = Typhoeus.get("www.example.com")
# @example Simplest request.
#   response = Typhoeus::Request.new("www.example.com").run
# @example Request with url parameters.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   params: {a: 1}
#   ).run
# @example Request with a body.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   body: {b: 2}
#   ).run
# @example Request with parameters and body.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   params: {a: 1},
#   body: {b: 2}
#   ).run
# @example Create a request and allow follow redirections.
#   response = Typhoeus::Request.new(
#   "www.example.com",
#   followlocation: true
#   ).run
# @see Typhoeus::Hydra
# @see Typhoeus::Response
# @see Typhoeus::Request::Actions
#
# source://typhoeus//lib/typhoeus/request/actions.rb#2
class Typhoeus::Request
  include ::Typhoeus::Request::Callbacks::Types
  include ::Typhoeus::Request::Callbacks
  include ::Typhoeus::Request::Streamable
  include ::Typhoeus::Request::Marshal
  include ::Typhoeus::Request::Operations
  include ::Typhoeus::Request::Responseable
  include ::Typhoeus::Request::Memoizable
  include ::Typhoeus::Request::Cacheable
  include ::Typhoeus::Request::BlockConnection
  include ::Typhoeus::Request::Stubbable
  include ::Typhoeus::Request::Before
  extend ::Typhoeus::Request::Actions

  # Creates a new request.
  #
  # @example Simplest request.
  #   response = Typhoeus::Request.new("www.example.com").run
  # @example Request with url parameters.
  #   response = Typhoeus::Request.new(
  #   "www.example.com",
  #   params: {a: 1}
  #   ).run
  # @example Request with a body.
  #   response = Typhoeus::Request.new(
  #   "www.example.com",
  #   body: {b: 2}
  #   ).run
  # @example Request with parameters and body.
  #   response = Typhoeus::Request.new(
  #   "www.example.com",
  #   params: {a: 1},
  #   body: {b: 2}
  #   ).run
  # @example Create a request and allow follow redirections.
  #   response = Typhoeus::Request.new(
  #   "www.example.com",
  #   followlocation: true
  #   ).run
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Typhoeus::Request] The request.
  # @see Typhoeus::Hydra
  # @see Typhoeus::Response
  # @see Typhoeus::Request::Actions
  #
  # source://typhoeus//lib/typhoeus/request.rb#113
  def initialize(base_url, options = T.unsafe(nil)); end

  # Returns the provided base url.
  #
  # @return [String]
  #
  # source://typhoeus//lib/typhoeus/request.rb#42
  def base_url; end

  # Returns the provided base url.
  #
  # @return [String]
  #
  # source://typhoeus//lib/typhoeus/request.rb#42
  def base_url=(_arg0); end

  # @api private
  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/request.rb#66
  def block_connection; end

  # @api private
  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/request.rb#66
  def block_connection=(_arg0); end

  # Returns a cache key for use with caching methods that required a string
  # for a key. Will get used by ActiveSupport::Cache stores automatically.
  #
  # @return [String] The cache key.
  #
  # source://typhoeus//lib/typhoeus/request.rb#165
  def cache_key; end

  # Mimics libcurls POST body generation. This is not accurate, but good
  # enough for VCR.
  #
  # @api private
  # @return [String] The encoded body.
  #   otherwise.
  #
  # source://typhoeus//lib/typhoeus/request.rb#176
  def encoded_body; end

  # Returns whether other is equal to self.
  #
  # @api private
  # @example Are request equal?
  #   request.eql?(other_request)
  # @param other [Object] The object to check.
  # @return [Boolean] Returns true if equal, else false.
  #
  # source://typhoeus//lib/typhoeus/request.rb#146
  def eql?(other); end

  # Overrides Object#hash.
  #
  # @api private
  # @return [Integer] The integer representing the request.
  #
  # source://typhoeus//lib/typhoeus/request.rb#157
  def hash; end

  # Returns the hydra in which the request ran, if any.
  #
  # @api private
  # @return [Typhoeus::Hydra]
  #
  # source://typhoeus//lib/typhoeus/request.rb#54
  def hydra; end

  # Returns the hydra in which the request ran, if any.
  #
  # @api private
  # @return [Typhoeus::Hydra]
  #
  # source://typhoeus//lib/typhoeus/request.rb#54
  def hydra=(_arg0); end

  # Returns options, which includes default parameters.
  #
  # @return [Hash]
  #
  # source://typhoeus//lib/typhoeus/request.rb#47
  def options; end

  # Returns options, which includes default parameters.
  #
  # @return [Hash]
  #
  # source://typhoeus//lib/typhoeus/request.rb#47
  def options=(_arg0); end

  # Returns the original options provided.
  #
  # @api private
  # @return [Hash]
  #
  # source://typhoeus//lib/typhoeus/request.rb#61
  def original_options; end

  # Returns the original options provided.
  #
  # @api private
  # @return [Hash]
  #
  # source://typhoeus//lib/typhoeus/request.rb#61
  def original_options=(_arg0); end

  # Return the url.
  # In contrast to base_url which returns the value you specified, url returns
  # the full url including the parameters.
  #
  # @example Get the url.
  #   request.url
  # @since 0.5.5
  #
  # source://typhoeus//lib/typhoeus/request.rb#129
  def url; end

  private

  # Checks if two hashes are equal or not, discarding
  # first-level hash order.
  #
  # @param left [Hash]
  # @param right [Hash] hash to check for equality
  # @return [Boolean] Returns true if hashes have
  #   same values for same keys and same length,
  #   even if the keys are given in a different order.
  #
  # source://typhoeus//lib/typhoeus/request.rb#191
  def fuzzy_hash_eql?(left, right); end

  # source://typhoeus//lib/typhoeus/request.rb#199
  def hashable_string_for(obj); end

  # Sets default header and verbose when turned on.
  #
  # source://typhoeus//lib/typhoeus/request.rb#211
  def set_defaults; end
end

# Module containing logic about shortcuts to
# http methods. Like
#   Typhoeus.get("www.example.com")
#
# source://typhoeus//lib/typhoeus/request/actions.rb#7
module Typhoeus::Request::Actions
  # Make a delete request.
  #
  # @example Make delete request.
  #   Typhoeus.delete("www.example.com")
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/request/actions.rb#72
  def delete(base_url, options = T.unsafe(nil)); end

  # Make a get request.
  #
  # @example Make get request.
  #   Typhoeus.get("www.example.com")
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/request/actions.rb#21
  def get(base_url, options = T.unsafe(nil)); end

  # Make a head request.
  #
  # @example Make head request.
  #   Typhoeus.head("www.example.com")
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/request/actions.rb#88
  def head(base_url, options = T.unsafe(nil)); end

  # Make a options request.
  #
  # @example Make options request.
  #   Typhoeus.options("www.example.com")
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/request/actions.rb#120
  def options(base_url, options = T.unsafe(nil)); end

  # Make a patch request.
  #
  # @example Make patch request.
  #   Typhoeus.patch("www.example.com")
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/request/actions.rb#104
  def patch(base_url, options = T.unsafe(nil)); end

  # Make a post request.
  #
  # @example Make post request.
  #   Typhoeus.post("www.example.com")
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/request/actions.rb#37
  def post(base_url, options = T.unsafe(nil)); end

  # Make a put request.
  #
  # @example Make put request.
  #   Typhoeus.put("www.example.com")
  # @note See {http://rubydoc.info/github/typhoeus/ethon/Ethon/Easy/Options Ethon::Easy::Options} for more options.
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @param base_url [String] The url to request.
  # @param options [options] The options.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/request/actions.rb#56
  def put(base_url, options = T.unsafe(nil)); end
end

# This module provides a way to hook into before
# a request runs. This is very powerful
# and you should be careful because when you accidently
# return a falsy value the request won't be executed.
#
# @api private
#
# source://typhoeus//lib/typhoeus/request/before.rb#10
module Typhoeus::Request::Before
  # Overrride run in order to execute callbacks in
  # Typhoeus.before. Will break and return when a
  # callback returns nil or false. Calls super
  # otherwise.
  #
  # @api private
  # @example Run the request.
  #   request.run
  #
  # source://typhoeus//lib/typhoeus/request/before.rb#19
  def run; end
end

# This module handles the blocked connection request mode on
# the request side, where only stubbed requests
# are allowed.
# Connection blocking needs to be turned on:
#   Typhoeus.configure do |config|
#     config.block_connection = true
#   end
#
# When trying to do real requests a NoStub error
# is raised.
#
# @api private
#
# source://typhoeus//lib/typhoeus/request/block_connection.rb#16
module Typhoeus::Request::BlockConnection
  # Returns wether a request is blocked or not. Takes
  # request.block_connection and Typhoeus::Config.block_connection
  # into consideration.
  #
  # @api private
  # @example Blocked?
  #   request.blocked?
  # @return [Boolean] True if blocked, false else.
  #
  # source://typhoeus//lib/typhoeus/request/block_connection.rb#43
  def blocked?; end

  # Overrides run in order to check before if block connection
  # is turned on. If thats the case a NoStub error is
  # raised.
  #
  # @api private
  # @example Run request.
  #   request.run
  # @raise [Typhoeus::Errors::NoStub] If connection is blocked
  #   and no stub defined.
  #
  # source://typhoeus//lib/typhoeus/request/block_connection.rb#27
  def run; end
end

# source://typhoeus//lib/typhoeus/request/cacheable.rb#3
module Typhoeus::Request::Cacheable
  # source://typhoeus//lib/typhoeus/request/cacheable.rb#26
  def cache_ttl; end

  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/request/cacheable.rb#9
  def cacheable?; end

  # source://typhoeus//lib/typhoeus/request/cacheable.rb#22
  def cached_response; end

  # source://typhoeus//lib/typhoeus/request/cacheable.rb#4
  def response=(response); end

  # source://typhoeus//lib/typhoeus/request/cacheable.rb#13
  def run; end

  private

  # source://typhoeus//lib/typhoeus/request/cacheable.rb#32
  def cache; end
end

# This module contains the logic for the response callbacks.
#
# You can set multiple callbacks, which are then executed
# in the same order.
#
#   request.on_complete { |response| p 1 }
#   request.on_complete { |response| p 2 }
#   request.execute_callbacks
#   #=> 1
#   #=> 2
#
# You can clear the callbacks:
#
#   request.on_complete { |response| p 1 }
#   request.on_complete { |response| p 2 }
#   request.on_complete.clear
#   request.execute_callbacks
#   #=> nil
#
# @note If you're using the Hydra to execute multiple
#   requests, then callbacks are delaying the
#   request execution.
#
# source://typhoeus//lib/typhoeus/request/callbacks.rb#26
module Typhoeus::Request::Callbacks
  # Execute necessary callback and yields response. This
  # include in every case on_complete and on_progress, on_success
  # if successful and on_failure if not.
  #
  # @api private
  # @example Execute callbacks.
  #   request.execute_callbacks
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/request/callbacks.rb#136
  def execute_callbacks; end

  # Execute the headers callbacks and yields response.
  #
  # @api private
  # @example Execute callbacks.
  #   request.execute_headers_callbacks
  # @return [Array<Object>] The results of the on_headers callbacks.
  #
  # source://typhoeus//lib/typhoeus/request/callbacks.rb#120
  def execute_headers_callbacks(response); end
end

# source://typhoeus//lib/typhoeus/request/callbacks.rb#28
module Typhoeus::Request::Callbacks::Types
  # Set on_complete callback.
  #
  # @example Set on_complete.
  #   request.on_complete { |response| p "yay" }
  # @param block [Block] The block to execute.
  # @return [Array<Block>] All on_complete blocks.
  # @yield [Typhoeus::Response]
  #
  # source://typhoeus//lib/typhoeus/request/callbacks.rb#39
  def on_complete(&block); end

  # Set on_failure callback.
  #
  # @example Set on_failure.
  #   request.on_failure { |response| p "yay" }
  # @param block [Block] The block to execute.
  # @return [Array<Block>] All on_failure blocks.
  # @yield [Typhoeus::Response]
  #
  # source://typhoeus//lib/typhoeus/request/callbacks.rb#71
  def on_failure(&block); end

  # Set on_headers callback.
  #
  # @example Set on_headers.
  #   request.on_headers { |response| p "yay" }
  # @param block [Block] The block to execute.
  # @return [Array<Block>] All on_headers blocks.
  # @yield [Typhoeus::Response]
  #
  # source://typhoeus//lib/typhoeus/request/callbacks.rb#87
  def on_headers(&block); end

  # Set on_progress callback.
  #
  # @example Set on_progress.
  #   request.on_progress do |dltotal, dlnow, ultotal, ulnow|
  #   puts "dltotal (#{dltotal}), dlnow (#{dlnow}), ultotal (#{ultotal}), ulnow (#{ulnow})"
  #   end
  # @param block [Block] The block to execute.
  # @return [Array<Block>] All on_progress blocks.
  # @yield [Typhoeus::Response]
  #
  # source://typhoeus//lib/typhoeus/request/callbacks.rb#105
  def on_progress(&block); end

  # Set on_success callback.
  #
  # @example Set on_success.
  #   request.on_success { |response| p "yay" }
  # @param block [Block] The block to execute.
  # @return [Array<Block>] All on_success blocks.
  # @yield [Typhoeus::Response]
  #
  # source://typhoeus//lib/typhoeus/request/callbacks.rb#55
  def on_success(&block); end
end

# This module contains custom serializer.
#
# source://typhoeus//lib/typhoeus/request/marshal.rb#5
module Typhoeus::Request::Marshal
  # Return the important data needed to serialize this Request, except the
  # request callbacks and `hydra`, since they cannot be marshalled.
  #
  # source://typhoeus//lib/typhoeus/request/marshal.rb#9
  def marshal_dump; end

  # Load.
  #
  # source://typhoeus//lib/typhoeus/request/marshal.rb#17
  def marshal_load(attributes); end
end

# This module handles the GET request memoization
# on the request side. Memoization needs to be turned
# on:
#   Typhoeus.configure do |config|
#     config.memoize = true
#   end
#
# @api private
#
# source://typhoeus//lib/typhoeus/request/memoizable.rb#12
module Typhoeus::Request::Memoizable
  # Return whether a request is memoizable.
  #
  # @api private
  # @example Is request memoizable?
  #   request.memoizable?
  # @return [Boolean] Return true if memoizable, false else.
  #
  # source://typhoeus//lib/typhoeus/request/memoizable.rb#32
  def memoizable?; end

  # Override response setter and memoizes response
  # if the request is memoizable.
  #
  # @api private
  # @example Set response.
  #   request.response = response
  # @param response [Response] The response to set.
  #
  # source://typhoeus//lib/typhoeus/request/memoizable.rb#21
  def response=(response); end
end

# This module contains everything what is necessary
# to make a single request.
#
# source://typhoeus//lib/typhoeus/request/operations.rb#6
module Typhoeus::Request::Operations
  # Sets a response, the request on the response
  # and executes the callbacks.
  #
  # @param response [Typhoeus::Response] The response.
  # @param bypass_memoization [Boolean] Wether to bypass
  #   memoization or not. Decides how the response is set.
  # @return [Typhoeus::Response] The response.
  #
  # source://typhoeus//lib/typhoeus/request/operations.rb#28
  def finish(response, bypass_memoization = T.unsafe(nil)); end

  # Run a request.
  #
  # @example Run a request.
  #   Typhoeus::Request.new("www.example.com").run
  # @return [Response] The response.
  #
  # source://typhoeus//lib/typhoeus/request/operations.rb#14
  def run; end
end

# This module contains logic for having a reponse
# getter and setter.
#
# source://typhoeus//lib/typhoeus/request/responseable.rb#6
module Typhoeus::Request::Responseable
  # Return the response.
  #
  # @example Return response.
  #   request.response
  # @return [Response] The response.
  #
  # source://typhoeus//lib/typhoeus/request/responseable.rb#24
  def response; end

  # Set the response.
  #
  # @example Set response.
  #   request.response = response
  # @param value [Response] The response to set.
  #
  # source://typhoeus//lib/typhoeus/request/responseable.rb#14
  def response=(value); end
end

# This module contians the logic for response streaming.
#
# source://typhoeus//lib/typhoeus/request/streamable.rb#5
module Typhoeus::Request::Streamable
  # Set on_body callback.
  #
  # This callback will be called each time a portion of the body is read from the socket.
  # Setting an on_body callback will cause the response body to be empty.
  #
  # @example Set on_body.
  #   request.on_body { |body_chunk, response| puts "Got #{body_chunk.bytesize} bytes" }
  # @param block [Block] The block to execute.
  # @return [Array<Block>] All on_body blocks.
  # @yield [Typhoeus::Response, String]
  #
  # source://typhoeus//lib/typhoeus/request/streamable.rb#20
  def on_body(&block); end

  # Is this request using streaming?
  #
  # @return [Boolean] True if any on_body blocks have been set.
  #
  # source://typhoeus//lib/typhoeus/request/streamable.rb#29
  def streaming?; end
end

# This module handles stubbing on the request side.
# It plays well with the block_connection configuration,
# which raises when you make a request which is not stubbed.
#
# @api private
#
# source://typhoeus//lib/typhoeus/request/stubbable.rb#9
module Typhoeus::Request::Stubbable
  # Override run in order to check for matching expectations.
  # When an expectation is found, super is not called. Instead a
  # canned response is assigned to the request.
  #
  # @api private
  # @example Run the request.
  #   request.run
  # @return [Response] The response.
  #
  # source://typhoeus//lib/typhoeus/request/stubbable.rb#19
  def run; end
end

# This class represents the response.
#
# source://typhoeus//lib/typhoeus/response/header.rb#4
class Typhoeus::Response
  include ::Typhoeus::Response::Informations
  include ::Typhoeus::Response::Status
  include ::Typhoeus::Response::Cacheable

  # Create a new response.
  #
  # @example Create a response.
  #   Response.new
  # @param options [Hash] The options hash.
  # @return [Response] The new response.
  #
  # source://typhoeus//lib/typhoeus/response.rb#45
  def initialize(options = T.unsafe(nil)); end

  # Returns the handled_response if it has
  # been defined; otherwise, returns the response
  #
  # @return [Object] The result of callbacks
  #   done on the response or the original response.
  #
  # source://typhoeus//lib/typhoeus/response.rb#64
  def handled_response; end

  # Set the handled response.
  #
  # source://typhoeus//lib/typhoeus/response.rb#32
  def handled_response=(_arg0); end

  # Returns whether this request is mocked
  # or not.
  #
  # @api private
  #
  # source://typhoeus//lib/typhoeus/response.rb#54
  def mock; end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/response.rb#35
  def mock=(_arg0); end

  # Returns whether this request is mocked
  # or not.
  #
  # @api private
  #
  # source://typhoeus//lib/typhoeus/response.rb#54
  def mock?; end

  # The provided options, which contain all the
  # informations about the request.
  #
  # @return [Hash]
  #
  # source://typhoeus//lib/typhoeus/response.rb#29
  def options; end

  # The provided options, which contain all the
  # informations about the request.
  #
  # @return [Hash]
  #
  # source://typhoeus//lib/typhoeus/response.rb#29
  def options=(_arg0); end

  # Remembers the corresponding request.
  #
  # @example Get request.
  #   request = Typhoeus::Request.new("www.example.com")
  #   response = request.run
  #   request == response.request
  #   #=> true
  # @return [Typhoeus::Request]
  #
  # source://typhoeus//lib/typhoeus/response.rb#23
  def request; end

  # Remembers the corresponding request.
  #
  # @example Get request.
  #   request = Typhoeus::Request.new("www.example.com")
  #   response = request.run
  #   request == response.request
  #   #=> true
  # @return [Typhoeus::Request]
  #
  # source://typhoeus//lib/typhoeus/response.rb#23
  def request=(_arg0); end
end

# source://typhoeus//lib/typhoeus/response/cacheable.rb#3
module Typhoeus::Response::Cacheable
  # Set the cache status, if we got response from cache
  # it will have cached? == true
  #
  # source://typhoeus//lib/typhoeus/response/cacheable.rb#7
  def cached=(_arg0); end

  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/response/cacheable.rb#9
  def cached?; end
end

# This class represents the response header.
# It can be accessed like a hash.
# Values can be strings (normal case) or arrays of strings (for duplicates headers)
#
# @api private
#
# source://typhoeus//lib/typhoeus/response/header.rb#11
class Typhoeus::Response::Header
  # Create a new header.
  #
  # @api private
  # @example Create new header.
  #   Header.new(raw)
  # @param raw [String] The raw header.
  # @return [Header] a new instance of Header
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#19
  def initialize(raw); end

  # @api private
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#26
  def [](key); end

  # Parses the raw header.
  #
  # @api private
  # @example Parse header.
  #   header.parse
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#34
  def parse; end

  private

  # Processes line and saves the result.
  #
  # @api private
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#54
  def process_line(header); end

  # Sets key value pair for self and @sanitized.
  #
  # @api private
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#62
  def process_pair(key, value); end

  # Returns the raw header or empty string.
  #
  # @api private
  # @example Return raw header.
  #   header.raw
  # @return [String] The raw header.
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#89
  def raw; end

  # Sets the default proc for the specified hash independent of the Ruby version.
  #
  # @api private
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#96
  def set_default_proc_on(hash, default_proc); end

  # Sets value for key in specified hash
  #
  # @api private
  # @return [void]
  #
  # source://typhoeus//lib/typhoeus/response/header.rb#70
  def set_value(key, value, hash); end
end

# This module contains logic about informations
# on a response.
#
# source://typhoeus//lib/typhoeus/response/informations.rb#6
module Typhoeus::Response::Informations
  # Return the time, in seconds, it took from the start
  # until the SSL/SSH connect/handshake to the remote
  # host was completed. This time is most often very near
  # to the pre transfer time, except for cases such as HTTP
  # pipelining where the pretransfer time can be delayed
  # due to waits in line for the pipeline and more.
  #
  # @example Get appconnect_time.
  #   response.appconnect_time
  # @return [Float] The appconnect_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#124
  def app_connect_time; end

  # Return the time, in seconds, it took from the start
  # until the SSL/SSH connect/handshake to the remote
  # host was completed. This time is most often very near
  # to the pre transfer time, except for cases such as HTTP
  # pipelining where the pretransfer time can be delayed
  # due to waits in line for the pipeline and more.
  #
  # @example Get appconnect_time.
  #   response.appconnect_time
  # @return [Float] The appconnect_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#124
  def appconnect_time; end

  # Return the http response body.
  #
  # @example Get response_body.
  #   response.response_body
  # @return [String] The response_body.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#36
  def body; end

  # Return the last received HTTP, FTP or SMTP response code.
  # The value will be zero if no server response code has
  # been received. Note that a proxy's CONNECT response should
  # be read with http_connect_code and not this.
  #
  # @example Get response_code.
  #   response.response_code
  # @return [Integer] The response_code.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#69
  def code; end

  # Return the time, in seconds, it took from the start
  # until the connect to the remote host (or proxy) was completed.
  #
  # @example Get connect_time.
  #   response.connect_time
  # @return [Float] The connect_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#151
  def connect_time; end

  # source://typhoeus//lib/typhoeus/response/informations.rb#217
  def debug_info; end

  # Return the last used effective url.
  #
  # @example Get effective_url.
  #   response.effective_url
  # @return [String] The effective_url.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#186
  def effective_url; end

  # Returns the response header.
  #
  # @example Return headers.
  #   response.headers
  # @return [Typhoeus::Header] The response header.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#227
  def headers; end

  # Returns the response header.
  #
  # @example Return headers.
  #   response.headers
  # @return [Typhoeus::Header] The response header.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#227
  def headers_hash; end

  # Return the available http auth methods.
  # Bitmask indicating the authentication method(s)
  # available.
  #
  # @example Get httpauth_avail.
  #   response.httpauth_avail
  # @return [Integer] The bitmask.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#82
  def httpauth_avail; end

  # Return the time, in seconds, it took from the
  # start until the name resolving was completed.
  #
  # @example Get namelookup_time.
  #   response.namelookup_time
  # @return [Float] The namelookup_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#162
  def name_lookup_time; end

  # Return the time, in seconds, it took from the
  # start until the name resolving was completed.
  #
  # @example Get namelookup_time.
  #   response.namelookup_time
  # @return [Float] The namelookup_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#162
  def namelookup_time; end

  # Return the time, in seconds, it took from the start
  # until the file transfer is just about to begin. This
  # includes all pre-transfer commands and negotiations
  # that are specific to the particular protocol(s) involved.
  # It does not involve the sending of the protocol-
  # specific request that triggers a transfer.
  #
  # @example Get pretransfer_time.
  #   response.pretransfer_time
  # @return [Float] The pretransfer_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#140
  def pretransfer_time; end

  # Return the string holding the IP address of the most recent
  # connection done with this curl handle. This string
  # may be IPv6 if that's enabled.
  #
  # @example Get primary_ip.
  #   response.primary_ip
  # @return [String] The primary_ip.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#198
  def primary_ip; end

  # Return the total number of redirections that were
  # actually followed
  #
  # @example Get redirect_count.
  #   response.redirect_count
  # @return [Integer] The redirect_count.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#209
  def redirect_count; end

  # Return the time, in seconds, it took for all redirection steps
  # include name lookup, connect, pretransfer and transfer before the
  # final transaction was started. time_redirect shows the complete
  # execution time for multiple redirections.
  #
  # @example Get redirect_time.
  #   response.redirect_time
  # @return [Float] The redirect_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#176
  def redirect_time; end

  # Return all redirections in between as multiple
  # responses with header.
  #
  # @example Return redirections.
  #   response.redirections
  # @return [Array<Typhoeus::Response>] The redirections
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#241
  def redirections; end

  # source://typhoeus//lib/typhoeus/response/informations.rb#213
  def request_size; end

  # Return the http response body.
  #
  # @example Get response_body.
  #   response.response_body
  # @return [String] The response_body.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#36
  def response_body; end

  # Return the last received HTTP, FTP or SMTP response code.
  # The value will be zero if no server response code has
  # been received. Note that a proxy's CONNECT response should
  # be read with http_connect_code and not this.
  #
  # @example Get response_code.
  #   response.response_code
  # @return [Integer] The response_code.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#69
  def response_code; end

  # Return the http response headers.
  #
  # @example Get response_headers.
  #   response.response_headers
  # @return [String] The response_headers.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#47
  def response_headers; end

  # Return libcurls return value.
  #
  # @example Get return_code.
  #   response.return_code
  # @return [Symbol] The return_code.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#14
  def return_code; end

  # Returns a string describing the return.
  #
  # @example Get return_message.
  #   response.return_message
  # @return [String] The return_message.
  # @since 0.6.2
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#26
  def return_message; end

  # Return the time, in seconds, it took from the start
  # until the first byte is received by libcurl. This
  # includes pretransfer time and also the time the
  # server needs to calculate the result.
  #
  # @example Get starttransfer_time.
  #   response.starttransfer_time
  # @return [Float] The starttransfer_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#108
  def start_transfer_time; end

  # Return the time, in seconds, it took from the start
  # until the first byte is received by libcurl. This
  # includes pretransfer time and also the time the
  # server needs to calculate the result.
  #
  # @example Get starttransfer_time.
  #   response.starttransfer_time
  # @return [Float] The starttransfer_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#108
  def starttransfer_time; end

  # Return the total time in seconds for the previous
  # transfer, including name resolving, TCP connect etc.
  #
  # @example Get total_time.
  #   response.total_time
  # @return [Float] The total_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#94
  def time; end

  # Return the total time in seconds for the previous
  # transfer, including name resolving, TCP connect etc.
  #
  # @example Get total_time.
  #   response.total_time
  # @return [Float] The total_time.
  #
  # source://typhoeus//lib/typhoeus/response/informations.rb#94
  def total_time; end
end

# This module contains logic about the http
# status.
#
# source://typhoeus//lib/typhoeus/response/status.rb#6
module Typhoeus::Response::Status
  # Return whether the response is a failure.
  #
  # @example Return if the response was failed.
  #   response.failure?
  # @return [Boolean] Return true if failure, false else.
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#58
  def failure?; end

  # Return the http version.
  #
  # @example Return http version.
  #   response.http_version
  # @return [String] The http version.
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#38
  def http_version; end

  # Return wether the response is modified.
  #
  # @example Return if the response was modified.
  #   response.modified?
  # @return [Boolean] Return true if modified, false else.
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#68
  def modified?; end

  # Return the status message if present.
  #
  # @example Return status message.
  #   reesponse.status_message
  # @return [String] The message.
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#14
  def status_message; end

  # Return whether the response is a success.
  #
  # @example Return if the response was successful.
  #   response.success?
  # @return [Boolean] Return true if successful, false else.
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#48
  def success?; end

  # Return whether the response is timed out.
  #
  # @example Return if the response timed out.
  #   response.timed_out?
  # @return [Boolean] Return true if timed out, false else.
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#78
  def timed_out?; end

  private

  # source://typhoeus//lib/typhoeus/response/status.rb#85
  def first_header_line; end

  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#101
  def has_bad_response_code?; end

  # @return [Boolean]
  #
  # source://typhoeus//lib/typhoeus/response/status.rb#96
  def has_good_response_code?; end
end

# The default Typhoeus user agent.
#
# @since 0.5.0
#
# source://typhoeus//lib/typhoeus.rb#65
Typhoeus::USER_AGENT = T.let(T.unsafe(nil), String)

# The current Typhoeus version.
#
# source://typhoeus//lib/typhoeus/version.rb#4
Typhoeus::VERSION = T.let(T.unsafe(nil), String)
