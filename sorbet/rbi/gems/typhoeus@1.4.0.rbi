# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `typhoeus` gem.
# Please instead update this file by running `bin/tapioca gem typhoeus`.

# typed: false

module Faraday
  class << self
    def default_adapter; end
    def default_adapter=(adapter); end
    def default_connection; end
    def default_connection=(_arg0); end
    def default_connection_options; end
    def default_connection_options=(options); end
    def ignore_env_proxy; end
    def ignore_env_proxy=(_arg0); end
    def lib_path; end
    def lib_path=(_arg0); end
    def new(url = T.unsafe(nil), options = T.unsafe(nil), &block); end
    def require_lib(*libs); end
    def require_libs(*libs); end
    def respond_to_missing?(symbol, include_private = T.unsafe(nil)); end
    def root_path; end
    def root_path=(_arg0); end

    private

    def method_missing(name, *args, &block); end
  end
end

class Faraday::Adapter
  extend ::Faraday::MiddlewareRegistry
  extend ::Faraday::DependencyLoader
  extend ::Faraday::Adapter::Parallelism
  extend ::Faraday::AutoloadHelper

  def initialize(_app = T.unsafe(nil), opts = T.unsafe(nil), &block); end

  def call(env); end
  def close; end
  def connection(env); end

  private

  def request_timeout(type, options); end
  def save_response(env, status, body, headers = T.unsafe(nil), reason_phrase = T.unsafe(nil)); end
end

Faraday::Adapter::CONTENT_LENGTH = T.let(T.unsafe(nil), String)
Faraday::Adapter::TIMEOUT_KEYS = T.let(T.unsafe(nil), Hash)

class Faraday::Adapter::Typhoeus < ::Faraday::Adapter
  def initialize(app, adapter_options = T.unsafe(nil)); end

  def call(env); end

  private

  def configure_proxy(req, env); end
  def configure_socket(req, env); end
  def configure_ssl(req, env); end
  def configure_timeout(req, env); end
  def parallel?(env); end
  def perform_request(env); end
  def read_body(env); end
  def request(env); end
  def typhoeus_request(env); end

  class << self
    def setup_parallel_manager(options = T.unsafe(nil)); end
  end
end

Faraday::FilePart = UploadIO
Faraday::METHODS_WITH_BODY = T.let(T.unsafe(nil), Array)
Faraday::METHODS_WITH_QUERY = T.let(T.unsafe(nil), Array)
Faraday::Parts = Parts
Faraday::Timer = Timeout
Faraday::UploadIO = UploadIO
Faraday::VERSION = T.let(T.unsafe(nil), String)

module Rack
  class << self
    def release; end
    def version; end
  end
end

Rack::ADAPTERS = T.let(T.unsafe(nil), Array)
Rack::CACHE_CONTROL = T.let(T.unsafe(nil), String)
Rack::CONTENT_LENGTH = T.let(T.unsafe(nil), String)
Rack::CONTENT_TYPE = T.let(T.unsafe(nil), String)
Rack::DELETE = T.let(T.unsafe(nil), String)
Rack::ETAG = T.let(T.unsafe(nil), String)
Rack::EXPIRES = T.let(T.unsafe(nil), String)
Rack::File = Rack::Files
Rack::GET = T.let(T.unsafe(nil), String)
Rack::HEAD = T.let(T.unsafe(nil), String)
Rack::HTTPS = T.let(T.unsafe(nil), String)
Rack::HTTP_COOKIE = T.let(T.unsafe(nil), String)
Rack::HTTP_HOST = T.let(T.unsafe(nil), String)
Rack::HTTP_PORT = T.let(T.unsafe(nil), String)
Rack::HTTP_VERSION = T.let(T.unsafe(nil), String)
Rack::LINK = T.let(T.unsafe(nil), String)
Rack::OPTIONS = T.let(T.unsafe(nil), String)
Rack::PATCH = T.let(T.unsafe(nil), String)
Rack::PATH_INFO = T.let(T.unsafe(nil), String)
Rack::POST = T.let(T.unsafe(nil), String)
Rack::PUT = T.let(T.unsafe(nil), String)
Rack::QUERY_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_ERRORS = T.let(T.unsafe(nil), String)
Rack::RACK_HIJACK = T.let(T.unsafe(nil), String)
Rack::RACK_HIJACK_IO = T.let(T.unsafe(nil), String)
Rack::RACK_INPUT = T.let(T.unsafe(nil), String)
Rack::RACK_IS_HIJACK = T.let(T.unsafe(nil), String)
Rack::RACK_LOGGER = T.let(T.unsafe(nil), String)
Rack::RACK_METHODOVERRIDE_ORIGINAL_METHOD = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPART_BUFFER_SIZE = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPART_TEMPFILE_FACTORY = T.let(T.unsafe(nil), String)
Rack::RACK_MULTIPROCESS = T.let(T.unsafe(nil), String)
Rack::RACK_MULTITHREAD = T.let(T.unsafe(nil), String)
Rack::RACK_RECURSIVE_INCLUDE = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_COOKIE_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_COOKIE_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_INPUT = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_FORM_VARS = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_QUERY_HASH = T.let(T.unsafe(nil), String)
Rack::RACK_REQUEST_QUERY_STRING = T.let(T.unsafe(nil), String)
Rack::RACK_RUNONCE = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION_OPTIONS = T.let(T.unsafe(nil), String)
Rack::RACK_SESSION_UNPACKED_COOKIE_DATA = T.let(T.unsafe(nil), String)
Rack::RACK_SHOWSTATUS_DETAIL = T.let(T.unsafe(nil), String)
Rack::RACK_TEMPFILES = T.let(T.unsafe(nil), String)
Rack::RACK_URL_SCHEME = T.let(T.unsafe(nil), String)
Rack::RACK_VERSION = T.let(T.unsafe(nil), String)
Rack::RELEASE = T.let(T.unsafe(nil), String)
Rack::REQUEST_METHOD = T.let(T.unsafe(nil), String)
Rack::REQUEST_PATH = T.let(T.unsafe(nil), String)
Rack::SCRIPT_NAME = T.let(T.unsafe(nil), String)
Rack::SERVER_NAME = T.let(T.unsafe(nil), String)
Rack::SERVER_PORT = T.let(T.unsafe(nil), String)
Rack::SERVER_PROTOCOL = T.let(T.unsafe(nil), String)
Rack::SET_COOKIE = T.let(T.unsafe(nil), String)
Rack::TRACE = T.let(T.unsafe(nil), String)
Rack::TRANSFER_ENCODING = T.let(T.unsafe(nil), String)
module Rack::Typhoeus; end
module Rack::Typhoeus::Middleware; end

class Rack::Typhoeus::Middleware::ParamsDecoder
  include ::Rack::Typhoeus::Middleware::ParamsDecoder::Helper

  def initialize(app); end

  def call(env); end

  private

  def update_params(req, k, v); end
end

module Rack::Typhoeus::Middleware::ParamsDecoder::Helper
  def decode(hash); end
  def decode!(hash); end
  def decode_typhoeus_arrays; end

  private

  def convert(hash); end
  def encoded?(hash); end
end

Rack::UNLINK = T.let(T.unsafe(nil), String)
Rack::VERSION = T.let(T.unsafe(nil), Array)

module Typhoeus
  extend ::Typhoeus::Request::Actions
  extend ::Typhoeus::Request::Callbacks::Types

  class << self
    def before(&block); end
    def configure; end
    def stub(base_url, options = T.unsafe(nil), &block); end
    def with_connection; end
  end
end

module Typhoeus::Cache; end

class Typhoeus::Cache::Dalli
  def initialize(client = T.unsafe(nil), options = T.unsafe(nil)); end

  def get(request); end
  def set(request, response); end
end

class Typhoeus::Cache::Rails
  def initialize(cache = T.unsafe(nil), options = T.unsafe(nil)); end

  def get(request); end
  def set(request, response); end
end

class Typhoeus::Cache::Redis
  def initialize(redis = T.unsafe(nil), options = T.unsafe(nil)); end

  def get(request); end
  def set(request, response); end
end

module Typhoeus::Config
  extend ::Typhoeus::Config

  def block_connection; end
  def block_connection=(_arg0); end
  def cache; end
  def cache=(_arg0); end
  def memoize; end
  def memoize=(_arg0); end
  def proxy; end
  def proxy=(_arg0); end
  def user_agent; end
  def user_agent=(_arg0); end
  def verbose; end
  def verbose=(_arg0); end
end

class Typhoeus::EasyFactory
  def initialize(request, hydra = T.unsafe(nil)); end

  def easy; end
  def get; end
  def hydra; end
  def request; end

  private

  def provide_help(option); end
  def sanitize(options); end
  def sanitize_timeout!(options, timeout); end
  def set_callback; end
end

Typhoeus::EasyFactory::CHANGED_OPTIONS = T.let(T.unsafe(nil), Hash)
Typhoeus::EasyFactory::REMOVED_OPTIONS = T.let(T.unsafe(nil), Set)
Typhoeus::EasyFactory::RENAMED_OPTIONS = T.let(T.unsafe(nil), Hash)
Typhoeus::EasyFactory::SANITIZE_IGNORE = T.let(T.unsafe(nil), Set)
Typhoeus::EasyFactory::SANITIZE_TIMEOUT = T.let(T.unsafe(nil), Set)
module Typhoeus::Errors; end

class Typhoeus::Errors::NoStub < ::Typhoeus::Errors::TyphoeusError
  def initialize(request); end
end

class Typhoeus::Errors::TyphoeusError < ::StandardError; end

class Typhoeus::Expectation
  def initialize(base_url, options = T.unsafe(nil)); end

  def and_return(response = T.unsafe(nil), &block); end
  def base_url; end
  def from; end
  def matches?(request); end
  def options; end
  def response(request); end
  def responses; end
  def stubbed_from(value); end

  private

  def options_match?(request); end
  def url_match?(request_url); end

  class << self
    def all; end
    def clear; end
    def find_by(request); end
    def response_for(request); end
  end
end

class Typhoeus::Hydra
  include ::Typhoeus::Hydra::Addable
  include ::Typhoeus::Hydra::Runnable
  include ::Typhoeus::Hydra::Memoizable
  include ::Typhoeus::Hydra::Cacheable
  include ::Typhoeus::Hydra::BlockConnection
  include ::Typhoeus::Hydra::Stubbable
  include ::Typhoeus::Hydra::Before
  include ::Typhoeus::Hydra::Queueable

  def initialize(options = T.unsafe(nil)); end

  def max_concurrency; end
  def max_concurrency=(_arg0); end
  def multi; end

  class << self
    def hydra; end
  end
end

module Typhoeus::Hydra::Addable
  def add(request); end
end

module Typhoeus::Hydra::Before
  def add(request); end
end

module Typhoeus::Hydra::BlockConnection
  def add(request); end
end

module Typhoeus::Hydra::Cacheable
  def add(request); end
end

module Typhoeus::Hydra::Memoizable
  def add(request); end
  def memory; end
  def run; end
end

module Typhoeus::Hydra::Queueable
  def abort; end
  def dequeue; end
  def dequeue_many; end
  def queue(request); end
  def queue_front(request); end
  def queued_requests; end
end

module Typhoeus::Hydra::Runnable
  def run; end
end

module Typhoeus::Hydra::Stubbable
  def add(request); end
end

module Typhoeus::Pool
  class << self
    def clear; end
    def easies; end
    def get; end
    def release(easy); end
    def with_easy(&block); end
  end
end

class Typhoeus::Request
  include ::Typhoeus::Request::Callbacks::Types
  include ::Typhoeus::Request::Callbacks
  include ::Typhoeus::Request::Streamable
  include ::Typhoeus::Request::Marshal
  include ::Typhoeus::Request::Operations
  include ::Typhoeus::Request::Responseable
  include ::Typhoeus::Request::Memoizable
  include ::Typhoeus::Request::Cacheable
  include ::Typhoeus::Request::BlockConnection
  include ::Typhoeus::Request::Stubbable
  include ::Typhoeus::Request::Before
  extend ::Typhoeus::Request::Actions

  def initialize(base_url, options = T.unsafe(nil)); end

  def base_url; end
  def base_url=(_arg0); end
  def block_connection; end
  def block_connection=(_arg0); end
  def cache_key; end
  def encoded_body; end
  def eql?(other); end
  def hash; end
  def hydra; end
  def hydra=(_arg0); end
  def options; end
  def options=(_arg0); end
  def original_options; end
  def original_options=(_arg0); end
  def url; end

  private

  def fuzzy_hash_eql?(left, right); end
  def hashable_string_for(obj); end
  def set_defaults; end
end

module Typhoeus::Request::Actions
  def delete(base_url, options = T.unsafe(nil)); end
  def get(base_url, options = T.unsafe(nil)); end
  def head(base_url, options = T.unsafe(nil)); end
  def options(base_url, options = T.unsafe(nil)); end
  def patch(base_url, options = T.unsafe(nil)); end
  def post(base_url, options = T.unsafe(nil)); end
  def put(base_url, options = T.unsafe(nil)); end
end

module Typhoeus::Request::Before
  def run; end
end

module Typhoeus::Request::BlockConnection
  def blocked?; end
  def run; end
end

module Typhoeus::Request::Cacheable
  def cache_ttl; end
  def cacheable?; end
  def cached_response; end
  def response=(response); end
  def run; end

  private

  def cache; end
end

module Typhoeus::Request::Callbacks
  def execute_callbacks; end
  def execute_headers_callbacks(response); end
end

module Typhoeus::Request::Callbacks::Types
  def on_complete(&block); end
  def on_failure(&block); end
  def on_headers(&block); end
  def on_progress(&block); end
  def on_success(&block); end
end

module Typhoeus::Request::Marshal
  def marshal_dump; end
  def marshal_load(attributes); end
end

module Typhoeus::Request::Memoizable
  def memoizable?; end
  def response=(response); end
end

module Typhoeus::Request::Operations
  def finish(response, bypass_memoization = T.unsafe(nil)); end
  def run; end
end

module Typhoeus::Request::Responseable
  def response; end
  def response=(value); end
end

module Typhoeus::Request::Streamable
  def on_body(&block); end
  def streaming?; end
end

module Typhoeus::Request::Stubbable
  def run; end
end

class Typhoeus::Response
  include ::Typhoeus::Response::Informations
  include ::Typhoeus::Response::Status
  include ::Typhoeus::Response::Cacheable

  def initialize(options = T.unsafe(nil)); end

  def handled_response; end
  def handled_response=(_arg0); end
  def mock; end
  def mock=(_arg0); end
  def mock?; end
  def options; end
  def options=(_arg0); end
  def request; end
  def request=(_arg0); end
end

module Typhoeus::Response::Cacheable
  def cached=(_arg0); end
  def cached?; end
end

class Typhoeus::Response::Header
  def initialize(raw); end

  def [](key); end
  def parse; end

  private

  def process_line(header); end
  def process_pair(key, value); end
  def raw; end
  def set_default_proc_on(hash, default_proc); end
  def set_value(key, value, hash); end
end

module Typhoeus::Response::Informations
  def app_connect_time; end
  def appconnect_time; end
  def body; end
  def code; end
  def connect_time; end
  def debug_info; end
  def effective_url; end
  def headers; end
  def headers_hash; end
  def httpauth_avail; end
  def name_lookup_time; end
  def namelookup_time; end
  def pretransfer_time; end
  def primary_ip; end
  def redirect_count; end
  def redirect_time; end
  def redirections; end
  def request_size; end
  def response_body; end
  def response_code; end
  def response_headers; end
  def return_code; end
  def return_message; end
  def start_transfer_time; end
  def starttransfer_time; end
  def time; end
  def total_time; end
end

module Typhoeus::Response::Status
  def failure?; end
  def http_version; end
  def modified?; end
  def status_message; end
  def success?; end
  def timed_out?; end

  private

  def first_header_line; end
  def has_bad_response_code?; end
  def has_good_response_code?; end
end

Typhoeus::USER_AGENT = T.let(T.unsafe(nil), String)
Typhoeus::VERSION = T.let(T.unsafe(nil), String)
