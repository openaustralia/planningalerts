# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `slack-notifier` gem.
# Please instead update this file by running `bin/tapioca gem slack-notifier`.

# typed: true

module Slack; end

class Slack::Notifier
  def initialize(webhook_url, options = T.unsafe(nil), &block); end

  def config; end
  def endpoint; end
  def ping(message, options = T.unsafe(nil)); end
  def post(payload = T.unsafe(nil)); end

  private

  def middleware; end
end

class Slack::Notifier::APIError < ::StandardError; end

class Slack::Notifier::Config
  def initialize; end

  def defaults(new_defaults = T.unsafe(nil)); end
  def http_client(client = T.unsafe(nil)); end
  def middleware(*args); end
end

class Slack::Notifier::PayloadMiddleware
  class << self
    def register(middleware, name); end
    def registry; end
  end
end

class Slack::Notifier::PayloadMiddleware::At < ::Slack::Notifier::PayloadMiddleware::Base
  def call(payload = T.unsafe(nil)); end

  private

  def at_cmd_char(at); end
  def format_ats(ats); end
end

class Slack::Notifier::PayloadMiddleware::Base
  def initialize(notifier, opts = T.unsafe(nil)); end

  def call(_payload = T.unsafe(nil)); end
  def notifier; end
  def options; end

  class << self
    def default_opts; end
    def middleware_name(name); end
    def options(default_opts); end
  end
end

class Slack::Notifier::PayloadMiddleware::Channels < ::Slack::Notifier::PayloadMiddleware::Base
  def call(payload = T.unsafe(nil)); end
end

class Slack::Notifier::PayloadMiddleware::FormatAttachments < ::Slack::Notifier::PayloadMiddleware::Base
  def call(payload = T.unsafe(nil)); end

  private

  def wrap_array(object); end
end

class Slack::Notifier::PayloadMiddleware::FormatMessage < ::Slack::Notifier::PayloadMiddleware::Base
  def call(payload = T.unsafe(nil)); end
end

class Slack::Notifier::PayloadMiddleware::Stack
  def initialize(notifier); end

  def call(payload = T.unsafe(nil)); end
  def notifier; end
  def set(*middlewares); end
  def stack; end

  private

  def as_array(args); end
end

module Slack::Notifier::Util; end

module Slack::Notifier::Util::Escape
  class << self
    def html(string); end
  end
end

Slack::Notifier::Util::Escape::HTML_REGEXP = T.let(T.unsafe(nil), Regexp)
Slack::Notifier::Util::Escape::HTML_REPLACE = T.let(T.unsafe(nil), Hash)

class Slack::Notifier::Util::HTTPClient
  def initialize(uri, params); end

  def call; end
  def http_options; end
  def params; end
  def uri; end

  private

  def http_obj; end
  def request_obj; end

  class << self
    def post(uri, params); end
  end
end

class Slack::Notifier::Util::LinkFormatter
  def initialize(string, formats: T.unsafe(nil)); end

  def formats; end
  def formatted; end

  private

  def slack_link(link, text = T.unsafe(nil)); end
  def sub_html_links(string); end
  def sub_markdown_links(string); end

  class << self
    def format(string, opts = T.unsafe(nil)); end
  end
end

Slack::Notifier::Util::LinkFormatter::HTML_PATTERN = T.let(T.unsafe(nil), Regexp)
Slack::Notifier::Util::LinkFormatter::MARKDOWN_PATTERN = T.let(T.unsafe(nil), Regexp)
Slack::Notifier::Util::LinkFormatter::VALID_PATH_CHARS = T.let(T.unsafe(nil), String)
