# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sassc-rails` gem.
# Please instead update this file by running `bin/tapioca gem sassc-rails`.

# typed: true

module SassC
  class << self
    def load_paths; end
  end
end

module SassC::Rails; end

class SassC::Rails::Importer < ::SassC::Importer
  def imports(path, parent_path); end

  private

  def context; end
  def extension_for_file(file); end
  def glob_imports(base, glob, current_file); end
  def globbed_files(base, glob); end
  def load_paths; end
  def record_import_as_dependency(path); end
end

class SassC::Rails::Importer::CSSExtension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::CssSassExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::CssScssExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Importer::ERBExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
end

SassC::Rails::Importer::EXTENSIONS = T.let(T.unsafe(nil), Array)

class SassC::Rails::Importer::Extension
  def initialize(postfix = T.unsafe(nil)); end

  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

SassC::Rails::Importer::GLOB = T.let(T.unsafe(nil), Regexp)
SassC::Rails::Importer::PREFIXS = T.let(T.unsafe(nil), Array)

class SassC::Rails::Importer::SassERBExtension < ::SassC::Rails::Importer::Extension
  def import_for(full_path, parent_dir, options); end
  def postfix; end
end

class SassC::Rails::Railtie < ::Rails::Railtie; end

class SassC::Rails::SassTemplate < ::Sprockets::SassProcessor
  def initialize(options = T.unsafe(nil), &block); end

  def call(input); end
  def config_options; end
  def line_comments?; end
  def load_paths; end
  def safe_merge(_key, left, right); end
  def sass_style; end
end

module SassC::Rails::SassTemplate::Functions
  def asset_data_url(path); end
  def asset_path(path, options = T.unsafe(nil)); end
  def asset_url(path, options = T.unsafe(nil)); end
end

class SassC::Rails::ScssTemplate < ::SassC::Rails::SassTemplate
  class << self
    def syntax; end
  end
end

SassC::Rails::VERSION = T.let(T.unsafe(nil), String)
SassC::VERSION = T.let(T.unsafe(nil), String)

module Sprockets
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathUtils
  extend ::Sprockets::DigestUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::ProcessorUtils
  extend ::Sprockets::Processing
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::Transformers
  extend ::Sprockets::Engines
  extend ::Sprockets::Mime
  extend ::Sprockets::Paths
  extend ::Sprockets::Configuration
end

Sprockets::Index = Sprockets::CachedEnvironment

class Sprockets::SassCompressor
  def initialize(options = T.unsafe(nil)); end

  def cache_key; end
  def call(*args); end
  def evaluate(*args); end

  class << self
    def cache_key; end
    def call(input); end
    def instance; end
  end
end

Sprockets::SassCompressor::VERSION = T.let(T.unsafe(nil), String)
Sprockets::SassFunctions = Sprockets::SassProcessor::Functions
Sprockets::VERSION = T.let(T.unsafe(nil), String)
