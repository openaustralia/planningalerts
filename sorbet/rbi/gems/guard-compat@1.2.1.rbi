# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guard-compat` gem.
# Please instead update this file by running `bin/tapioca gem guard-compat`.


# Provided empty definition so requiring the plugin without Guard won't crash
# (e.g. when added to a Gemfile without `require: false`)
#
# source://guard-compat//lib/guard/compat/plugin.rb#23
module Guard
  extend ::Guard::Internals::Helpers

  class << self
    # source://guard/2.18.1/lib/guard.rb#87
    def async_queue_add(changes); end

    # source://guard/2.18.1/lib/guard.rb#73
    def init(cmdline_options); end

    # source://guard/2.18.1/lib/guard.rb#24
    def interactor; end

    # source://guard/2.18.1/lib/guard.rb#23
    def listener; end

    # source://guard/2.18.1/lib/guard.rb#22
    def queue; end

    # source://guard/2.18.1/lib/guard.rb#44
    def setup(cmdline_options = T.unsafe(nil)); end

    # source://guard/2.18.1/lib/guard.rb#21
    def state; end

    private

    # source://guard/2.18.1/lib/guard.rb#132
    def _evaluate(options); end

    # source://guard/2.18.1/lib/guard.rb#152
    def _guardfile_deprecated_check(modified); end

    # source://guard/2.18.1/lib/guard.rb#113
    def _listener_callback; end

    # source://guard/2.18.1/lib/guard.rb#128
    def _pluginless_guardfile?; end

    # source://guard/2.18.1/lib/guard.rb#109
    def _relative_pathnames(paths); end

    # source://guard/2.18.1/lib/guard.rb#99
    def _relevant_changes?(changes); end
  end
end

# source://guard-compat//lib/guard/compat/plugin.rb#24
module Guard::Compat
  class << self
    # TODO: this is just a temporary workaround to allow plugins
    # to use watcher patterns in run_all
    #
    # source://guard-compat//lib/guard/compat/plugin.rb#27
    def matching_files(plugin, files); end

    # source://guard-compat//lib/guard/compat/plugin.rb#39
    def watched_directories; end
  end
end

# source://guard-compat//lib/guard/compat/plugin.rb#54
module Guard::Compat::UI
  class << self
    # source://guard-compat//lib/guard/compat/plugin.rb#55
    def color(text, *colors); end

    # @return [Boolean]
    #
    # source://guard-compat//lib/guard/compat/plugin.rb#63
    def color_enabled?; end

    # source://guard-compat//lib/guard/compat/plugin.rb#95
    def debug(message, options = T.unsafe(nil)); end

    # source://guard-compat//lib/guard/compat/plugin.rb#103
    def deprecation(message, options = T.unsafe(nil)); end

    # source://guard-compat//lib/guard/compat/plugin.rb#87
    def error(message, options = T.unsafe(nil)); end

    # source://guard-compat//lib/guard/compat/plugin.rb#71
    def info(message, options = T.unsafe(nil)); end

    # source://guard-compat//lib/guard/compat/plugin.rb#111
    def notify(msg, options = T.unsafe(nil)); end

    # source://guard-compat//lib/guard/compat/plugin.rb#79
    def warning(message, options = T.unsafe(nil)); end
  end
end
