# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `guard-rubocop` gem.
# Please instead update this file by running `bin/tapioca gem guard-rubocop`.

# source://guard-rubocop//lib/guard/rubocop.rb#6
module Guard
  extend ::Guard::Internals::Helpers

  class << self
    # source://guard/2.18.0/lib/guard.rb#87
    def async_queue_add(changes); end

    # source://guard/2.18.0/lib/guard.rb#73
    def init(cmdline_options); end

    # source://guard/2.18.0/lib/guard.rb#24
    def interactor; end

    # source://guard/2.18.0/lib/guard.rb#23
    def listener; end

    # source://guard/2.18.0/lib/guard.rb#22
    def queue; end

    # source://guard/2.18.0/lib/guard.rb#44
    def setup(cmdline_options = T.unsafe(nil)); end

    # source://guard/2.18.0/lib/guard.rb#21
    def state; end

    private

    # source://guard/2.18.0/lib/guard.rb#132
    def _evaluate(options); end

    # source://guard/2.18.0/lib/guard.rb#152
    def _guardfile_deprecated_check(modified); end

    # source://guard/2.18.0/lib/guard.rb#113
    def _listener_callback; end

    # source://guard/2.18.0/lib/guard.rb#128
    def _pluginless_guardfile?; end

    # source://guard/2.18.0/lib/guard.rb#109
    def _relative_pathnames(paths); end

    # source://guard/2.18.0/lib/guard.rb#99
    def _relevant_changes?(changes); end
  end
end

# This class gets API calls from `guard` and runs `rubocop` command via {Guard::RuboCop::Runner}.
# An instance of this class stays alive in a `guard` command session.
#
# source://guard-rubocop//lib/guard/rubocop.rb#9
class Guard::RuboCop < ::Guard::Plugin
  # @return [RuboCop] a new instance of RuboCop
  #
  # source://guard-rubocop//lib/guard/rubocop.rb#14
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute failed_paths.
  #
  # source://guard-rubocop//lib/guard/rubocop.rb#12
  def failed_paths; end

  # Returns the value of attribute options.
  #
  # source://guard-rubocop//lib/guard/rubocop.rb#12
  def options; end

  # source://guard-rubocop//lib/guard/rubocop.rb#45
  def reload; end

  # source://guard-rubocop//lib/guard/rubocop.rb#32
  def run_all; end

  # source://guard-rubocop//lib/guard/rubocop.rb#37
  def run_on_additions(paths); end

  # source://guard-rubocop//lib/guard/rubocop.rb#41
  def run_on_modifications(paths); end

  # source://guard-rubocop//lib/guard/rubocop.rb#28
  def start; end

  private

  # source://guard-rubocop//lib/guard/rubocop.rb#73
  def clean_paths(paths); end

  # @return [Boolean]
  #
  # source://guard-rubocop//lib/guard/rubocop.rb#85
  def included_in_other_path?(target_path, other_paths); end

  # source://guard-rubocop//lib/guard/rubocop.rb#63
  def inspect_with_rubocop(paths = T.unsafe(nil)); end

  # source://guard-rubocop//lib/guard/rubocop.rb#51
  def run_partially(paths); end

  # source://guard-rubocop//lib/guard/rubocop.rb#93
  def smart_path(path); end
end

# This class runs `rubocop` command, retrieves result and notifies.
# An instance of this class is intended to invoke `rubocop` only once in its lifetime.
#
# source://guard-rubocop//lib/guard/rubocop/runner.rb#9
class Guard::RuboCop::Runner
  # @return [Runner] a new instance of Runner
  #
  # source://guard-rubocop//lib/guard/rubocop/runner.rb#10
  def initialize(options); end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#47
  def args_specified_by_user; end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#30
  def build_command(paths); end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#105
  def failed_paths; end

  # @return [Boolean]
  #
  # source://guard-rubocop//lib/guard/rubocop/runner.rb#59
  def include_formatter_for_console?(cli_args); end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#72
  def json_file_path; end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#89
  def notify(passed); end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#129
  def open_launchy_if_needed; end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#115
  def pluralize(number, thing, options = T.unsafe(nil)); end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#82
  def result; end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#14
  def run(paths = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://guard-rubocop//lib/guard/rubocop/runner.rb#43
  def should_add_default_formatter_for_console?; end

  # source://guard-rubocop//lib/guard/rubocop/runner.rb#94
  def summary_text; end
end
