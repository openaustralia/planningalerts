# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `searchkick` gem.
# Please instead update this file by running `bin/tapioca gem searchkick`.

module ActiveModel::Callbacks
  include ::Searchkick::Model
end

# source://searchkick//lib/searchkick/bulk_indexer.rb#1
module Searchkick
  extend ::Searchkick::SearchkickWithInstrumentation

  class << self
    # Returns the value of attribute aws_credentials.
    #
    # source://searchkick//lib/searchkick.rb#44
    def aws_credentials; end

    # source://searchkick//lib/searchkick.rb#178
    def aws_credentials=(creds); end

    # source://searchkick//lib/searchkick.rb#162
    def callbacks(value = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#154
    def callbacks?(default: T.unsafe(nil)); end

    # private
    #
    # source://searchkick//lib/searchkick.rb#243
    def callbacks_value; end

    # private
    #
    # source://searchkick//lib/searchkick.rb#248
    def callbacks_value=(value); end

    # source://searchkick//lib/searchkick.rb#54
    def client; end

    # Sets the attribute client
    #
    # @param value the value to set the attribute client to.
    #
    # source://searchkick//lib/searchkick.rb#43
    def client=(_arg0); end

    # Returns the value of attribute client_options.
    #
    # source://searchkick//lib/searchkick.rb#42
    def client_options; end

    # Sets the attribute client_options
    #
    # @param value the value to set the attribute client_options to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def client_options=(_arg0); end

    # source://searchkick//lib/searchkick.rb#150
    def disable_callbacks; end

    # callbacks
    #
    # source://searchkick//lib/searchkick.rb#146
    def enable_callbacks; end

    # source://searchkick//lib/searchkick.rb#69
    def env; end

    # Sets the attribute env
    #
    # @param value the value to set the attribute env to.
    #
    # source://searchkick//lib/searchkick.rb#43
    def env=(_arg0); end

    # Returns the value of attribute index_prefix.
    #
    # source://searchkick//lib/searchkick.rb#42
    def index_prefix; end

    # Sets the attribute index_prefix
    #
    # @param value the value to set the attribute index_prefix to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def index_prefix=(_arg0); end

    # Returns the value of attribute index_suffix.
    #
    # source://searchkick//lib/searchkick.rb#42
    def index_suffix; end

    # Sets the attribute index_suffix
    #
    # @param value the value to set the attribute index_suffix to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def index_suffix=(_arg0); end

    # private
    #
    # source://searchkick//lib/searchkick.rb#238
    def indexer; end

    # private
    #
    # @raise [Searchkick::Error]
    #
    # source://searchkick//lib/searchkick.rb#217
    def load_records(records, ids); end

    # Returns the value of attribute model_options.
    #
    # source://searchkick//lib/searchkick.rb#42
    def model_options; end

    # Sets the attribute model_options
    #
    # @param value the value to set the attribute model_options to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def model_options=(_arg0); end

    # Returns the value of attribute models.
    #
    # source://searchkick//lib/searchkick.rb#42
    def models; end

    # Sets the attribute models
    #
    # @param value the value to set the attribute models to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def models=(_arg0); end

    # source://searchkick//lib/searchkick/logging.rb#132
    def multi_search(searches); end

    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#86
    def opensearch?; end

    # Returns the value of attribute queue_name.
    #
    # source://searchkick//lib/searchkick.rb#42
    def queue_name; end

    # Sets the attribute queue_name
    #
    # @param value the value to set the attribute queue_name to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def queue_name=(_arg0); end

    # Returns the value of attribute redis.
    #
    # source://searchkick//lib/searchkick.rb#42
    def redis; end

    # Sets the attribute redis
    #
    # @param value the value to set the attribute redis to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def redis=(_arg0); end

    # @raise [Searchkick::Error]
    #
    # source://searchkick//lib/searchkick.rb#189
    def reindex_status(index_name); end

    # private
    # methods are forwarded to base class
    # this check to see if scope exists on that class
    # it's a bit tricky, but this seems to work
    #
    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#274
    def relation?(klass); end

    # source://searchkick//lib/searchkick.rb#106
    def search(term = T.unsafe(nil), model: T.unsafe(nil), **options, &block); end

    # Returns the value of attribute search_method_name.
    #
    # source://searchkick//lib/searchkick.rb#42
    def search_method_name; end

    # Sets the attribute search_method_name
    #
    # @param value the value to set the attribute search_method_name to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def search_method_name=(_arg0); end

    # source://searchkick//lib/searchkick.rb#73
    def search_timeout; end

    # Sets the attribute search_timeout
    #
    # @param value the value to set the attribute search_timeout to.
    #
    # source://searchkick//lib/searchkick.rb#43
    def search_timeout=(_arg0); end

    # memoize for performance
    #
    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#99
    def server_below7?; end

    # @return [Boolean]
    #
    # source://searchkick//lib/searchkick.rb#93
    def server_below?(version); end

    # private
    #
    # source://searchkick//lib/searchkick.rb#78
    def server_info; end

    # source://searchkick//lib/searchkick.rb#82
    def server_version; end

    # private
    #
    # source://searchkick//lib/searchkick.rb#258
    def signer_middleware_aws_params; end

    # private
    #
    # source://searchkick//lib/searchkick.rb#253
    def signer_middleware_key; end

    # Returns the value of attribute timeout.
    #
    # source://searchkick//lib/searchkick.rb#42
    def timeout; end

    # Sets the attribute timeout
    #
    # @param value the value to set the attribute timeout to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def timeout=(_arg0); end

    # source://searchkick//lib/searchkick.rb#212
    def warn(message); end

    # TODO use ConnectionPool::Wrapper when redis is set so this is no longer needed
    #
    # source://searchkick//lib/searchkick.rb#200
    def with_redis; end

    # Returns the value of attribute wordnet_path.
    #
    # source://searchkick//lib/searchkick.rb#42
    def wordnet_path; end

    # Sets the attribute wordnet_path
    #
    # @param value the value to set the attribute wordnet_path to.
    #
    # source://searchkick//lib/searchkick.rb#42
    def wordnet_path=(_arg0); end
  end
end

# source://searchkick//lib/searchkick/bulk_indexer.rb#2
class Searchkick::BulkIndexer
  # @return [BulkIndexer] a new instance of BulkIndexer
  #
  # source://searchkick//lib/searchkick/bulk_indexer.rb#5
  def initialize(index); end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#54
  def batches_left; end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#46
  def bulk_delete(records); end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#42
  def bulk_index(records); end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#50
  def bulk_update(records, method_name); end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#9
  def import_scope(relation, resume: T.unsafe(nil), method_name: T.unsafe(nil), async: T.unsafe(nil), batch: T.unsafe(nil), batch_id: T.unsafe(nil), full: T.unsafe(nil), scope: T.unsafe(nil)); end

  # Returns the value of attribute index.
  #
  # source://searchkick//lib/searchkick/bulk_indexer.rb#3
  def index; end

  private

  # source://searchkick//lib/searchkick/bulk_indexer.rb#169
  def batch_size; end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#165
  def batches_key; end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#142
  def bulk_reindex_job(scope, batch_id, options); end

  # @yield [items]
  #
  # source://searchkick//lib/searchkick/bulk_indexer.rb#128
  def each_batch(scope); end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#85
  def full_reindex_async(scope); end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#60
  def import_or_update(records, method_name, async); end

  # source://searchkick//lib/searchkick/bulk_indexer.rb#151
  def with_retries; end
end

# source://searchkick//lib/searchkick/bulk_reindex_job.rb#2
class Searchkick::BulkReindexJob < ::ActiveJob::Base
  # source://searchkick//lib/searchkick/bulk_reindex_job.rb#5
  def perform(class_name:, record_ids: T.unsafe(nil), index_name: T.unsafe(nil), method_name: T.unsafe(nil), batch_id: T.unsafe(nil), min_id: T.unsafe(nil), max_id: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/railties/controller_runtime.rb
#
# source://searchkick//lib/searchkick/logging.rb#200
module Searchkick::ControllerRuntime
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Searchkick::ControllerRuntime::ClassMethods

  def searchkick_runtime; end
  def searchkick_runtime=(_arg0); end

  protected

  # source://searchkick//lib/searchkick/logging.rb#223
  def append_info_to_payload(payload); end

  # source://searchkick//lib/searchkick/logging.rb#215
  def cleanup_view_runtime; end

  # source://searchkick//lib/searchkick/logging.rb#207
  def process_action(action, *args); end
end

# source://searchkick//lib/searchkick/logging.rb#228
module Searchkick::ControllerRuntime::ClassMethods
  # source://searchkick//lib/searchkick/logging.rb#229
  def log_process_action(payload); end
end

# source://searchkick//lib/searchkick.rb#38
class Searchkick::DangerousOperation < ::Searchkick::Error; end

# errors
#
# source://searchkick//lib/searchkick.rb#34
class Searchkick::Error < ::StandardError; end

# Subclass of `Hashie::Mash` to wrap Hash-like structures
# (responses from Elasticsearch)
#
# The primary goal of the subclass is to disable the
# warning being printed by Hashie for re-defined
# methods, such as `sort`.
#
# source://searchkick//lib/searchkick/hash_wrapper.rb#9
class Searchkick::HashWrapper < ::Hashie::Mash; end

# source://searchkick//lib/searchkick.rb#39
class Searchkick::ImportError < ::Searchkick::Error; end

# source://searchkick//lib/searchkick/index.rb#4
class Searchkick::Index
  include ::Searchkick::IndexWithInstrumentation

  # @return [Index] a new instance of Index
  #
  # source://searchkick//lib/searchkick/index.rb#7
  def initialize(name, options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index.rb#39
  def alias_exists?; end

  # source://searchkick//lib/searchkick/index.rb#104
  def all_indices(unaliased: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#236
  def batches_left; end

  # source://searchkick//lib/searchkick/logging.rb#97
  def bulk_delete(records); end

  # source://searchkick//lib/searchkick/logging.rb#62
  def bulk_index(records); end

  # source://searchkick//lib/searchkick/logging.rb#80
  def bulk_update(records, *args); end

  # remove old indices that start w/ index_name
  #
  # source://searchkick//lib/searchkick/index.rb#120
  def clean_indices; end

  # should not be public
  #
  # source://searchkick//lib/searchkick/index.rb#255
  def conversions_fields; end

  # source://searchkick//lib/searchkick/index.rb#17
  def create(body = T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#225
  def create_index(index_options: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#21
  def delete; end

  # source://searchkick//lib/searchkick/index.rb#160
  def document_type(record); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index.rb#31
  def exists?; end

  # source://searchkick//lib/searchkick/logging.rb#62
  def import(records); end

  # source://searchkick//lib/searchkick/index.rb#232
  def import_scope(relation, **options); end

  # source://searchkick//lib/searchkick/index.rb#13
  def index_options; end

  # other
  #
  # source://searchkick//lib/searchkick/index.rb#242
  def klass_document_type(klass, ignore_type = T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#266
  def locations_fields; end

  # source://searchkick//lib/searchkick/index.rb#43
  def mapping; end

  # Returns the value of attribute name.
  #
  # source://searchkick//lib/searchkick/index.rb#5
  def name; end

  # Returns the value of attribute options.
  #
  # source://searchkick//lib/searchkick/index.rb#5
  def options; end

  # source://searchkick//lib/searchkick/index.rb#76
  def promote(new_name, update_refresh_interval: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#35
  def refresh; end

  # source://searchkick//lib/searchkick/index.rb#51
  def refresh_interval; end

  # reindex
  #
  # source://searchkick//lib/searchkick/index.rb#199
  def reindex(relation, method_name, scoped:, full: T.unsafe(nil), scope: T.unsafe(nil), **options); end

  # queue
  #
  # source://searchkick//lib/searchkick/index.rb#193
  def reindex_queue; end

  # @raise [Error]
  #
  # source://searchkick//lib/searchkick/index.rb#180
  def reload_synonyms; end

  # source://searchkick//lib/searchkick/logging.rb#33
  def remove(record); end

  # source://searchkick//lib/searchkick/index.rb#95
  def retrieve(record); end

  # source://searchkick//lib/searchkick/index.rb#156
  def search_id(record); end

  # source://searchkick//lib/searchkick/index.rb#47
  def settings; end

  # TODO use like: [{_index: ..., _id: ...}] in Searchkick 5
  #
  # source://searchkick//lib/searchkick/index.rb#165
  def similar_record(record, **options); end

  # record based
  # use helpers for notifications
  #
  # source://searchkick//lib/searchkick/logging.rb#19
  def store(record); end

  # source://searchkick//lib/searchkick/index.rb#262
  def suggest_fields; end

  # source://searchkick//lib/searchkick/index.rb#76
  def swap(new_name, update_refresh_interval: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#59
  def tokens(text, options = T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/index.rb#63
  def total_docs; end

  # source://searchkick//lib/searchkick/logging.rb#48
  def update_record(record, method_name); end

  # source://searchkick//lib/searchkick/index.rb#55
  def update_settings(settings); end

  # private
  #
  # source://searchkick//lib/searchkick/index.rb#274
  def uuid; end

  protected

  # source://searchkick//lib/searchkick/index.rb#284
  def bulk_indexer; end

  # safety check
  # still a chance for race condition since its called before promotion
  # ideal is for user to disable automatic index creation
  # https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#index-creation
  #
  # source://searchkick//lib/searchkick/index.rb#376
  def check_uuid(old_uuid, new_uuid); end

  # source://searchkick//lib/searchkick/index.rb#280
  def client; end

  # source://searchkick//lib/searchkick/index.rb#292
  def import_before_promotion(index, relation, **import_options); end

  # source://searchkick//lib/searchkick/index.rb#288
  def index_settings; end

  # https://gist.github.com/jarosan/3124884
  # http://www.elasticsearch.org/blog/changing-mapping-with-zero-downtime/
  #
  # source://searchkick//lib/searchkick/index.rb#298
  def reindex_scope(relation, import: T.unsafe(nil), resume: T.unsafe(nil), retain: T.unsafe(nil), async: T.unsafe(nil), refresh_interval: T.unsafe(nil), scope: T.unsafe(nil)); end
end

# source://searchkick//lib/searchkick/index_options.rb#2
class Searchkick::IndexOptions
  # @return [IndexOptions] a new instance of IndexOptions
  #
  # source://searchkick//lib/searchkick/index_options.rb#5
  def initialize(index); end

  # source://searchkick//lib/searchkick/index_options.rb#517
  def add_search_synonyms(settings); end

  # source://searchkick//lib/searchkick/index_options.rb#491
  def add_synonyms(settings); end

  # source://searchkick//lib/searchkick/index_options.rb#552
  def add_wordnet(settings); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index_options.rb#590
  def below62?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index_options.rb#594
  def below70?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/index_options.rb#598
  def below73?; end

  # source://searchkick//lib/searchkick/index_options.rb#586
  def default_analyzer; end

  # source://searchkick//lib/searchkick/index_options.rb#582
  def default_type; end

  # source://searchkick//lib/searchkick/index_options.rb#365
  def generate_mappings; end

  # @raise [ArgumentError]
  #
  # source://searchkick//lib/searchkick/index_options.rb#32
  def generate_settings; end

  # source://searchkick//lib/searchkick/index_options.rb#9
  def index_options; end

  # source://searchkick//lib/searchkick/index_options.rb#574
  def index_type; end

  # Returns the value of attribute options.
  #
  # source://searchkick//lib/searchkick/index_options.rb#3
  def options; end

  # source://searchkick//lib/searchkick/index_options.rb#567
  def set_deep_paging(settings); end

  # source://searchkick//lib/searchkick/index_options.rb#200
  def update_language(settings, language); end

  # source://searchkick//lib/searchkick/index_options.rb#310
  def update_stemming(settings); end
end

# source://searchkick//lib/searchkick/logging.rb#18
module Searchkick::IndexWithInstrumentation
  # source://searchkick//lib/searchkick/logging.rb#97
  def bulk_delete(records); end

  # source://searchkick//lib/searchkick/logging.rb#62
  def bulk_index(records); end

  # source://searchkick//lib/searchkick/logging.rb#80
  def bulk_update(records, *args); end

  # source://searchkick//lib/searchkick/logging.rb#62
  def import(records); end

  # source://searchkick//lib/searchkick/logging.rb#33
  def remove(record); end

  # source://searchkick//lib/searchkick/logging.rb#19
  def store(record); end

  # source://searchkick//lib/searchkick/logging.rb#48
  def update_record(record, method_name); end
end

# source://searchkick//lib/searchkick/indexer.rb#2
class Searchkick::Indexer
  include ::Searchkick::IndexerWithInstrumentation

  # @return [Indexer] a new instance of Indexer
  #
  # source://searchkick//lib/searchkick/indexer.rb#5
  def initialize; end

  # source://searchkick//lib/searchkick/logging.rb#116
  def perform; end

  # source://searchkick//lib/searchkick/indexer.rb#9
  def queue(items); end

  # Returns the value of attribute queued_items.
  #
  # source://searchkick//lib/searchkick/indexer.rb#3
  def queued_items; end
end

# source://searchkick//lib/searchkick/logging.rb#115
module Searchkick::IndexerWithInstrumentation
  # source://searchkick//lib/searchkick/logging.rb#116
  def perform; end
end

# source://searchkick//lib/searchkick.rb#37
class Searchkick::InvalidQueryError < ::Elasticsearch::Transport::Transport::Errors::BadRequest; end

# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/log_subscriber.rb
#
# source://searchkick//lib/searchkick/logging.rb#144
class Searchkick::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://searchkick//lib/searchkick/logging.rb#188
  def multi_search(event); end

  # source://searchkick//lib/searchkick/logging.rb#178
  def request(event); end

  # source://searchkick//lib/searchkick/logging.rb#159
  def search(event); end

  class << self
    # source://searchkick//lib/searchkick/logging.rb#153
    def reset_runtime; end

    # source://searchkick//lib/searchkick/logging.rb#149
    def runtime; end

    # source://searchkick//lib/searchkick/logging.rb#145
    def runtime=(value); end
  end
end

# source://searchkick//lib/searchkick/middleware.rb#4
class Searchkick::Middleware < ::Faraday::Middleware
  # source://searchkick//lib/searchkick/middleware.rb#5
  def call(env); end
end

# source://searchkick//lib/searchkick.rb#35
class Searchkick::MissingIndexError < ::Searchkick::Error; end

# source://searchkick//lib/searchkick/model.rb#2
module Searchkick::Model
  # @raise [ArgumentError]
  #
  # source://searchkick//lib/searchkick/model.rb#3
  def searchkick(**options); end
end

# source://searchkick//lib/searchkick/multi_search.rb#2
class Searchkick::MultiSearch
  # @return [MultiSearch] a new instance of MultiSearch
  #
  # source://searchkick//lib/searchkick/multi_search.rb#5
  def initialize(queries); end

  # source://searchkick//lib/searchkick/multi_search.rb#9
  def perform; end

  # Returns the value of attribute queries.
  #
  # source://searchkick//lib/searchkick/multi_search.rb#3
  def queries; end

  private

  # source://searchkick//lib/searchkick/multi_search.rb#37
  def client; end

  # source://searchkick//lib/searchkick/multi_search.rb#17
  def perform_search(search_queries, perform_retry: T.unsafe(nil)); end
end

# source://searchkick//lib/searchkick/process_batch_job.rb#2
class Searchkick::ProcessBatchJob < ::ActiveJob::Base
  # source://searchkick//lib/searchkick/process_batch_job.rb#5
  def perform(class_name:, record_ids:, index_name: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# source://searchkick//lib/searchkick/process_queue_job.rb#2
class Searchkick::ProcessQueueJob < ::ActiveJob::Base
  # source://searchkick//lib/searchkick/process_queue_job.rb#5
  def perform(class_name:, index_name: T.unsafe(nil), inline: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# source://searchkick//lib/searchkick/query.rb#2
class Searchkick::Query
  include ::Searchkick::QueryWithInstrumentation
  extend ::Forwardable

  # @raise [ArgumentError]
  # @return [Query] a new instance of Query
  #
  # source://searchkick//lib/searchkick/query.rb#17
  def initialize(klass, term = T.unsafe(nil), **options); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def [](*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def aggregations(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def aggs(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def any?(*args, &block); end

  # Returns the value of attribute body.
  #
  # source://searchkick//lib/searchkick/query.rb#8
  def body; end

  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://searchkick//lib/searchkick/query.rb#8
  def body=(_arg0); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def current_page(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def each(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def each_with_hit(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def empty?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def entry_name(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def error(*args, &block); end

  # source://searchkick//lib/searchkick/query.rb#90
  def execute; end

  # source://searchkick//lib/searchkick/logging.rb#6
  def execute_search; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def first(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def first_page?(*args, &block); end

  # source://searchkick//lib/searchkick/query.rb#126
  def handle_response(response); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def hits(*args, &block); end

  # Returns the value of attribute klass.
  #
  # source://searchkick//lib/searchkick/query.rb#7
  def klass; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def last_page?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def length(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def limit_value(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def map(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def model_name(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def next_page(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def num_pages(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def offset(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def offset_value(*args, &block); end

  # Returns the value of attribute options.
  #
  # source://searchkick//lib/searchkick/query.rb#7
  def options; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def out_of_range?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def padding(*args, &block); end

  # source://searchkick//lib/searchkick/query.rb#59
  def params; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def per_page(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def prev_page(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def previous_page(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def records(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def response(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def results(*args, &block); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#193
  def retry_misspellings?(response); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def scroll(*args, &block); end

  # source://searchkick//lib/searchkick/query.rb#47
  def searchkick_index; end

  # source://searchkick//lib/searchkick/query.rb#55
  def searchkick_klass; end

  # source://searchkick//lib/searchkick/query.rb#51
  def searchkick_options; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def size(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def slice(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def suggestions(*args, &block); end

  # Returns the value of attribute term.
  #
  # source://searchkick//lib/searchkick/query.rb#7
  def term; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def to_a(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def to_ary(*args, &block); end

  # source://searchkick//lib/searchkick/query.rb#105
  def to_curl; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def took(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def total_count(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def total_entries(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def total_pages(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def with_details(*args, &block); end

  private

  # source://searchkick//lib/searchkick/query.rb#1127
  def base_field(k); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1139
  def below61?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1143
  def below70?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1147
  def below73?; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1151
  def below75?; end

  # source://searchkick//lib/searchkick/query.rb#1135
  def body_options; end

  # source://searchkick//lib/searchkick/query.rb#1078
  def boost_filter(field, factor: T.unsafe(nil), modifier: T.unsafe(nil), missing: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/query.rb#1100
  def boost_filters(boost_by, modifier: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/query.rb#580
  def build_query(query, filters, should, must_not, custom_filters, multiply_filters); end

  # Recursively descend through nesting of arrays until we reach either a lat/lon object or an array of numbers,
  # eventually returning the same structure with all values transformed to [lon, lat].
  #
  # source://searchkick//lib/searchkick/query.rb#1109
  def coordinate_array(value); end

  # source://searchkick//lib/searchkick/query.rb#1071
  def custom_filter(field, value, factor); end

  # source://searchkick//lib/searchkick/query.rb#199
  def handle_error(e); end

  # source://searchkick//lib/searchkick/query.rb#1119
  def location_value(value); end

  # source://searchkick//lib/searchkick/query.rb#236
  def prepare; end

  # source://searchkick//lib/searchkick/query.rb#228
  def reindex_command; end

  # source://searchkick//lib/searchkick/query.rb#793
  def set_aggregations(payload, filters, post_filters); end

  # source://searchkick//lib/searchkick/query.rb#693
  def set_boost_by(multiply_filters, custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#655
  def set_boost_by_distance(custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#722
  def set_boost_by_indices(payload); end

  # source://searchkick//lib/searchkick/query.rb#680
  def set_boost_by_recency(custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#706
  def set_boost_where(custom_filters); end

  # source://searchkick//lib/searchkick/query.rb#613
  def set_conversions; end

  # source://searchkick//lib/searchkick/query.rb#642
  def set_exclude(field, analyzer); end

  # source://searchkick//lib/searchkick/query.rb#554
  def set_fields; end

  # source://searchkick//lib/searchkick/query.rb#761
  def set_highlights(payload, fields); end

  # source://searchkick//lib/searchkick/query.rb#872
  def set_order(payload); end

  # source://searchkick//lib/searchkick/query.rb#864
  def set_post_filters(payload, post_filters); end

  # source://searchkick//lib/searchkick/query.rb#733
  def set_suggestions(payload, suggest); end

  # source://searchkick//lib/searchkick/query.rb#1021
  def term_filters(field, value); end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/query.rb#1131
  def track_total_hits?; end

  # source://searchkick//lib/searchkick/query.rb#880
  def where_filters(where); end
end

# source://searchkick//lib/searchkick/logging.rb#5
module Searchkick::QueryWithInstrumentation
  # source://searchkick//lib/searchkick/logging.rb#6
  def execute_search; end
end

# source://searchkick//lib/searchkick/record_data.rb#2
class Searchkick::RecordData
  # @return [RecordData] a new instance of RecordData
  #
  # source://searchkick//lib/searchkick/record_data.rb#7
  def initialize(index, record); end

  # source://searchkick//lib/searchkick/record_data.rb#24
  def delete_data; end

  # source://searchkick//lib/searchkick/record_data.rb#33
  def document_type(ignore_type = T.unsafe(nil)); end

  # Returns the value of attribute index.
  #
  # source://searchkick//lib/searchkick/record_data.rb#5
  def index; end

  # source://searchkick//lib/searchkick/record_data.rb#12
  def index_data; end

  # Returns the value of attribute record.
  #
  # source://searchkick//lib/searchkick/record_data.rb#5
  def record; end

  # source://searchkick//lib/searchkick/record_data.rb#37
  def record_data; end

  # source://searchkick//lib/searchkick/record_data.rb#28
  def search_id; end

  # source://searchkick//lib/searchkick/record_data.rb#18
  def update_data(method_name); end

  private

  # change all BigDecimal values to floats due to
  # https://github.com/rails/rails/issues/6033
  # possible loss of precision :/
  #
  # source://searchkick//lib/searchkick/record_data.rb#106
  def cast_big_decimal(obj); end

  # source://searchkick//lib/searchkick/record_data.rb#93
  def location_value(value); end

  # source://searchkick//lib/searchkick/record_data.rb#49
  def search_data(method_name = T.unsafe(nil)); end
end

# source://searchkick//lib/searchkick/record_data.rb#3
Searchkick::RecordData::TYPE_KEYS = T.let(T.unsafe(nil), Array)

# source://searchkick//lib/searchkick/record_indexer.rb#2
class Searchkick::RecordIndexer
  # @return [RecordIndexer] a new instance of RecordIndexer
  #
  # source://searchkick//lib/searchkick/record_indexer.rb#5
  def initialize(record); end

  # Returns the value of attribute index.
  #
  # source://searchkick//lib/searchkick/record_indexer.rb#3
  def index; end

  # Returns the value of attribute record.
  #
  # source://searchkick//lib/searchkick/record_indexer.rb#3
  def record; end

  # source://searchkick//lib/searchkick/record_indexer.rb#10
  def reindex(method_name = T.unsafe(nil), refresh: T.unsafe(nil), mode: T.unsafe(nil)); end

  private

  # source://searchkick//lib/searchkick/record_indexer.rb#59
  def queue_escape(value); end

  # source://searchkick//lib/searchkick/record_indexer.rb#63
  def reindex_record(method_name); end
end

# source://searchkick//lib/searchkick/reindex_queue.rb#2
class Searchkick::ReindexQueue
  # @raise [Searchkick::Error]
  # @return [ReindexQueue] a new instance of ReindexQueue
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#5
  def initialize(name); end

  # source://searchkick//lib/searchkick/reindex_queue.rb#30
  def clear; end

  # source://searchkick//lib/searchkick/reindex_queue.rb#34
  def length; end

  # Returns the value of attribute name.
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#3
  def name; end

  # source://searchkick//lib/searchkick/reindex_queue.rb#11
  def push(record_id); end

  # TODO use reliable queuing
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#16
  def reserve(limit: T.unsafe(nil)); end

  private

  # source://searchkick//lib/searchkick/reindex_queue.rb#40
  def redis_key; end

  # source://searchkick//lib/searchkick/reindex_queue.rb#48
  def redis_version; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/reindex_queue.rb#44
  def supports_rpop_with_count?; end
end

# source://searchkick//lib/searchkick/reindex_v2_job.rb#2
class Searchkick::ReindexV2Job < ::ActiveJob::Base
  # source://searchkick//lib/searchkick/reindex_v2_job.rb#12
  def perform(klass, id, method_name = T.unsafe(nil), routing: T.unsafe(nil)); end

  class << self
    # source://activejob/7.0.4/lib/active_job/queue_name.rb#56
    def queue_name; end
  end
end

# source://searchkick//lib/searchkick/reindex_v2_job.rb#3
Searchkick::ReindexV2Job::RECORD_NOT_FOUND_CLASSES = T.let(T.unsafe(nil), Array)

# source://searchkick//lib/searchkick/results.rb#4
class Searchkick::Results
  include ::Enumerable
  extend ::Forwardable

  # @return [Results] a new instance of Results
  #
  # source://searchkick//lib/searchkick/results.rb#12
  def initialize(klass, response, options = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def [](*args, &block); end

  # source://searchkick//lib/searchkick/results.rb#46
  def aggregations; end

  # source://searchkick//lib/searchkick/results.rb#50
  def aggs; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def any?(*args, &block); end

  # source://searchkick//lib/searchkick/results.rb#208
  def clear_scroll; end

  # source://searchkick//lib/searchkick/results.rb#102
  def current_page; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def each(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def empty?(*args, &block); end

  # source://searchkick//lib/searchkick/results.rb#81
  def entry_name(options = T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/results.rb#69
  def error; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#134
  def first_page?; end

  # source://searchkick//lib/searchkick/results.rb#154
  def highlights(multiple: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/results.rb#146
  def hits; end

  # Returns the value of attribute klass.
  #
  # source://searchkick//lib/searchkick/results.rb#8
  def klass; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#138
  def last_page?; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def length(*args, &block); end

  # source://searchkick//lib/searchkick/results.rb#106
  def limit_value; end

  # source://searchkick//lib/searchkick/results.rb#32
  def missing_records; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#175
  def misspellings?; end

  # source://searchkick//lib/searchkick/results.rb#73
  def model_name; end

  # source://searchkick//lib/searchkick/results.rb#130
  def next_page; end

  # source://searchkick//lib/searchkick/results.rb#115
  def num_pages; end

  # source://searchkick//lib/searchkick/results.rb#120
  def offset; end

  # source://searchkick//lib/searchkick/results.rb#120
  def offset_value; end

  # Returns the value of attribute options.
  #
  # source://searchkick//lib/searchkick/results.rb#8
  def options; end

  # @return [Boolean]
  #
  # source://searchkick//lib/searchkick/results.rb#142
  def out_of_range?; end

  # source://searchkick//lib/searchkick/results.rb#111
  def padding; end

  # source://searchkick//lib/searchkick/results.rb#106
  def per_page; end

  # source://searchkick//lib/searchkick/results.rb#125
  def prev_page; end

  # source://searchkick//lib/searchkick/results.rb#125
  def previous_page; end

  # Returns the value of attribute response.
  #
  # source://searchkick//lib/searchkick/results.rb#8
  def response; end

  # source://searchkick//lib/searchkick/results.rb#18
  def results; end

  # @raise [Searchkick::Error]
  #
  # source://searchkick//lib/searchkick/results.rb#183
  def scroll; end

  # source://searchkick//lib/searchkick/results.rb#179
  def scroll_id; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def size(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def slice(*args, &block); end

  # source://searchkick//lib/searchkick/results.rb#36
  def suggestions; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def to_ary(*args, &block); end

  # source://searchkick//lib/searchkick/results.rb#65
  def took; end

  # source://searchkick//lib/searchkick/results.rb#91
  def total_count; end

  # source://searchkick//lib/searchkick/results.rb#91
  def total_entries; end

  # source://searchkick//lib/searchkick/results.rb#115
  def total_pages; end

  # TODO return enumerator like with_score
  #
  # source://searchkick//lib/searchkick/results.rb#161
  def with_highlights(multiple: T.unsafe(nil)); end

  # TODO return enumerator like with_score
  #
  # source://searchkick//lib/searchkick/results.rb#23
  def with_hit; end

  # source://searchkick//lib/searchkick/results.rb#167
  def with_score; end

  private

  # source://searchkick//lib/searchkick/results.rb#341
  def base_field(k); end

  # source://searchkick//lib/searchkick/results.rb#331
  def combine_includes(result, inc); end

  # source://searchkick//lib/searchkick/results.rb#345
  def hit_highlights(hit, multiple: T.unsafe(nil)); end

  # source://searchkick//lib/searchkick/results.rb#305
  def results_query(records, hits); end

  # source://searchkick//lib/searchkick/results.rb#221
  def with_hit_and_missing_records; end
end

# source://searchkick//lib/searchkick/logging.rb#131
module Searchkick::SearchkickWithInstrumentation
  # source://searchkick//lib/searchkick/logging.rb#132
  def multi_search(searches); end
end

# source://searchkick//lib/searchkick.rb#36
class Searchkick::UnsupportedVersionError < ::Searchkick::Error; end

# source://searchkick//lib/searchkick/version.rb#2
Searchkick::VERSION = T.let(T.unsafe(nil), String)

# source://searchkick//lib/searchkick/railtie.rb#1
module Searckick; end

# source://searchkick//lib/searchkick/railtie.rb#2
class Searckick::Railtie < ::Rails::Railtie; end
