# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `geokit` gem.
# Please instead update this file by running `bin/tapioca gem geokit`.


# require 'forwardable'
#
# source://geokit//lib/geokit.rb#1
module Geokit
  class << self
    # source://geokit//lib/geokit.rb#7
    def default_formula; end

    # source://geokit//lib/geokit.rb#15
    def default_formula=(obj); end

    # source://geokit//lib/geokit.rb#7
    def default_units; end

    # source://geokit//lib/geokit.rb#15
    def default_units=(obj); end
  end
end

# Bounds represents a rectangular bounds, defined by the SW and NE corners
#
# source://geokit//lib/geokit/bounds.rb#3
class Geokit::Bounds
  # provide sw and ne to instantiate a new Bounds instance
  #
  # @return [Bounds] a new instance of Bounds
  #
  # source://geokit//lib/geokit/bounds.rb#8
  def initialize(sw, ne); end

  # Returns true if the candidate object is logically equal. Logical
  # equivalence is true if the lat and lng attributes are the same for both
  # objects.
  #
  # source://geokit//lib/geokit/bounds.rb#51
  def ==(other); end

  # returns the a single point which is the center of the rectangular bounds
  #
  # source://geokit//lib/geokit/bounds.rb#16
  def center; end

  # Returns true if the bounds contain the passed point.
  # allows for bounds which cross the meridian
  #
  # @return [Boolean]
  #
  # source://geokit//lib/geokit/bounds.rb#32
  def contains?(point); end

  # returns true if the bounds crosses the international dateline
  #
  # @return [Boolean]
  #
  # source://geokit//lib/geokit/bounds.rb#44
  def crosses_meridian?; end

  # sw and ne are LatLng objects
  #
  # source://geokit//lib/geokit/bounds.rb#5
  def ne; end

  # sw and ne are LatLng objects
  #
  # source://geokit//lib/geokit/bounds.rb#5
  def ne=(_arg0); end

  # sw and ne are LatLng objects
  #
  # source://geokit//lib/geokit/bounds.rb#5
  def sw; end

  # sw and ne are LatLng objects
  #
  # source://geokit//lib/geokit/bounds.rb#5
  def sw=(_arg0); end

  # a two-element array of two-element arrays: sw,ne
  #
  # source://geokit//lib/geokit/bounds.rb#26
  def to_a; end

  # a simple string representation:sw,ne
  #
  # source://geokit//lib/geokit/bounds.rb#21
  def to_s; end

  # Equivalent to Google Maps API's .toSpan() method on GLatLng's.
  #
  # Returns a LatLng object, whose coordinates represent the size of a
  # rectangle defined by these bounds.
  #
  # source://geokit//lib/geokit/bounds.rb#60
  def to_span; end

  class << self
    # returns an instance of bounds which completely encompases the given
    # circle
    #
    # source://geokit//lib/geokit/bounds.rb#69
    def from_point_and_radius(point, radius, options = T.unsafe(nil)); end

    # Takes two main combinations of arguments to create a bounds:
    # point,point   (this is the only one which takes two arguments
    # [point,point]
    # . . . where a point is anything LatLng#normalize can handle
    #       (which is quite a lot)
    #
    # NOTE: everything combination is assumed to pass points in the order
    # sw, ne
    #
    # source://geokit//lib/geokit/bounds.rb#88
    def normalize(thing, other = T.unsafe(nil)); end
  end
end

# This class encapsulates the result of a geocoding call.
# It's primary purpose is to homogenize the results of multiple
# geocoding providers. It also provides some additional functionality, such as
# the "full address" method for geocoders that do not provide a
# full address in their results (for example, Yahoo), and the "is_us" method.
#
# Some geocoders can return multple results. Geoloc can capture multiple
# results through its "all" method.
#
# For the geocoder setting the results, it would look something like this:
#     geo=GeoLoc.new(first_result)
#     geo.all.push(second_result)
#     geo.all.push(third_result)
#
# Then, for the user of the result:
#
#     puts geo.full_address     # just like usual
#     puts geo.all.size  => 3   # there's three results total
#     puts geo.all.first        # all is just an array or additional geolocs,
#                                 so do what you want with it
#
# source://geokit//lib/geokit/geo_loc.rb#22
class Geokit::GeoLoc < ::Geokit::LatLng
  # Constructor expects a hash of symbols to correspond with attributes.
  #
  # @return [GeoLoc] a new instance of GeoLoc
  #
  # source://geokit//lib/geokit/geo_loc.rb#50
  def initialize(h = T.unsafe(nil)); end

  # accuracy is set for Yahoo and Google geocoders, it is a numeric value of
  # the precision. see
  # http://code.google.com/apis/maps/documentation/geocoding/#GeocodingAccuracy
  #
  # source://geokit//lib/geokit/geo_loc.rb#41
  def accuracy; end

  # accuracy is set for Yahoo and Google geocoders, it is a numeric value of
  # the precision. see
  # http://code.google.com/apis/maps/documentation/geocoding/#GeocodingAccuracy
  #
  # source://geokit//lib/geokit/geo_loc.rb#41
  def accuracy=(_arg0); end

  # Returns the value of attribute all.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def all; end

  # Sets the attribute all
  #
  # @param value the value to set the attribute all to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def all=(_arg0); end

  # FCC Attributes
  #
  # source://geokit//lib/geokit/geo_loc.rb#43
  def block_fips; end

  # FCC Attributes
  #
  # source://geokit//lib/geokit/geo_loc.rb#43
  def block_fips=(_arg0); end

  # Returns the value of attribute city.
  #
  # source://geokit//lib/geokit/geo_loc.rb#32
  def city; end

  # Sets the city after capitalizing each word within the city name.
  #
  # source://geokit//lib/geokit/geo_loc.rb#122
  def city=(city); end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def country; end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def country=(_arg0); end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def country_code; end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def country_code=(_arg0); end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def county; end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def county=(_arg0); end

  # Returns the value of attribute district.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def district; end

  # Sets the attribute district
  #
  # @param value the value to set the attribute district to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def district=(_arg0); end

  # FCC Attributes
  #
  # source://geokit//lib/geokit/geo_loc.rb#43
  def district_fips; end

  # FCC Attributes
  #
  # source://geokit//lib/geokit/geo_loc.rb#43
  def district_fips=(_arg0); end

  # source://geokit//lib/geokit/geo_loc.rb#149
  def encode_with(coder); end

  # Returns Google-supplied normalized address string or concatenation of address parts
  #
  # source://geokit//lib/geokit/geo_loc.rb#106
  def formatted_address; end

  # Sets the attribute formatted_address
  #
  # @param value the value to set the attribute formatted_address to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#31
  def formatted_address=(_arg0); end

  # full_address is provided by google but not by yahoo. It is intended that
  # the google geocoding method will provide the full address, whereas for
  # yahoo it will be derived from the parts of the address we do have.
  #
  # source://geokit//lib/geokit/geo_loc.rb#89
  def full_address; end

  # Sets the attribute full_address
  #
  # @param value the value to set the attribute full_address to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#31
  def full_address=(_arg0); end

  # gives you all the important fields as key-value pairs
  #
  # source://geokit//lib/geokit/geo_loc.rb#111
  def hash; end

  # Returns true if geocoded to the United States.
  #
  # @return [Boolean]
  #
  # source://geokit//lib/geokit/geo_loc.rb#78
  def is_us?; end

  # Returns the value of attribute neighborhood.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def neighborhood; end

  # Sets the attribute neighborhood
  #
  # @param value the value to set the attribute neighborhood to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def neighborhood=(_arg0); end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def place_id; end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def place_id=(_arg0); end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def precision; end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def precision=(_arg0); end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def provider; end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def provider=(_arg0); end

  # source://geokit//lib/geokit/geo_loc.rb#45
  def province; end

  # source://geokit//lib/geokit/geo_loc.rb#73
  def state; end

  # Sets the attribute state
  #
  # @param value the value to set the attribute state to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#31
  def state=(_arg0); end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def state_code; end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def state_code=(_arg0); end

  # FCC Attributes
  #
  # source://geokit//lib/geokit/geo_loc.rb#43
  def state_fips; end

  # FCC Attributes
  #
  # source://geokit//lib/geokit/geo_loc.rb#43
  def state_fips=(_arg0); end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def state_name; end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def state_name=(_arg0); end

  # Returns the value of attribute street_address.
  #
  # source://geokit//lib/geokit/geo_loc.rb#32
  def street_address; end

  # Sets the street address after capitalizing each word within the street
  # address.
  #
  # source://geokit//lib/geokit/geo_loc.rb#128
  def street_address=(address); end

  # Returns the street name portion of the street address where possible
  #
  # source://geokit//lib/geokit/geo_loc.rb#100
  def street_name; end

  # Sets the attribute street_name
  #
  # @param value the value to set the attribute street_name to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#31
  def street_name=(_arg0); end

  # Extracts the street number from the street address where possible.
  #
  # source://geokit//lib/geokit/geo_loc.rb#94
  def street_number; end

  # Sets the attribute street_number
  #
  # @param value the value to set the attribute street_number to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#31
  def street_number=(_arg0); end

  # Returns the value of attribute sub_premise.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def sub_premise; end

  # Sets the attribute sub_premise
  #
  # @param value the value to set the attribute sub_premise to.
  #
  # source://geokit//lib/geokit/geo_loc.rb#29
  def sub_premise=(_arg0); end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def success; end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def success=(_arg0); end

  # @return [Boolean]
  #
  # source://geokit//lib/geokit/geo_loc.rb#82
  def success?; end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def suggested_bounds; end

  # Attributes set upon return from geocoding. Success will be true for
  # successful geocode lookups. The provider will be set to the name of the
  # providing geocoder. Finally, precision is an indicator of the accuracy of
  # the geocoding.
  #
  # source://geokit//lib/geokit/geo_loc.rb#37
  def suggested_bounds=(_arg0); end

  # Returns a comma-delimited string consisting of the street address, city,
  # state, zip, and country code. Only includes those attributes
  # that are non-blank.
  #
  # source://geokit//lib/geokit/geo_loc.rb#139
  def to_geocodeable_s; end

  # gives you all the important fields as key-value pairs
  #
  # source://geokit//lib/geokit/geo_loc.rb#111
  def to_hash; end

  # Returns a string representation of the instance.
  #
  # source://geokit//lib/geokit/geo_loc.rb#156
  def to_s; end

  # source://geokit//lib/geokit/geo_loc.rb#145
  def to_yaml_properties; end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def zip; end

  # Location attributes. Full address is a concatenation of all values.
  # For example:
  # 100 Spear St, San Francisco, CA, 94101, US
  # Street number and street name are extracted from the street address
  # attribute if they don't exist
  #
  # source://geokit//lib/geokit/geo_loc.rb#28
  def zip=(_arg0); end
end

# Contains a range of geocoders:
#
# ### "regular" address geocoders
# * Yahoo Geocoder - requires an API key.
# * Geocoder.us - may require authentication if performing more than the free request limit.
# * Geocoder.ca - for Canada; may require authentication as well.
# * Geonames - a free geocoder
#
# ### address geocoders that also provide reverse geocoding
# * Google Geocoder - requires an API key.
#
# ### IP address geocoders
# * IP Geocoder - geocodes an IP address using hostip.info's web service.
# * Geoplugin.net -- another IP address geocoder
# * IP-API.com -- another IP address geocoder
#
# ### The Multigeocoder
# * Multi Geocoder - provides failover for the physical location geocoders.
#
# Some of these geocoders require configuration. You don't have to provide it here. See the README.
#
# source://geokit//lib/geokit/geocoders.rb#34
module Geokit::Geocoders
  class << self
    # source://geokit//lib/geokit/geocoders.rb#48
    def __define_accessors; end

    # source://geokit//lib/geokit/geocoders.rb#52
    def domain; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def domain=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def host; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def host=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def ip_provider_order; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def ip_provider_order=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def logger; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def logger=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def net_adapter; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def net_adapter=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def provider_order; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def provider_order=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def proxy; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def proxy=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def request_timeout; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def request_timeout=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def secure; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def secure=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def ssl_verify_mode; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def ssl_verify_mode=(obj); end

    # source://geokit//lib/geokit/geocoders.rb#52
    def useragent; end

    # source://geokit//lib/geokit/geocoders.rb#64
    def useragent=(obj); end
  end
end

# source://geokit//lib/geokit/geocoders.rb#77
class Geokit::Geocoders::AccessDeniedError < ::StandardError; end

# source://geokit//lib/geokit/geocoders/base_ip.rb#3
class Geokit::Geocoders::BaseIpGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # @return [Boolean]
    #
    # source://geokit//lib/geokit/geocoders/base_ip.rb#29
    def ip?(ip); end

    # Checks whether the IP address belongs to a private address range.
    #
    # This function is used to reduce the number of useless queries made to
    # the geocoding service. Such queries can occur frequently during
    # integration tests.
    #
    # @return [Boolean]
    #
    # source://geokit//lib/geokit/geocoders/base_ip.rb#43
    def private_ip_address?(ip); end

    # source://geokit//lib/geokit/geocoders/base_ip.rb#33
    def process(format, ip); end

    def secure; end
    def secure=(value); end

    # @return [Boolean]
    #
    # source://geokit//lib/geokit/geocoders/base_ip.rb#25
    def valid_ip?(ip); end
  end
end

# A number of non-routable IP ranges.
#
# --
# Sources for these:
#   RFC 3330: Special-Use IPv4 Addresses
#   The bogon list: http://www.cymru.com/Documents/bogon-list.html
#
# source://geokit//lib/geokit/geocoders/base_ip.rb#11
Geokit::Geocoders::BaseIpGeocoder::NON_ROUTABLE_IP_RANGES = T.let(T.unsafe(nil), Array)

# Bing geocoder implementation.  Requires the Geokit::Geocoders::bing variable to
# contain a Bing Maps API key.  Conforms to the interface set by the Geocoder class.
#
# source://geokit//lib/geokit/geocoders/bing.rb#5
class Geokit::Geocoders::BingGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/bing.rb#12
    def do_geocode(address, _ = T.unsafe(nil)); end

    # extracts a single geoloc from a //Location element in the bing results xml
    #
    # source://geokit//lib/geokit/geocoders/bing.rb#40
    def extract_location(xml); end

    def key; end
    def key=(value); end
    def options; end
    def options=(value); end

    # source://geokit//lib/geokit/geocoders/bing.rb#27
    def parse_xml(xml); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/bing.rb#61
    def set_address_components(loc, xml); end

    # source://geokit//lib/geokit/geocoders/bing.rb#93
    def set_bounds(loc, xml); end

    # source://geokit//lib/geokit/geocoders/bing.rb#83
    def set_precision(loc, xml); end

    # source://geokit//lib/geokit/geocoders/bing.rb#20
    def submit_url(address); end
  end
end

# source://geokit//lib/geokit/geocoders/bing.rb#65
Geokit::Geocoders::BingGeocoder::ACCURACY_MAP = T.let(T.unsafe(nil), Hash)

# source://geokit//lib/geokit/geocoders/bing.rb#71
Geokit::Geocoders::BingGeocoder::PRECISION_MAP = T.let(T.unsafe(nil), Hash)

# source://geokit//lib/geokit/geocoders/bing.rb#49
Geokit::Geocoders::BingGeocoder::XML_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://geokit//lib/geokit/geocoders/ca_geocoder.rb#14
class Geokit::Geocoders::CaGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/ca_geocoder.rb#20
    def do_geocode(loc, _ = T.unsafe(nil)); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/ca_geocoder.rb#24
    def parse_xml(xml, loc); end

    def secure; end
    def secure=(value); end

    # Formats the request in the format acceptable by the CA geocoder.
    #
    # source://geokit//lib/geokit/geocoders/ca_geocoder.rb#37
    def submit_url(loc); end
  end
end

# source://geokit//lib/geokit/geocoders/fcc.rb#3
class Geokit::Geocoders::FCCGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the reverse-geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/fcc.rb#9
    def do_reverse_geocode(latlng); end

    # JSON result looks like this
    # => {"County"=>{"name"=>"Wayne", "FIPS"=>"18177"},
    # "Block"=>{"FIPS"=>"181770103002004"},
    # "executionTime"=>"0.099",
    # "State"=>{"name"=>"Indiana", "code"=>"IN", "FIPS"=>"18"},
    # "status"=>"OK"}
    #
    # @raise [Geokit::Geocoders::GeocodeError]
    #
    # source://geokit//lib/geokit/geocoders/fcc.rb#28
    def parse_json(results); end

    def secure; end
    def secure=(value); end
  end
end

# Provides geocoding based upon an IP address.  The underlying web service is geoplugin.net
#
# source://geokit//lib/geokit/geocoders/geo_plugin.rb#4
class Geokit::Geocoders::GeoPluginGeocoder < ::Geokit::Geocoders::BaseIpGeocoder
  class << self
    # source://geokit//lib/geokit/geocoders/geo_plugin.rb#7
    def do_geocode(ip, _ = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/geo_plugin.rb#23
    def parse_xml(xml); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/geo_plugin.rb#11
    def submit_url(ip); end
  end
end

# source://geokit//lib/geokit/geocoders/geo_plugin.rb#15
Geokit::Geocoders::GeoPluginGeocoder::XML_MAPPINGS = T.let(T.unsafe(nil), Hash)

# Provides geocoding based upon an IP address.  The underlying web service is GeoSelect
#
# source://geokit//lib/geokit/geocoders/geobytes.rb#4
class Geokit::Geocoders::GeobytesGeocoder < ::Geokit::Geocoders::BaseIpGeocoder
  class << self
    # source://geokit//lib/geokit/geocoders/geobytes.rb#5
    def do_geocode(ip, _ = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/geobytes.rb#13
    def parse_json(json); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/geobytes.rb#9
    def submit_url(ip); end
  end
end

# Error which is thrown in the event a geocoding error occurs.
#
# source://geokit//lib/geokit/geocoders.rb#75
class Geokit::Geocoders::GeocodeError < ::StandardError; end

# The Geocoder base class which defines the interface to be used by all
# other geocoders.
#
# source://geokit//lib/geokit/geocoders.rb#86
class Geokit::Geocoders::Geocoder
  class << self
    # Call the geocoder service using the timeout if configured.
    #
    # source://geokit//lib/geokit/geocoders.rb#141
    def call_geocoder_service(url); end

    # source://geokit//lib/geokit/geocoders.rb#116
    def config(*attrs); end

    # Wraps the geocoder call around a proxy if necessary.
    #
    # source://geokit//lib/geokit/geocoders.rb#164
    def do_get(url); end

    # Not all geocoders can do reverse geocoding. So, unless the subclass explicitly overrides this method,
    # a call to reverse_geocode will return an empty GeoLoc. If you happen to be using MultiGeocoder,
    # this will cause it to failover to the next geocoder, which will hopefully be one which supports reverse geocoding.
    #
    # source://geokit//lib/geokit/geocoders.rb#151
    def do_reverse_geocode(_latlng); end

    # Main method which calls the do_geocode template method which subclasses
    # are responsible for implementing.  Returns a populated GeoLoc or an
    # empty one with a failed success code.
    #
    # source://geokit//lib/geokit/geocoders.rb#90
    def geocode(address, *args); end

    # @private
    #
    # source://geokit//lib/geokit/geocoders.rb#130
    def inherited(base); end

    # source://geokit//lib/geokit/geocoders.rb#110
    def logger; end

    # source://geokit//lib/geokit/geocoders.rb#168
    def net_adapter; end

    # source://geokit//lib/geokit/geocoders.rb#134
    def new_loc; end

    # source://geokit//lib/geokit/geocoders.rb#176
    def parse(format, body, *args); end

    # source://geokit//lib/geokit/geocoders.rb#202
    def process(format, url, *args); end

    # source://geokit//lib/geokit/geocoders.rb#159
    def protocol; end

    # source://geokit//lib/geokit/geocoders.rb#172
    def provider_name; end

    # Main method which calls the do_reverse_geocode template method which subclasses
    # are responsible for implementing.  Returns a populated GeoLoc or an
    # empty one with a failed success code.
    #
    # source://geokit//lib/geokit/geocoders.rb#103
    def reverse_geocode(latlng, *args); end

    # source://geokit//lib/geokit/geocoders.rb#196
    def set_mappings(loc, xml, mappings); end

    # @return [Boolean]
    #
    # source://geokit//lib/geokit/geocoders.rb#155
    def use_https?; end
  end
end

# source://geokit//lib/geokit/geocoders/geocodio.rb#3
class Geokit::Geocoders::GeocodioGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # source://geokit//lib/geokit/geocoders/geocodio.rb#35
    def create_new_loc(json); end

    # source://geokit//lib/geokit/geocoders/geocodio.rb#8
    def do_geocode(address, _ = T.unsafe(nil)); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/geocodio.rb#21
    def parse_json(json); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/geocodio.rb#42
    def set_address_components(json, loc); end

    # source://geokit//lib/geokit/geocoders/geocodio.rb#53
    def set_coordinates(json, loc); end

    # source://geokit//lib/geokit/geocoders/geocodio.rb#12
    def submit_url(address); end
  end
end

# Another geocoding web service
# http://www.geonames.org
#
# source://geokit//lib/geokit/geocoders/geonames.rb#5
class Geokit::Geocoders::GeonamesGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/geonames.rb#11
    def do_geocode(address, _ = T.unsafe(nil)); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/geonames.rb#42
    def parse_xml(xml); end

    def premium; end
    def premium=(value); end
    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/geonames.rb#15
    def submit_url(address); end
  end
end

# source://geokit//lib/geokit/geocoders/geonames.rb#32
Geokit::Geocoders::GeonamesGeocoder::XML_MAPPINGS = T.let(T.unsafe(nil), Hash)

# source://geokit//lib/geokit/geocoders/google.rb#3
class Geokit::Geocoders::GoogleGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    def api_key; end
    def api_key=(value); end
    def channel; end
    def channel=(value); end
    def client_id; end
    def client_id=(value); end

    # source://geokit//lib/geokit/geocoders/google.rb#97
    def construct_bias_string_from_options(bias); end

    # source://geokit//lib/geokit/geocoders/google.rb#109
    def construct_components_string_from_options(components = T.unsafe(nil)); end

    def cryptographic_key; end
    def cryptographic_key=(value); end

    # ==== OPTIONS
    # * :language - See: https://developers.google.com/maps/documentation/geocoding
    # * :bias - This option makes the Google Geocoder return results biased to a particular
    #           country or viewport. Country code biasing is achieved by passing the ccTLD
    #           ('uk' for .co.uk, for example) as a :bias value. For a list of ccTLD's,
    #           look here: http://en.wikipedia.org/wiki/CcTLD. By default, the geocoder
    #           will be biased to results within the US (ccTLD .com).
    #
    #           If you'd like the Google Geocoder to prefer results within a given viewport,
    #           you can pass a Geokit::Bounds object as the :bias value.
    # * :components - This option allows restricting results by specific areas. See
    #           https://developers.google.com/maps/documentation/geocoding/intro#ComponentFiltering
    #           for details.
    #
    # ==== EXAMPLES
    # # By default, the geocoder will return Toledo, OH
    # Geokit::Geocoders::GoogleGeocoder.geocode('Toledo').country_code # => 'US'
    # # With country code biasing, it returns Toledo (spannish city), Spain
    # Geokit::Geocoders::GoogleGeocoder.geocode('Toledo', :bias => :es).country_code # => 'Es'
    #
    # # By default, the geocoder will return Winnetka, IL
    # Geokit::Geocoders::GoogleGeocoder.geocode('Winnetka').state # => 'IL'
    # # When biased to an bounding box around California, it will now return the Winnetka neighbourhood, CA
    # bounds = Geokit::Bounds.normalize([34.074081, -118.694401], [34.321129, -118.399487])
    # Geokit::Geocoders::GoogleGeocoder.geocode('Winnetka', :bias => bounds).state # => 'CA'
    #
    # # By default, the geocoder will return several matches for Austin with
    # the first one being in Texas
    # Geokit::Geocoders::GoogleGeocoder.geocode('Austin').state # => 'TX'
    # # Using Component Filtering the results can be restricted to a specific
    # area, e.g. IL
    # Geokit::Geocoders::GoogleGeocoder.geocode('Austin',
    #   :components => {administrative_area: 'IL', country: 'US'}).state # => 'IL'
    #
    # source://geokit//lib/geokit/geocoders/google.rb#59
    def do_geocode(address, options = T.unsafe(nil)); end

    # ==== OPTIONS
    # * :language - See: https://developers.google.com/maps/documentation/geocoding
    # * :result_type - This option allows restricting results by specific result types.
    #                  See https://developers.google.com/maps/documentation/geocoding/intro#reverse-restricted
    #                  Note: This parameter is available only for requests that include an API key or a client ID.
    # * :location_type - This option allows restricting results by specific location type.
    #                    See https://developers.google.com/maps/documentation/geocoding/intro#reverse-restricted
    #                    Note: This parameter is available only for requests that include an API key or a client ID.
    #
    # source://geokit//lib/geokit/geocoders/google.rb#17
    def do_reverse_geocode(latlng, options = T.unsafe(nil)); end

    def host; end
    def host=(value); end

    # source://geokit//lib/geokit/geocoders/google.rb#116
    def parse_json(results); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/google.rb#195
    def set_address_components(loc, addr); end

    # source://geokit//lib/geokit/geocoders/google.rb#188
    def set_bounds(loc, addr); end

    # source://geokit//lib/geokit/geocoders/google.rb#231
    def set_precision(loc, addr); end

    # This code comes from Googles Examples
    # http://gmaps-samples.googlecode.com/svn/trunk/urlsigning/urlsigner.rb
    #
    # source://geokit//lib/geokit/geocoders/google.rb#69
    def sign_gmap_bus_api_url(urlToSign, google_cryptographic_key); end

    # source://geokit//lib/geokit/geocoders/google.rb#165
    def single_json_to_geoloc(addr); end

    # source://geokit//lib/geokit/geocoders/google.rb#80
    def submit_url(query_string, options = T.unsafe(nil)); end
  end
end

# these do not map well. Perhaps we should guess better based on size
# of bounding box where it exists? Does it really matter?
#
# source://geokit//lib/geokit/geocoders/google.rb#156
Geokit::Geocoders::GoogleGeocoder::ACCURACY = T.let(T.unsafe(nil), Hash)

# source://geokit//lib/geokit/geocoders/google.rb#163
Geokit::Geocoders::GoogleGeocoder::PRECISIONS = T.let(T.unsafe(nil), Array)

# Provides geocoding based upon an IP address.  The underlying web service is ip-api.com
#
# source://geokit//lib/geokit/geocoders/ip_api_geocoder.rb#4
class Geokit::Geocoders::IpApiGeocoder < ::Geokit::Geocoders::BaseIpGeocoder
  class << self
    # source://geokit//lib/geokit/geocoders/ip_api_geocoder.rb#7
    def do_geocode(ip, _ = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/ip_api_geocoder.rb#15
    def parse_json(result); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/ip_api_geocoder.rb#11
    def submit_url(ip); end
  end
end

# Provides geocoding based upon an IP address.  The underlying web service is a hostip.info
# which sources their data through a combination of publicly available information as well
# as community contributions.
#
# source://geokit//lib/geokit/geocoders/ip.rb#6
class Geokit::Geocoders::IpGeocoder < ::Geokit::Geocoders::BaseIpGeocoder
  class << self
    # Given an IP address, returns a GeoLoc instance which contains latitude,
    # longitude, city, and country code.  Sets the success attribute to false if the ip
    # parameter does not match an ip address.
    #
    # source://geokit//lib/geokit/geocoders/ip.rb#12
    def do_geocode(ip, _ = T.unsafe(nil)); end

    # Forces UTF-8 encoding on the body
    # Rails expects string input to be UTF-8
    # hostip.info specifies the charset encoding in the headers
    # thus extract encoding from headers and tell Rails about it by forcing it
    #
    # source://geokit//lib/geokit/geocoders/ip.rb#50
    def ensure_utf8_encoding(res); end

    # Extracts charset out of the response headers
    #
    # source://geokit//lib/geokit/geocoders/ip.rb#58
    def extract_charset(res); end

    # Converts the body to YAML since its in the form of:
    #
    # Country: UNITED STATES (US)
    # City: Sugar Grove, IL
    # Latitude: 41.7696
    # Longitude: -88.4588
    #
    # then instantiates a GeoLoc instance to populate with location data.
    #
    # source://geokit//lib/geokit/geocoders/ip.rb#35
    def parse_yaml(yaml); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/ip.rb#23
    def submit_url(ip); end
  end
end

# Provides geocoding based upon an IP address. The underlying web service is
# ipstack, old freegeoip.net
#
# source://geokit//lib/geokit/geocoders/ipstack.rb#5
class Geokit::Geocoders::IpstackGeocoder < ::Geokit::Geocoders::BaseIpGeocoder
  class << self
    def api_key; end
    def api_key=(value); end

    # source://geokit//lib/geokit/geocoders/ipstack.rb#10
    def do_geocode(ip, _options = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/ipstack.rb#18
    def parse_json(result); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/ipstack.rb#14
    def submit_url(ip); end
  end
end

# MapQuest geocoder implementation.  Requires the Geokit::Geocoders::MapQuestGeocoder:key
# variable to contain a MapQuest API key.  Conforms to the interface set by the Geocoder class.
#
# source://geokit//lib/geokit/geocoders/mapquest.rb#5
class Geokit::Geocoders::MapQuestGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/mapquest.rb#19
    def do_geocode(address, _ = T.unsafe(nil)); end

    # Template method which does the reverse-geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/mapquest.rb#12
    def do_reverse_geocode(latlng); end

    # source://geokit//lib/geokit/geocoders/mapquest.rb#41
    def extract_geoloc(result_json); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/mapquest.rb#25
    def parse_json(results); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/mapquest.rb#51
    def set_address_components(result_json, loc); end

    # source://geokit//lib/geokit/geocoders/mapquest.rb#59
    def set_precision(result_json, loc); end
  end
end

# Mapbox geocoder implementation.  Requires the Geokit::Geocoders::MapboxGeocoder:key variable to
# contain a Mapbox access token.  Conforms to the interface set by the Geocoder class.
#
# source://geokit//lib/geokit/geocoders/mapbox.rb#5
class Geokit::Geocoders::MapboxGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/mapbox.rb#20
    def do_geocode(address, _options = T.unsafe(nil)); end

    # Template method which does the reverse-geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/mapbox.rb#12
    def do_reverse_geocode(latlng, _options = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/mapbox.rb#41
    def extract_geoloc(result_json); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/mapbox.rb#27
    def parse_json(results); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/mapbox.rb#52
    def set_address_components(result_json, loc); end

    # source://geokit//lib/geokit/geocoders/mapbox.rb#87
    def set_bounds(bounds, loc); end

    # source://geokit//lib/geokit/geocoders/mapbox.rb#80
    def set_precision(loc); end
  end
end

# source://geokit//lib/geokit/geocoders/mapbox.rb#78
Geokit::Geocoders::MapboxGeocoder::PRECISION_VALUES = T.let(T.unsafe(nil), Array)

# Provides geocoding based upon an IP address.  The underlying web service is MaxMind
#
# source://geokit//lib/geokit/geocoders/maxmind.rb#4
class Geokit::Geocoders::MaxmindGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # source://geokit//lib/geokit/geocoders/maxmind.rb#9
    def do_geocode(ip, _ = T.unsafe(nil)); end

    def geoip_data_path; end
    def geoip_data_path=(value); end
    def secure; end
    def secure=(value); end
  end
end

# Provides methods to geocode with a variety of geocoding service providers,
# plus failover among providers in the order you configure. When 2nd
# parameter is set 'true', perform ip location lookup with 'address' as the
# ip address.
#
# Goal:
# - homogenize the results of multiple geocoders
#
# Limitations:
# - currently only provides the first result. Sometimes geocoders will
#   return multiple results.
# - currently discards the "accuracy" component of the geocoding calls
#
# source://geokit//lib/geokit/multi_geocoder.rb#19
class Geokit::Geocoders::MultiGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # This method will call one or more geocoders in the order specified in
    # the configuration until one of the geocoders work.
    #
    # The failover approach is crucial for production-grade apps, but is
    # rarely used.
    # 98% of your geocoding calls will be successful with the first call
    #
    # source://geokit//lib/geokit/multi_geocoder.rb#28
    def do_geocode(address, *args); end

    # This method will call one or more geocoders in the order specified in
    # the configuration until one of the geocoders work, only this time it's
    # going to try to reverse geocode a geographical point.
    #
    # source://geokit//lib/geokit/multi_geocoder.rb#48
    def do_reverse_geocode(latlng, *args); end

    # @raise [Geokit::Geocoders::NoSuchGeocoderError]
    #
    # source://geokit//lib/geokit/multi_geocoder.rb#65
    def geocoder(provider); end

    # source://geokit//lib/geokit/multi_geocoder.rb#71
    def provider_order_for(address, args); end

    def secure; end
    def secure=(value); end
  end
end

# source://geokit//lib/geokit/geocoders.rb#78
class Geokit::Geocoders::NoSuchGeocoderError < ::StandardError; end

# Open Street Map geocoder implementation.
#
# source://geokit//lib/geokit/geocoders/openstreetmap.rb#4
class Geokit::Geocoders::OSMGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#8
    def do_geocode(address, options = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#22
    def do_reverse_geocode(latlng, options = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#67
    def extract_geoloc(result_json); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#44
    def generate_bool_param_for_option(param, options); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#36
    def generate_param_for(param, value); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#40
    def generate_param_for_option(param, options); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#48
    def parse_json(results); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#82
    def set_address_components(address_data, loc); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#105
    def set_bounds(result_json, loc); end

    # source://geokit//lib/geokit/geocoders/openstreetmap.rb#98
    def set_precision(result_json, loc); end
  end
end

# OpenCage geocoder implementation.  Requires the Geokit::Geocoders::OpencageGeocoder.key
# variable to contain an API key.  Conforms to the interface set by the Geocoder class.
#
# source://geokit//lib/geokit/geocoders/opencage.rb#5
class Geokit::Geocoders::OpencageGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/opencage.rb#12
    def do_geocode(address, options = T.unsafe(nil)); end

    # Template method which does the reverse-geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/opencage.rb#25
    def do_reverse_geocode(latlng); end

    # source://geokit//lib/geokit/geocoders/opencage.rb#62
    def extract_geoloc(result_json); end

    # source://geokit//lib/geokit/geocoders/opencage.rb#40
    def generate_bool_param_for_option(param, options); end

    # source://geokit//lib/geokit/geocoders/opencage.rb#32
    def generate_param_for(param, value); end

    # source://geokit//lib/geokit/geocoders/opencage.rb#36
    def generate_param_for_option(param, options); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/opencage.rb#44
    def parse_json(results); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/opencage.rb#72
    def set_address_components(address_data, loc); end

    # source://geokit//lib/geokit/geocoders/opencage.rb#91
    def set_precision(result_json, loc); end
  end
end

# source://geokit//lib/geokit/geocoders/openstreetmap.rb#115
Geokit::Geocoders::OsmGeocoder = Geokit::Geocoders::OSMGeocoder

# Provides geocoding based upon an IP address.  The underlying web service is geoplugin.net
#
# source://geokit//lib/geokit/geocoders/ripe.rb#4
class Geokit::Geocoders::RipeGeocoder < ::Geokit::Geocoders::BaseIpGeocoder
  class << self
    # source://geokit//lib/geokit/geocoders/ripe.rb#9
    def do_geocode(ip, _ = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/ripe.rb#17
    def parse_json(json); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/ripe.rb#30
    def set_address_components(data, loc); end

    # source://geokit//lib/geokit/geocoders/ripe.rb#13
    def submit_url(ip); end
  end
end

# source://geokit//lib/geokit/geocoders.rb#76
class Geokit::Geocoders::TooManyQueriesError < ::StandardError; end

# source://geokit//lib/geokit/geocoders/us_geocoder.rb#6
class Geokit::Geocoders::UsGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # source://geokit//lib/geokit/geocoders/us_geocoder.rb#11
    def do_geocode(address, _ = T.unsafe(nil)); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/us_geocoder.rb#22
    def parse_csv(array); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/us_geocoder.rb#15
    def submit_url(address); end
  end
end

# Yahoo geocoder implementation.  Requires the Geokit::Geocoders::YAHOO variable to
# contain a Yahoo API key.  Conforms to the interface set by the Geocoder class.
#
# source://geokit//lib/geokit/geocoders/yahoo.rb#5
class Geokit::Geocoders::YahooGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/yahoo.rb#24
    def do_geocode(address, _ = T.unsafe(nil)); end

    # source://geokit//lib/geokit/geocoders/yahoo.rb#43
    def extract_geoloc(result_json); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/yahoo.rb#28
    def parse_json(results); end

    def secret; end
    def secret=(value); end
    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/yahoo.rb#53
    def set_address_components(result_json, loc); end

    # source://geokit//lib/geokit/geocoders/yahoo.rb#61
    def set_precision(result_json, loc); end

    # source://geokit//lib/geokit/geocoders/yahoo.rb#11
    def submit_url(address); end
  end
end

# Yandex geocoder implementation. Expects the Geokit::Geocoders::YANDEX variable to
# contain a Yandex API key (optional). Conforms to the interface set by the Geocoder class.
#
# source://geokit//lib/geokit/geocoders/yandex.rb#5
class Geokit::Geocoders::YandexGeocoder < ::Geokit::Geocoders::Geocoder
  class << self
    # Template method which does the geocode lookup.
    #
    # source://geokit//lib/geokit/geocoders/yandex.rb#11
    def do_geocode(address, _ = T.unsafe(nil)); end

    def key; end
    def key=(value); end

    # source://geokit//lib/geokit/geocoders/yandex.rb#22
    def parse_json(result); end

    def secure; end
    def secure=(value); end

    # source://geokit//lib/geokit/geocoders/yandex.rb#43
    def set_address_components(loc, l, country, locality); end

    # source://geokit//lib/geokit/geocoders/yandex.rb#55
    def set_precision(loc, l, locality); end

    # source://geokit//lib/geokit/geocoders/yandex.rb#15
    def submit_url(address); end
  end
end

# source://geokit//lib/geokit/inflectors.rb#4
module Geokit::Inflector
  private

  # source://geokit//lib/geokit/inflectors.rb#27
  def camelize(str); end

  # source://geokit//lib/geokit/inflectors.rb#19
  def humanize(lower_case_and_underscored_word); end

  # source://geokit//lib/geokit/inflectors.rb#7
  def titleize(word); end

  # source://geokit//lib/geokit/inflectors.rb#11
  def underscore(camel_cased_word); end

  # source://geokit//lib/geokit/inflectors.rb#23
  def url_escape(s); end

  class << self
    # source://geokit//lib/geokit/inflectors.rb#27
    def camelize(str); end

    # source://geokit//lib/geokit/inflectors.rb#19
    def humanize(lower_case_and_underscored_word); end

    # source://geokit//lib/geokit/inflectors.rb#7
    def titleize(word); end

    # source://geokit//lib/geokit/inflectors.rb#11
    def underscore(camel_cased_word); end

    # source://geokit//lib/geokit/inflectors.rb#23
    def url_escape(s); end
  end
end

# source://geokit//lib/geokit/lat_lng.rb#2
class Geokit::LatLng
  include ::Geokit::Mappable
  extend ::Geokit::Mappable::ClassMethods

  # Accepts latitude and longitude or instantiates an empty instance
  # if lat and lng are not provided. Converted to floats if provided
  #
  # @return [LatLng] a new instance of LatLng
  #
  # source://geokit//lib/geokit/lat_lng.rb#18
  def initialize(lat = T.unsafe(nil), lng = T.unsafe(nil)); end

  # Returns true if the candidate object is logically equal. Logical
  # equivalence is true if the lat and lng attributes are the same for both
  # objects.
  #
  # source://geokit//lib/geokit/lat_lng.rb#67
  def ==(other); end

  # @return [Boolean]
  #
  # source://geokit//lib/geokit/lat_lng.rb#76
  def eql?(other); end

  # source://geokit//lib/geokit/lat_lng.rb#72
  def hash; end

  # Returns the value of attribute lat.
  #
  # source://geokit//lib/geokit/lat_lng.rb#5
  def lat; end

  # Latitude attribute setter; stored as a float.
  #
  # source://geokit//lib/geokit/lat_lng.rb#30
  def lat=(lat); end

  # returns latitude as [ degree, minute, second ] array
  #
  # source://geokit//lib/geokit/lat_lng.rb#45
  def lat_dms; end

  # Returns the value of attribute lat.
  # Provide users with the ability to use :latitude and :longitude
  # to access the lat/lng instance variables.
  # Alias the attr_accessor :lat to :latitude
  #
  # source://geokit//lib/geokit/lat_lng.rb#5
  def latitude; end

  # Sets the attribute lat
  #
  # @param value the value to set the attribute lat to.
  #
  # source://geokit//lib/geokit/lat_lng.rb#5
  def latitude=(_arg0); end

  # Returns the lat and lng attributes as a comma-separated string.
  #
  # source://geokit//lib/geokit/lat_lng.rb#40
  def ll; end

  # Returns the value of attribute lng.
  #
  # source://geokit//lib/geokit/lat_lng.rb#5
  def lng; end

  # Longitude attribute setter; stored as a float;
  #
  # source://geokit//lib/geokit/lat_lng.rb#35
  def lng=(lng); end

  # returns longitude as [ degree, minute, second ] array
  #
  # source://geokit//lib/geokit/lat_lng.rb#50
  def lng_dms; end

  # Returns the value of attribute lng.
  # Alias the attr_accessor :lng to :longitude
  #
  # source://geokit//lib/geokit/lat_lng.rb#5
  def longitude; end

  # Sets the attribute lng
  #
  # @param value the value to set the attribute lng to.
  #
  # source://geokit//lib/geokit/lat_lng.rb#5
  def longitude=(_arg0); end

  # Reverse geocodes a LatLng object using the MultiGeocoder (default), or
  # optionally using a geocoder of your choosing. Returns a new Geokit::GeoLoc
  # object
  #
  # ==== Options
  # * :using  - Specifies the geocoder to use for reverse geocoding. Defaults
  #             to MultiGeocoder. Can be either the geocoder class (or any
  #             class that implements do_reverse_geocode for that matter), or
  #             the name of the class without the "Geocoder" part
  #             (e.g. :google)
  #
  # ==== Examples
  # LatLng.new(51.4578329, 7.0166848).reverse_geocode
  # => #<Geokit::GeoLoc:0x12dac20 @state...>
  # LatLng.new(51.4578329, 7.0166848).reverse_geocode(:using => :google)
  # => #<Geokit::GeoLoc:0x12dac20 @state...>
  # LatLng.new(51.4578329, 7.0166848).reverse_geocode(:using =>
  #   Geokit::Geocoders::GoogleGeocoder)
  # => #<Geokit::GeoLoc:0x12dac20 @state...>
  #
  # source://geokit//lib/geokit/lat_lng.rb#151
  def reverse_geocode(options = T.unsafe(nil)); end

  # returns a two-element array
  #
  # source://geokit//lib/geokit/lat_lng.rb#60
  def to_a; end

  # returns a string with comma-separated lat,lng values
  #
  # source://geokit//lib/geokit/lat_lng.rb#55
  def to_s; end

  # Returns true if both lat and lng attributes are defined
  #
  # @return [Boolean]
  #
  # source://geokit//lib/geokit/lat_lng.rb#81
  def valid?; end

  class << self
    # source://geokit//lib/geokit/lat_lng.rb#25
    def from_json(json); end

    # source://geokit//lib/geokit/lat_lng.rb#120
    def from_string(thing); end

    # A *class* method to take anything which can be inferred as a point and
    # generate a LatLng from it. You should use this anything you're not sure
    # what the input is, and want to deal with it as a LatLng if at all
    # possible. Can take:
    #  1) two arguments (lat,lng)
    #  2) a string in the format "37.1234,-129.1234" or "37.1234 -129.1234"
    #  3) a string which can be geocoded on the fly
    #  4) an array in the format [37.1234,-129.1234]
    #  5) a LatLng or GeoLoc (which is just passed through as-is)
    #  6) anything responding to to_lat_lng -- a LatLng will be extracted from
    #     it
    #
    # source://geokit//lib/geokit/lat_lng.rb#96
    def normalize(thing, other = T.unsafe(nil)); end
  end
end

# Contains class and instance methods providing distance calcuation services.
# This module is meant to be mixed into classes containing lat and lng
# attributes where distance calculation is desired.
#
# At present, two forms of distance calculations are provided:
#
# * Pythagorean Theory (flat Earth) - which assumes the world is flat and
#   loses accuracy over long distances.
# * Haversine (sphere) - which is fairly accurate, but at a performance cost.
#
# Distance units supported are :miles, :kms, and :nms.
#
# source://geokit//lib/geokit/mappable.rb#15
module Geokit::Mappable
  mixes_in_class_methods ::Geokit::Mappable::ClassMethods

  # Returns the distance from another point.  The other point parameter is
  # required to have lat and lng attributes.  Valid options are:
  # :units - valid values are :miles, :kms, :or :nms (:miles is the default)
  # :formula - valid values are :flat or :sphere (:sphere is the default)
  #
  # source://geokit//lib/geokit/mappable.rb#219
  def distance_from(other, options = T.unsafe(nil)); end

  # Returns the distance from another point.  The other point parameter is
  # required to have lat and lng attributes.  Valid options are:
  # :units - valid values are :miles, :kms, :or :nms (:miles is the default)
  # :formula - valid values are :flat or :sphere (:sphere is the default)
  #
  # source://geokit//lib/geokit/mappable.rb#219
  def distance_to(other, options = T.unsafe(nil)); end

  # Returns the endpoint, given a heading (in degrees) and distance.
  # Valid option:
  # :units - valid values are :miles, :kms, or :nms (:miles is the default)
  #
  # source://geokit//lib/geokit/mappable.rb#241
  def endpoint(heading, distance, options = T.unsafe(nil)); end

  # Returns heading in degrees (0 is north, 90 is east, 180 is south, etc)
  # FROM the given point. The given point can be a LatLng or a string to be
  # Geocoded
  #
  # source://geokit//lib/geokit/mappable.rb#234
  def heading_from(other); end

  # Returns heading in degrees (0 is north, 90 is east, 180 is south, etc) to
  # the given point. The given point can be a LatLng or a string to be
  # Geocoded
  #
  # source://geokit//lib/geokit/mappable.rb#227
  def heading_to(other); end

  # Returns the midpoint, given another point on the map.
  # Valid option:
  # :units - valid values are :miles, :kms, or :nms (:miles is the default)
  #
  # source://geokit//lib/geokit/mappable.rb#248
  def midpoint_to(other, options = T.unsafe(nil)); end

  # Extracts a LatLng instance. Use with models that are acts_as_mappable
  #
  # source://geokit//lib/geokit/mappable.rb#206
  def to_lat_lng; end

  class << self
    # Mix below class methods into the includer.
    #
    # source://geokit//lib/geokit/mappable.rb#17
    def included(receiver); end
  end
end

# source://geokit//lib/geokit/mappable.rb#21
module Geokit::Mappable::ClassMethods
  # Given a decimal degree like -87.660333
  # return a 3-element array like [ -87, 39, 37.198... ]
  #
  # source://geokit//lib/geokit/mappable.rb#140
  def decimal_to_dms(deg); end

  # source://geokit//lib/geokit/mappable.rb#151
  def deg2rad(degrees); end

  # Returns the distance between two points.
  #
  # @example
  #   Geokit::GeoLoc.distance_between("43.8374249,4.3600687", "44.1253665,4.0852818")
  # @option options
  # @option options
  # @param from [String, Array, LatLng] +required+ -
  #   +Geokit::LatLng+ compatible value
  # @param to [String, Array, LatLng] +required+ -
  #   +Geokit::LatLng+ compatible value
  # @param options [Hash] a customizable set of options
  #
  # source://geokit//lib/geokit/mappable.rb#42
  def distance_between(from, to, options = T.unsafe(nil)); end

  # source://geokit//lib/geokit/mappable.rb#64
  def distance_between_flat(from, to, units); end

  # source://geokit//lib/geokit/mappable.rb#55
  def distance_between_sphere(from, to, units); end

  # Given a start point, distance, and heading (in degrees), provides
  # an endpoint. Returns a LatLng instance. Typically, the instance method
  # will be used instead of this method.
  #
  # source://geokit//lib/geokit/mappable.rb#96
  def endpoint(start, heading, distance, options = T.unsafe(nil)); end

  # Geocodes a location using the multi geocoder.
  #
  # @raise [Geokit::Geocoders::GeocodeError]
  #
  # source://geokit//lib/geokit/mappable.rb#132
  def geocode(location, options = T.unsafe(nil)); end

  # Extracts units from options. Returns Geokit::default_units when not present.
  # Raise an exception when given unsupported unit of length
  #
  # source://geokit//lib/geokit/mappable.rb#192
  def get_units!(options = T.unsafe(nil)); end

  # Returns heading in degrees (0 is north, 90 is east, 180 is south, etc)
  # from the first point to the second point. Typicaly, the instance methods
  # will be used instead of this method.
  #
  # source://geokit//lib/geokit/mappable.rb#80
  def heading_between(from, to); end

  # Ruby 1.9 raises {Math::DomainError}, but it is not defined in Ruby 1.8
  #
  # source://geokit//lib/geokit/mappable.rb#72
  def math_error_classes; end

  # Returns the midpoint, given two points. Returns a LatLng.
  # Typically, the instance method will be used instead of this method.
  # Valid option:
  #   :units - valid values are :miles, :kms, or :nms
  #   (:miles is the default)
  #
  # source://geokit//lib/geokit/mappable.rb#123
  def midpoint_between(from, to, options = T.unsafe(nil)); end

  # source://geokit//lib/geokit/mappable.rb#155
  def rad2deg(rad); end

  # source://geokit//lib/geokit/mappable.rb#159
  def to_heading(rad); end

  # Returns the number of units per latitude degree.
  #
  # source://geokit//lib/geokit/mappable.rb#181
  def units_per_latitude_degree(units); end

  # Returns the number units per longitude degree.
  #
  # source://geokit//lib/geokit/mappable.rb#186
  def units_per_longitude_degree(lat, units); end

  # Returns the multiplier used to obtain the correct distance units.
  # TODO: make more accurate by coping
  # http://msi.nga.mil/MSISiteContent/StaticFiles/Calculators/degree.html
  #
  # source://geokit//lib/geokit/mappable.rb#176
  def units_sphere_multiplier(units); end

  class << self
    # source://geokit//lib/geokit/mappable.rb#163
    def register_unit(key, in_meters); end
  end
end

# source://geokit//lib/geokit/mappable.rb#26
Geokit::Mappable::ClassMethods::EARTH_RADIUS = T.let(T.unsafe(nil), Hash)

# source://geokit//lib/geokit/mappable.rb#23
Geokit::Mappable::ClassMethods::EARTH_RADIUS_IN_METERS = T.let(T.unsafe(nil), Float)

# source://geokit//lib/geokit/mappable.rb#24
Geokit::Mappable::ClassMethods::METERS_PER_LATITUDE_DEGREE = T.let(T.unsafe(nil), Float)

# source://geokit//lib/geokit/mappable.rb#27
Geokit::Mappable::ClassMethods::PER_LATITUDE_DEGREE = T.let(T.unsafe(nil), Hash)

# source://geokit//lib/geokit/mappable.rb#22
Geokit::Mappable::ClassMethods::PI_DIV_RAD = T.let(T.unsafe(nil), Float)

# source://geokit//lib/geokit/net_adapter/net_http.rb#2
module Geokit::NetAdapter; end

# source://geokit//lib/geokit/net_adapter/net_http.rb#3
class Geokit::NetAdapter::NetHttp
  class << self
    # source://geokit//lib/geokit/net_adapter/net_http.rb#4
    def do_get(url); end

    # @return [Boolean]
    #
    # source://geokit//lib/geokit/net_adapter/net_http.rb#25
    def success?(response); end
  end
end

# source://geokit//lib/geokit/net_adapter/typhoeus.rb#3
class Geokit::NetAdapter::Typhoeus
  class << self
    # source://geokit//lib/geokit/net_adapter/typhoeus.rb#4
    def do_get(url); end

    # @return [Boolean]
    #
    # source://geokit//lib/geokit/net_adapter/typhoeus.rb#9
    def success?(response); end
  end
end

# A complex polygon made of multiple points.  End point must equal start point to close the poly.
#
# source://geokit//lib/geokit/polygon.rb#3
class Geokit::Polygon
  # Pass in an array of Geokit::LatLng
  #
  # @return [Polygon] a new instance of Polygon
  #
  # source://geokit//lib/geokit/polygon.rb#7
  def initialize(points); end

  # A polygon is static and can not be updated with new points, as a result
  # calculate the centroid once and store it when requested.
  #
  # source://geokit//lib/geokit/polygon.rb#39
  def centroid; end

  # @return [Boolean]
  #
  # source://geokit//lib/geokit/polygon.rb#15
  def contains?(point); end

  # Returns the value of attribute points.
  #
  # source://geokit//lib/geokit/polygon.rb#4
  def points; end

  # Sets the attribute points
  #
  # @param value the value to set the attribute points to.
  #
  # source://geokit//lib/geokit/polygon.rb#4
  def points=(_arg0); end

  private

  # source://geokit//lib/geokit/polygon.rb#45
  def calculate_centroid; end
end

# source://geokit//lib/geokit/geocoders/yahoo.rb#93
class OauthUtil
  # @return [OauthUtil] a new instance of OauthUtil
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#97
  def initialize; end

  # Returns the value of attribute base_str.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def base_str; end

  # Sets the attribute base_str
  #
  # @param value the value to set the attribute base_str to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def base_str=(_arg0); end

  # Returns the value of attribute callback_url.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def callback_url; end

  # Sets the attribute callback_url
  #
  # @param value the value to set the attribute callback_url to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def callback_url=(_arg0); end

  # Returns the value of attribute consumer_key.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def consumer_key; end

  # Sets the attribute consumer_key
  #
  # @param value the value to set the attribute consumer_key to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def consumer_key=(_arg0); end

  # Returns the value of attribute consumer_secret.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def consumer_secret; end

  # Sets the attribute consumer_secret
  #
  # @param value the value to set the attribute consumer_secret to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def consumer_secret=(_arg0); end

  # openssl::random_bytes returns non-word chars, which need to be removed. using alt method to get length
  # ref http://snippets.dzone.com/posts/show/491
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#110
  def nonce; end

  # Returns the value of attribute oauth_version.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def oauth_version; end

  # Sets the attribute oauth_version
  #
  # @param value the value to set the attribute oauth_version to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def oauth_version=(_arg0); end

  # Returns the value of attribute params.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def params; end

  # Sets the attribute params
  #
  # @param value the value to set the attribute params to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def params=(_arg0); end

  # source://geokit//lib/geokit/geocoders/yahoo.rb#114
  def percent_encode(string); end

  # sort (very important as it affects the signature), concat, and percent encode
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#138
  def query_string; end

  # Returns the value of attribute req_method.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def req_method; end

  # Sets the attribute req_method
  #
  # @param value the value to set the attribute req_method to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def req_method=(_arg0); end

  # Returns the value of attribute req_url.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def req_url; end

  # Sets the attribute req_url
  #
  # @param value the value to set the attribute req_url to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def req_url=(_arg0); end

  # Returns the value of attribute sig_method.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def sig_method; end

  # Sets the attribute sig_method
  #
  # @param value the value to set the attribute sig_method to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def sig_method=(_arg0); end

  # organize params & create signature
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#151
  def sign(parsed_url); end

  # source://geokit//lib/geokit/geocoders/yahoo.rb#123
  def signature; end

  # source://geokit//lib/geokit/geocoders/yahoo.rb#146
  def timestamp; end

  # Returns the value of attribute token.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def token; end

  # Sets the attribute token
  #
  # @param value the value to set the attribute token to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def token=(_arg0); end

  # Returns the value of attribute token_secret.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def token_secret; end

  # Sets the attribute token_secret
  #
  # @param value the value to set the attribute token_secret to.
  #
  # source://geokit//lib/geokit/geocoders/yahoo.rb#94
  def token_secret=(_arg0); end
end
