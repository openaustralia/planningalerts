# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `atdis` gem.
# Please instead update this file by running `bin/tapioca gem atdis`.

# source://atdis//lib/atdis/validators.rb#5
module ATDIS; end

# source://atdis//lib/atdis/model.rb#29
class ATDIS::ErrorMessage < ::Struct
  # @return [Boolean]
  #
  # source://atdis//lib/atdis/model.rb#30
  def empty?; end

  # Returns the value of attribute message
  #
  # @return [Object] the current value of message
  def message; end

  # Sets the attribute message
  #
  # @param value [Object] the value to set the attribute message to.
  # @return [Object] the newly set value
  #
  # source://atdis//lib/atdis/model.rb#29
  def message=(_); end

  # Returns the value of attribute spec_section
  #
  # @return [Object] the current value of spec_section
  def spec_section; end

  # Sets the attribute spec_section
  #
  # @param value [Object] the value to set the attribute spec_section to.
  # @return [Object] the newly set value
  #
  # source://atdis//lib/atdis/model.rb#29
  def spec_section=(_); end

  # Make this behave pretty much like a string
  #
  # source://atdis//lib/atdis/model.rb#35
  def to_s; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://atdis//lib/atdis/feed.rb#6
class ATDIS::Feed
  # base_url - the base url from which the urls for all atdis urls are made
  # It should be of the form:
  # http://www.council.nsw.gov.au/atdis/1.0
  # timezone - a string (e.g. "Sydney") for the timezone in which times are returned
  # (Note: times in the feeds that have timezones specified get converted to the
  # timezone given while times in the feed which don't have a timezone specified
  # get interpreted in the given timezone)
  # See https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html for the
  # list of possible timezone strings
  #
  # @return [Feed] a new instance of Feed
  #
  # source://atdis//lib/atdis/feed.rb#21
  def initialize(base_url, timezone, ignore_ssl_certificate = T.unsafe(nil)); end

  # source://atdis//lib/atdis/feed.rb#75
  def application(id); end

  # source://atdis//lib/atdis/feed.rb#40
  def application_url(id); end

  # source://atdis//lib/atdis/feed.rb#71
  def applications(options = T.unsafe(nil)); end

  # source://atdis//lib/atdis/feed.rb#27
  def applications_url(options = T.unsafe(nil)); end

  # Returns the value of attribute base_url.
  #
  # source://atdis//lib/atdis/feed.rb#7
  def base_url; end

  # Returns the value of attribute ignore_ssl_certificate.
  #
  # source://atdis//lib/atdis/feed.rb#7
  def ignore_ssl_certificate; end

  # Returns the value of attribute timezone.
  #
  # source://atdis//lib/atdis/feed.rb#7
  def timezone; end

  class << self
    # source://atdis//lib/atdis/feed.rb#44
    def base_url_from_url(url); end

    # Escape but leave commas unchanged (which are valid in query strings)
    #
    # source://atdis//lib/atdis/feed.rb#90
    def escape(value); end

    # source://atdis//lib/atdis/feed.rb#56
    def options_from_url(url); end

    # Turn an options hash of the form {foo: "bar", hello: "sir"} into a query
    # string of the form "foo=bar&hello=sir"
    #
    # source://atdis//lib/atdis/feed.rb#96
    def options_to_query(options); end

    # Turn a query string of the form "foo=bar&hello=sir" to {foo: "bar", hello: sir"}
    #
    # source://atdis//lib/atdis/feed.rb#80
    def query_to_options(query); end
  end
end

# source://atdis//lib/atdis/feed.rb#9
ATDIS::Feed::VALID_OPTIONS = T.let(T.unsafe(nil), Array)

# source://atdis//lib/atdis/model.rb#40
class ATDIS::Model
  include ::ActiveModel::Validations
  include ::ActiveSupport::Callbacks
  include ::ActiveModel::Validations::HelperMethods
  include ::ATDIS::Validators
  include ::ActiveModel::AttributeMethods
  include ::ATDIS::TypeCastAttributes
  extend ::ActiveModel::Validations::ClassMethods
  extend ::ActiveModel::Naming
  extend ::ActiveModel::Callbacks
  extend ::ActiveSupport::Callbacks::ClassMethods
  extend ::ActiveSupport::DescendantsTracker
  extend ::ActiveModel::Translation
  extend ::ActiveModel::Validations::HelperMethods
  extend ::ActiveModel::AttributeMethods::ClassMethods
  extend ::ATDIS::TypeCastAttributes::ClassMethods

  # @return [Model] a new instance of Model
  #
  # source://atdis//lib/atdis/model.rb#160
  def initialize(params, timezone); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
  def __callbacks?; end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#928
  def _run_validate_callbacks(&block); end

  # source://activesupport/7.0.4/lib/active_support/callbacks.rb#940
  def _validate_callbacks; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators; end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#52
  def _validators?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
  def attribute_aliases?; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers; end

  # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
  def attribute_method_matchers?; end

  # source://atdis//lib/atdis/model.rb#12
  def attribute_types; end

  # source://atdis//lib/atdis/model.rb#12
  def attribute_types=(_arg0); end

  # source://atdis//lib/atdis/model.rb#12
  def attribute_types?; end

  # Returns the value of attribute attributes.
  #
  # source://atdis//lib/atdis/model.rb#48
  def attributes; end

  # Returns the value of attribute attributes_before_type_cast.
  #
  # source://atdis//lib/atdis/model.rb#48
  def attributes_before_type_cast; end

  # source://atdis//lib/atdis/model.rb#141
  def json_errors; end

  # source://atdis//lib/atdis/model.rb#127
  def json_errors_in_children; end

  # source://atdis//lib/atdis/model.rb#108
  def json_errors_local; end

  # Stores any part of the json that could not be interpreted. Usually
  # signals an error if it isn't empty.
  #
  # source://atdis//lib/atdis/model.rb#51
  def json_left_overs; end

  # Stores any part of the json that could not be interpreted. Usually
  # signals an error if it isn't empty.
  #
  # source://atdis//lib/atdis/model.rb#51
  def json_left_overs=(_arg0); end

  # source://atdis//lib/atdis/model.rb#150
  def json_left_overs_is_empty; end

  # Stores any part of the json that could not be interpreted. Usually
  # signals an error if it isn't empty.
  #
  # source://atdis//lib/atdis/model.rb#51
  def json_load_error; end

  # Stores any part of the json that could not be interpreted. Usually
  # signals an error if it isn't empty.
  #
  # source://atdis//lib/atdis/model.rb#51
  def json_load_error=(_arg0); end

  # source://atdis//lib/atdis/model.rb#102
  def json_loaded_correctly!; end

  # source://activemodel/7.0.4/lib/active_model/naming.rb#244
  def model_name(*_arg0, &_arg1); end

  # Returns the value of attribute timezone.
  #
  # source://atdis//lib/atdis/model.rb#48
  def timezone; end

  # Returns the value of attribute url.
  #
  # source://atdis//lib/atdis/model.rb#52
  def url; end

  # Sets the attribute url
  #
  # @param value the value to set the attribute url to.
  #
  # source://atdis//lib/atdis/model.rb#52
  def url=(_arg0); end

  # Have we tried to use this attribute?
  #
  # @return [Boolean]
  #
  # source://atdis//lib/atdis/model.rb#146
  def used_attribute?(attribute); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context; end

  private

  # source://atdis//lib/atdis/model.rb#250
  def attribute(attr); end

  # source://atdis//lib/atdis/model.rb#258
  def attribute=(attr, value); end

  # source://atdis//lib/atdis/model.rb#254
  def attribute_before_type_cast(attr); end

  # source://activemodel/7.0.4/lib/active_model/validations.rb#48
  def validation_context=(_arg0); end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks=(value); end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks?; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#932
    def _validate_callbacks; end

    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#936
    def _validate_callbacks=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators=(value); end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators?; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#73
    def attribute_aliases?; end

    # source://atdis//lib/atdis/model.rb#171
    def attribute_keys; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers; end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers=(value); end

    # source://activemodel/7.0.4/lib/active_model/attribute_methods.rb#74
    def attribute_method_matchers?; end

    # Does what the equivalent on Activerecord does
    #
    # source://atdis//lib/atdis/model.rb#176
    def attribute_names; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types=(value); end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types?; end

    # source://atdis//lib/atdis/model.rb#180
    def cast(value, type, timezone); end

    # If timezone is given in the string then the datetime is read in using
    # the timezone in the string and then converted to the timezone "zone"
    # If the timezone isn't given in the string then the datetime is read
    # in using the timezone in "zone"
    #
    # source://atdis//lib/atdis/model.rb#210
    def cast_datetime(value, timezone); end

    # source://atdis//lib/atdis/model.rb#231
    def cast_geojson(value); end

    # This casting allows nil values
    #
    # source://atdis//lib/atdis/model.rb#227
    def cast_integer(value); end

    # source://atdis//lib/atdis/model.rb#222
    def cast_string(value); end

    # source://atdis//lib/atdis/model.rb#216
    def cast_uri(value); end

    # Converts {foo: {bar: "yes"}} to {"foo" => {"bar" => "yes"}}
    #
    # source://atdis//lib/atdis/model.rb#236
    def hash_symbols_to_string(hash); end

    # source://atdis//lib/atdis/model.rb#97
    def interpret(data, timezone); end

    # Partition the data into used and unused by returning [used, unused]
    #
    # source://atdis//lib/atdis/model.rb#58
    def partition_by_used(data); end

    # source://atdis//lib/atdis/model.rb#88
    def read_json(text, timezone); end

    # source://atdis//lib/atdis/model.rb#82
    def read_url(url, timezone, ignore_ssl_certificate = T.unsafe(nil)); end

    # source://atdis//lib/atdis/model.rb#75
    def read_url_raw(url, ignore_ssl_certificate = T.unsafe(nil)); end
  end
end

# source://atdis//lib/atdis/models/authority.rb#4
module ATDIS::Models; end

# source://atdis//lib/atdis/models/address.rb#5
class ATDIS::Models::Address < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/application.rb#12
class ATDIS::Models::Application < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/authority.rb#5
class ATDIS::Models::Authority < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/document.rb#5
class ATDIS::Models::Document < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/event.rb#5
class ATDIS::Models::Event < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/info.rb#7
class ATDIS::Models::Info < ::ATDIS::Model
  # TODO: Validate contents of estimated_cost
  #
  # source://atdis//lib/atdis/models/info.rb#67
  def dat_id_is_url_encoded!; end

  # source://atdis//lib/atdis/models/info.rb#92
  def notification_dates_consistent!; end

  # source://atdis//lib/atdis/models/info.rb#82
  def related_apps_url_format; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end

    # @return [Boolean]
    #
    # source://atdis//lib/atdis/models/info.rb#73
    def url_encoded?(str); end
  end
end

# source://atdis//lib/atdis/models/land_title_ref.rb#7
class ATDIS::Models::LandTitleRef < ::ATDIS::Model
  # source://atdis//lib/atdis/models/land_title_ref.rb#18
  def check_title_presence; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/location.rb#9
class ATDIS::Models::Location < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/page.rb#8
class ATDIS::Models::Page < ::ATDIS::Model
  # If some of the pagination fields are present all of the required ones should be present
  #
  # source://atdis//lib/atdis/models/page.rb#27
  def all_pagination_is_present; end

  # source://atdis//lib/atdis/models/page.rb#33
  def count_is_consistent; end

  # source://atdis//lib/atdis/models/page.rb#70
  def next_page; end

  # source://atdis//lib/atdis/models/page.rb#60
  def next_url; end

  # source://atdis//lib/atdis/models/page.rb#66
  def previous_page; end

  # source://atdis//lib/atdis/models/page.rb#54
  def previous_url; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/pagination.rb#5
class ATDIS::Models::Pagination < ::ATDIS::Model
  # If some of the pagination fields are present all of the required ones should be present
  #
  # source://atdis//lib/atdis/models/pagination.rb#20
  def all_pagination_is_present; end

  # source://atdis//lib/atdis/models/pagination.rb#107
  def count_is_consistent; end

  # source://atdis//lib/atdis/models/pagination.rb#92
  def current_is_consistent; end

  # source://atdis//lib/atdis/models/pagination.rb#68
  def next_is_consistent; end

  # source://atdis//lib/atdis/models/pagination.rb#47
  def previous_is_consistent; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/person.rb#5
class ATDIS::Models::Person < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/reference.rb#5
class ATDIS::Models::Reference < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/response.rb#7
class ATDIS::Models::Response < ::ATDIS::Model
  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/models/torrens_title.rb#5
class ATDIS::Models::TorrensTitle < ::ATDIS::Model
  # source://atdis//lib/atdis/models/torrens_title.rb#19
  def section_can_not_be_empty_string; end

  class << self
    # source://activesupport/7.0.4/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://activemodel/7.0.4/lib/active_model/validations.rb#52
    def _validators; end

    # source://atdis//lib/atdis/model.rb#12
    def attribute_types; end
  end
end

# source://atdis//lib/atdis/separated_url.rb#4
class ATDIS::SeparatedURL
  class << self
    # source://atdis//lib/atdis/separated_url.rb#10
    def combine(url, url_params); end

    # source://atdis//lib/atdis/separated_url.rb#5
    def merge(full_url, params); end

    # source://atdis//lib/atdis/separated_url.rb#23
    def split(full_url); end
  end
end

# source://atdis//lib/atdis/model.rb#8
module ATDIS::TypeCastAttributes
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ATDIS::TypeCastAttributes::ClassMethods

  module GeneratedClassMethods
    def attribute_types; end
    def attribute_types=(value); end
    def attribute_types?; end
  end

  module GeneratedInstanceMethods
    def attribute_types; end
    def attribute_types=(value); end
    def attribute_types?; end
  end
end

# source://atdis//lib/atdis/model.rb#15
module ATDIS::TypeCastAttributes::ClassMethods
  # of the form {section: Integer, address: String}
  #
  # source://atdis//lib/atdis/model.rb#17
  def field_mappings(params); end
end

# source://atdis//lib/atdis/validators.rb#6
module ATDIS::Validators; end

# source://atdis//lib/atdis/validators.rb#38
class ATDIS::Validators::ArrayHttpUrlValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#39
  def validate_each(record, attribute, value); end
end

# source://atdis//lib/atdis/validators.rb#50
class ATDIS::Validators::ArrayValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#51
  def validate_each(record, attribute, value); end
end

# source://atdis//lib/atdis/validators.rb#18
class ATDIS::Validators::DateTimeValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#19
  def validate_each(record, attribute, value); end
end

# Can't be an empty array
#
# source://atdis//lib/atdis/validators.rb#61
class ATDIS::Validators::FilledArrayValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#62
  def validate_each(record, attribute, value); end
end

# source://atdis//lib/atdis/validators.rb#7
class ATDIS::Validators::GeoJsonValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#8
  def validate_each(record, attribute, value); end
end

# source://atdis//lib/atdis/validators.rb#27
class ATDIS::Validators::HttpUrlValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#28
  def validate_each(record, attribute, value); end
end

# Take into account the value before type casting
#
# source://atdis//lib/atdis/validators.rb#77
class ATDIS::Validators::PresenceBeforeTypeCastValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#78
  def validate_each(record, attribute, _value); end
end

# This attribute itself needs to be valid
#
# source://atdis//lib/atdis/validators.rb#89
class ATDIS::Validators::ValidValidator < ::ActiveModel::EachValidator
  # source://atdis//lib/atdis/validators.rb#90
  def validate_each(record, attribute, value); end
end

# source://atdis//lib/atdis/version.rb#3
module Atdis; end

# source://atdis//lib/atdis/version.rb#4
Atdis::VERSION = T.let(T.unsafe(nil), String)
