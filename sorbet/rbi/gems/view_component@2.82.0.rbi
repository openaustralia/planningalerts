# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `view_component` gem.
# Please instead update this file by running `bin/tapioca gem view_component`.

module PreviewHelper
  def find_template_data(lookup_context:, template_identifier:); end
  def preview_source; end

  private

  def prism_language_name_by_template(template:); end
  def prism_language_name_by_template_path(template_file_path:); end
end

PreviewHelper::AVAILABLE_PRISM_LANGUAGES = T.let(T.unsafe(nil), Array)
PreviewHelper::FALLBACK_LANGUAGE = T.let(T.unsafe(nil), String)

# source://view_component//lib/view_component.rb#6
module ViewComponent
  extend ::ActiveSupport::Autoload
end

# source://view_component//lib/view_component/base.rb#18
class ViewComponent::Base < ::ActionView::Base
  include ::ViewComponent::ContentAreas
  include ::ViewComponent::PolymorphicSlots
  include ::ViewComponent::PolymorphicSlots::InstanceMethods
  include ::ViewComponent::SlotableV2
  include ::ViewComponent::Translatable
  include ::ViewComponent::WithContentHelper
  extend ::ViewComponent::ContentAreas::ClassMethods
  extend ::ViewComponent::SlotableV2::ClassMethods
  extend ::ViewComponent::Translatable::ClassMethods
  extend ::ViewComponent::PolymorphicSlots::ClassMethods

  # @private
  # @return [Base] a new instance of Base
  #
  # source://view_component//lib/view_component/base.rb#187
  def initialize(*_arg0); end

  # Returns the value of attribute __vc_original_view_context.
  #
  # source://view_component//lib/view_component/base.rb#54
  def __vc_original_view_context; end

  # Sets the attribute __vc_original_view_context
  #
  # @param value the value to set the attribute __vc_original_view_context to.
  #
  # source://view_component//lib/view_component/base.rb#54
  def __vc_original_view_context=(_arg0); end

  # source://view_component//lib/view_component/slotable_v2.rb#21
  def _warn_on_deprecated_slot_setter; end

  # source://view_component//lib/view_component/slotable_v2.rb#21
  def _warn_on_deprecated_slot_setter=(_arg0); end

  # source://view_component//lib/view_component/slotable_v2.rb#21
  def _warn_on_deprecated_slot_setter?; end

  # Called before rendering the component. Override to perform operations that
  # depend on having access to the view context, such as helpers.
  #
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#167
  def before_render; end

  # Called after rendering the component.
  #
  # @deprecated Use `#before_render` instead. Will be removed in v3.0.0.
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#175
  def before_render_check; end

  # source://view_component//lib/view_component/base.rb#45
  def config(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/base.rb#47
  def content_areas; end

  # source://view_component//lib/view_component/base.rb#47
  def content_areas=(_arg0); end

  # source://view_component//lib/view_component/base.rb#47
  def content_areas?; end

  # The current controller. Use sparingly as doing so introduces coupling
  # that inhibits encapsulation & reuse, often making testing difficult.
  #
  # @return [ActionController::Base]
  #
  # source://view_component//lib/view_component/base.rb#210
  def controller; end

  # source://view_component//lib/view_component/base.rb#45
  def form_authenticity_token(*_arg0, **_arg1, &_arg2); end

  # For caching, such as #cache_if
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#267
  def format; end

  # A proxy through which to access helpers. Use sparingly as doing so introduces
  # coupling that inhibits encapsulation & reuse, often making testing difficult.
  #
  # @return [ActionView::Base]
  #
  # source://view_component//lib/view_component/base.rb#229
  def helpers; end

  # source://view_component//lib/view_component/translatable.rb#15
  def i18n_backend; end

  # Optional content to be returned after the rendered template.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#159
  def output_postamble; end

  # source://view_component//lib/view_component/base.rb#45
  def protect_against_forgery?(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/slotable_v2.rb#18
  def registered_slots; end

  # source://view_component//lib/view_component/slotable_v2.rb#18
  def registered_slots=(_arg0); end

  # source://view_component//lib/view_component/slotable_v2.rb#18
  def registered_slots?; end

  # Re-use original view_context if we're not rendering a component.
  #
  # This prevents an exception when rendering a partial inside of a component that has also been rendered outside
  # of the component. This is due to the partials compiled template method existing in the parent `view_context`,
  #  and not the component's `view_context`.
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#197
  def render(options = T.unsafe(nil), args = T.unsafe(nil), &block); end

  # Override to determine whether the ViewComponent should render.
  #
  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#182
  def render?; end

  # Entrypoint for rendering components.
  #
  # - `view_context`: ActionView context from calling view
  # - `block`: optional block to be captured within the view context
  #
  # Returns HTML that has been escaped by the respective template handler.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/base.rb#94
  def render_in(view_context, &block); end

  # Subclass components that call `super` inside their template code will cause a
  # double render if they emit the result:
  #
  # ```erb
  # <%= super %> # double-renders
  # <% super %> # does not double-render
  # ```
  #
  # Calls `super`, returning `nil` to avoid rendering the result twice.
  #
  # source://view_component//lib/view_component/base.rb#150
  def render_parent; end

  # The current request. Use sparingly as doing so introduces coupling that
  # inhibits encapsulation & reuse, often making testing difficult.
  #
  # @return [ActionDispatch::Request]
  #
  # source://view_component//lib/view_component/base.rb#288
  def request; end

  # Components render in their own view context. Helpers and other functionality
  # require a reference to the original Rails view context, an instance of
  # `ActionView::Base`. Use this method to set a reference to the original
  # view context. Objects that implement this method will render in the component's
  # view context, while objects that don't will render in the original view context
  # so helpers, etc work as expected.
  #
  # @param view_context [ActionView::Base] The original view context.
  # @return [void]
  #
  # source://view_component//lib/view_component/base.rb#65
  def set_original_view_context(view_context); end

  # For caching, such as #cache_if
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#260
  def view_cache_dependencies; end

  # Exposes .virtual_path as an instance method
  #
  # @private
  #
  # source://view_component//lib/view_component/base.rb#254
  def virtual_path; end

  # Use the provided variant instead of the one determined by the current request.
  #
  # @deprecated Will be removed in v3.0.0.
  # @param variant [Symbol] The variant to be used by the component.
  # @return [self]
  #
  # source://activesupport/7.0.4.2/lib/active_support/deprecation/method_wrappers.rb#63
  def with_variant(*args, **_arg1, &block); end

  private

  # source://view_component//lib/view_component/base.rb#296
  def content; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/base.rb#308
  def content_evaluated?; end

  # Returns the value of attribute view_context.
  #
  # source://view_component//lib/view_component/base.rb#294
  def view_context; end

  class << self
    # source://view_component//lib/view_component/base.rb#51
    def __vc_strip_trailing_whitespace; end

    # source://view_component//lib/view_component/base.rb#51
    def __vc_strip_trailing_whitespace=(value); end

    # source://view_component//lib/view_component/base.rb#72
    def _deprecated_generate_mattr_accessor(name); end

    # source://view_component//lib/view_component/slotable_v2.rb#21
    def _warn_on_deprecated_slot_setter; end

    # source://view_component//lib/view_component/slotable_v2.rb#21
    def _warn_on_deprecated_slot_setter=(value); end

    # source://view_component//lib/view_component/slotable_v2.rb#21
    def _warn_on_deprecated_slot_setter?; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#618
    def collection_counter_parameter; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#628
    def collection_iteration_parameter; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#613
    def collection_parameter; end

    # Compile templates to instance methods, assuming they haven't been compiled already.
    #
    # Do as much work as possible in this step, as doing so reduces the amount
    # of work done each time a component is rendered.
    #
    # @private
    #
    # source://view_component//lib/view_component/base.rb#517
    def compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#508
    def compiled?; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#522
    def compiler; end

    # source://view_component//lib/view_component/base.rb#20
    def component_parent_class(*_arg0, **_arg1, &_arg2); end

    # Returns the current config.
    #
    # @return [ViewComponent::Config]
    #
    # source://view_component//lib/view_component/base.rb#25
    def config; end

    # Replaces the entire config. You shouldn't need to use this directly
    # unless you're building a `ViewComponent::Config` elsewhere.
    #
    # source://view_component//lib/view_component/base.rb#31
    def config=(_arg0); end

    # source://view_component//lib/view_component/base.rb#47
    def content_areas; end

    # source://view_component//lib/view_component/base.rb#47
    def content_areas=(value); end

    # source://view_component//lib/view_component/base.rb#47
    def content_areas?; end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#623
    def counter_argument_present?; end

    # source://view_component//lib/view_component/base.rb#20
    def default_preview_layout(*_arg0, **_arg1, &_arg2); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#533
    def format; end

    # source://view_component//lib/view_component/base.rb#20
    def generate(*_arg0, **_arg1, &_arg2); end

    # source://view_component//lib/view_component/base.rb#73
    def generate_distinct_locale_files; end

    # source://view_component//lib/view_component/base.rb#76
    def generate_distinct_locale_files=(value); end

    # source://view_component//lib/view_component/base.rb#73
    def generate_locale; end

    # source://view_component//lib/view_component/base.rb#76
    def generate_locale=(value); end

    # source://view_component//lib/view_component/base.rb#73
    def generate_sidecar; end

    # source://view_component//lib/view_component/base.rb#76
    def generate_sidecar=(value); end

    # source://view_component//lib/view_component/base.rb#73
    def generate_stimulus_controller; end

    # source://view_component//lib/view_component/base.rb#76
    def generate_stimulus_controller=(value); end

    # source://view_component//lib/view_component/translatable.rb#15
    def i18n_backend; end

    # source://view_component//lib/view_component/translatable.rb#15
    def i18n_backend=(value); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#538
    def identifier; end

    # @private
    # @private
    #
    # source://view_component//lib/view_component/base.rb#464
    def inherited(child); end

    # source://view_component//lib/view_component/base.rb#20
    def instrumentation_enabled(*_arg0, **_arg1, &_arg2); end

    # @private
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#633
    def iteration_argument_present?; end

    # source://view_component//lib/view_component/base.rb#20
    def preview_controller(*_arg0, **_arg1, &_arg2); end

    # source://view_component//lib/view_component/base.rb#20
    def preview_paths(*_arg0, **_arg1, &_arg2); end

    # source://view_component//lib/view_component/base.rb#20
    def preview_route(*_arg0, **_arg1, &_arg2); end

    # source://view_component//lib/view_component/slotable_v2.rb#18
    def registered_slots; end

    # source://view_component//lib/view_component/slotable_v2.rb#18
    def registered_slots=(value); end

    # source://view_component//lib/view_component/slotable_v2.rb#18
    def registered_slots?; end

    # source://view_component//lib/view_component/base.rb#20
    def render_monkey_patch_enabled(*_arg0, **_arg1, &_arg2); end

    # Provide identifier for ActionView template annotations
    #
    # @private
    #
    # source://view_component//lib/view_component/base.rb#459
    def short_identifier; end

    # source://view_component//lib/view_component/base.rb#20
    def show_previews(*_arg0, **_arg1, &_arg2); end

    # source://view_component//lib/view_component/base.rb#20
    def show_previews_source(*_arg0, **_arg1, &_arg2); end

    # Find sidecar files for the given extensions.
    #
    # The provided array of extensions is expected to contain
    # strings starting without the dot, example: `["erb", "haml"]`.
    #
    # For example, one might collect sidecar CSS files that need to be compiled.
    #
    # @param extensions [Array<String>] Extensions of which to return matching sidecar files.
    #
    # source://view_component//lib/view_component/base.rb#409
    def sidecar_files(extensions); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#400
    def source_location; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#400
    def source_location=(_arg0); end

    # Strips trailing whitespace from templates before compiling them.
    #
    # ```ruby
    # class MyComponent < ViewComponent::Base
    #   strip_trailing_whitespace
    # end
    # ```
    #
    # @param value [Boolean] Whether or not to strip newlines.
    #
    # source://view_component//lib/view_component/base.rb#562
    def strip_trailing_whitespace(value = T.unsafe(nil)); end

    # Whether trailing whitespace will be stripped before compilation.
    #
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#569
    def strip_trailing_whitespace?; end

    # source://view_component//lib/view_component/base.rb#20
    def test_controller(*_arg0, **_arg1, &_arg2); end

    # we'll eventually want to update this to support other types
    #
    # @private
    #
    # source://view_component//lib/view_component/base.rb#528
    def type; end

    # Ensure the component initializer accepts the
    # collection parameter. By default, we don't
    # validate that the default parameter name
    # is accepted, as support for collection
    # rendering is optional.
    #
    # @private TODO: add documentation
    # @raise [ArgumentError]
    #
    # source://view_component//lib/view_component/base.rb#579
    def validate_collection_parameter!(validate_default: T.unsafe(nil)); end

    # Ensure the component initializer doesn't define
    # invalid parameters that could override the framework's
    # methods.
    #
    # @private TODO: add documentation
    # @raise [ViewComponent::ComponentError]
    #
    # source://view_component//lib/view_component/base.rb#605
    def validate_initialization_parameters!; end

    # source://view_component//lib/view_component/base.rb#20
    def view_component_path(*_arg0, **_arg1, &_arg2); end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#400
    def virtual_path; end

    # @private
    #
    # source://view_component//lib/view_component/base.rb#400
    def virtual_path=(_arg0); end

    # Render a component for each element in a collection ([documentation](/guide/collections)):
    #
    # ```ruby
    # render(ProductsComponent.with_collection(@products, foo: :bar))
    # ```
    #
    # @param collection [Enumerable] A list of items to pass the ViewComponent one at a time.
    # @param args [Arguments] Arguments to pass to the ViewComponent every time.
    #
    # source://view_component//lib/view_component/base.rb#452
    def with_collection(collection, **args); end

    # Set the parameter name used when rendering elements of a collection ([documentation](/guide/collections)):
    #
    # ```ruby
    # with_collection_parameter :item
    # ```
    #
    # @param parameter [Symbol] The parameter name used when rendering elements of a collection.
    #
    # source://view_component//lib/view_component/base.rb#549
    def with_collection_parameter(parameter); end

    private

    # source://view_component//lib/view_component/base.rb#644
    def initialize_parameter_names; end

    # source://view_component//lib/view_component/base.rb#652
    def initialize_parameters; end

    # source://view_component//lib/view_component/base.rb#656
    def provided_collection_parameter; end

    # @return [Boolean]
    #
    # source://view_component//lib/view_component/base.rb#639
    def splatted_keyword_argument_present?; end
  end
end

# source://view_component//lib/view_component/base.rb#42
ViewComponent::Base::RESERVED_PARAMETER = T.let(T.unsafe(nil), Symbol)

# source://view_component//lib/view_component/base.rb#40
class ViewComponent::Base::ViewContextCalledBeforeRenderError < ::StandardError; end

# source://view_component//lib/view_component/collection.rb#6
class ViewComponent::Collection
  include ::Enumerable

  # @return [Collection] a new instance of Collection
  #
  # source://view_component//lib/view_component/collection.rb#46
  def initialize(component, object, **options); end

  # Returns the value of attribute __vc_original_view_context.
  #
  # source://view_component//lib/view_component/collection.rb#13
  def __vc_original_view_context; end

  # Sets the attribute __vc_original_view_context
  #
  # @param value the value to set the attribute __vc_original_view_context to.
  #
  # source://view_component//lib/view_component/collection.rb#13
  def __vc_original_view_context=(_arg0); end

  # Returns the value of attribute component.
  #
  # source://view_component//lib/view_component/collection.rb#8
  def component; end

  # source://view_component//lib/view_component/collection.rb#26
  def components; end

  # source://view_component//lib/view_component/collection.rb#40
  def each(&block); end

  # source://view_component//lib/view_component/collection.rb#10
  def format(*_arg0, **_arg1, &_arg2); end

  # source://view_component//lib/view_component/collection.rb#19
  def render_in(view_context, &block); end

  # source://view_component//lib/view_component/collection.rb#15
  def set_original_view_context(view_context); end

  # source://view_component//lib/view_component/collection.rb#11
  def size(*_arg0, **_arg1, &_arg2); end

  private

  # source://view_component//lib/view_component/collection.rb#52
  def collection_variable(object); end

  # source://view_component//lib/view_component/collection.rb#63
  def component_options(item, iterator); end
end

# Keeps track of which templates have already been compiled
# This isn't part of the public API
#
# source://view_component//lib/view_component/compile_cache.rb#6
module ViewComponent::CompileCache
  private

  # source://view_component//lib/view_component/compile_cache.rb#17
  def compiled?(klass); end

  # source://view_component//lib/view_component/compile_cache.rb#25
  def invalidate!; end

  # source://view_component//lib/view_component/compile_cache.rb#21
  def invalidate_class!(klass); end

  # source://view_component//lib/view_component/compile_cache.rb#13
  def register(klass); end

  class << self
    # source://view_component//lib/view_component/compile_cache.rb#7
    def cache; end

    # source://view_component//lib/view_component/compile_cache.rb#7
    def cache=(val); end

    # @return [Boolean]
    #
    # source://view_component//lib/view_component/compile_cache.rb#17
    def compiled?(klass); end

    # source://view_component//lib/view_component/compile_cache.rb#25
    def invalidate!; end

    # source://view_component//lib/view_component/compile_cache.rb#21
    def invalidate_class!(klass); end

    # source://view_component//lib/view_component/compile_cache.rb#13
    def register(klass); end
  end
end

# source://view_component//lib/view_component/compiler.rb#6
class ViewComponent::Compiler
  # @return [Compiler] a new instance of Compiler
  #
  # source://view_component//lib/view_component/compiler.rb#16
  def initialize(component_class); end

  # source://view_component//lib/view_component/compiler.rb#29
  def compile(raise_errors: T.unsafe(nil), force: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/compiler.rb#21
  def compiled?; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/compiler.rb#25
  def development?; end

  # source://view_component//lib/view_component/compiler.rb#14
  def mode; end

  # source://view_component//lib/view_component/compiler.rb#14
  def mode=(_arg0); end

  # source://view_component//lib/view_component/compiler.rb#14
  def mode?; end

  private

  # source://view_component//lib/view_component/compiler.rb#243
  def call_method_name(variant); end

  # source://view_component//lib/view_component/compiler.rb#225
  def compiled_template(file_path); end

  # Returns the value of attribute component_class.
  #
  # source://view_component//lib/view_component/compiler.rb#86
  def component_class; end

  # source://view_component//lib/view_component/compiler.rb#88
  def define_render_template_for; end

  # source://view_component//lib/view_component/compiler.rb#194
  def inline_calls; end

  # source://view_component//lib/view_component/compiler.rb#209
  def inline_calls_defined_on_self; end

  # source://view_component//lib/view_component/compiler.rb#251
  def normalized_variant_name(variant); end

  # Returns the value of attribute redefinition_lock.
  #
  # source://view_component//lib/view_component/compiler.rb#86
  def redefinition_lock; end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/compiler.rb#255
  def should_compile_superclass?; end

  # source://view_component//lib/view_component/compiler.rb#112
  def template_errors; end

  # source://view_component//lib/view_component/compiler.rb#178
  def templates; end

  # source://view_component//lib/view_component/compiler.rb#213
  def variants; end

  # source://view_component//lib/view_component/compiler.rb#219
  def variants_from_inline_calls(calls); end

  class << self
    # source://view_component//lib/view_component/compiler.rb#14
    def mode; end

    # source://view_component//lib/view_component/compiler.rb#14
    def mode=(value); end

    # source://view_component//lib/view_component/compiler.rb#14
    def mode?; end
  end
end

# Compiler mode. Can be either:
# * development (a blocking mode which ensures thread safety when redefining the `call` method for components,
#                default in Rails development and test mode)
# * production (a non-blocking mode, default in Rails production mode)
#
# source://view_component//lib/view_component/compiler.rb#11
ViewComponent::Compiler::DEVELOPMENT_MODE = T.let(T.unsafe(nil), Symbol)

# source://view_component//lib/view_component/compiler.rb#12
ViewComponent::Compiler::PRODUCTION_MODE = T.let(T.unsafe(nil), Symbol)

# source://view_component//lib/view_component/component_error.rb#4
class ViewComponent::ComponentError < ::StandardError; end

# source://view_component//lib/view_component/config.rb#6
class ViewComponent::Config
  # @return [Config] a new instance of Config
  #
  # source://view_component//lib/view_component/config.rb#157
  def initialize; end

  # source://activesupport/7.0.4.2/lib/active_support/core_ext/module/delegation.rb#302
  def method_missing(method, *args, **_arg2, &block); end

  # source://view_component//lib/view_component/config.rb#161
  def preview_path; end

  # source://view_component//lib/view_component/config.rb#165
  def preview_path=(new_value); end

  private

  # Returns the value of attribute config.
  #
  # source://view_component//lib/view_component/config.rb#174
  def config; end

  # source://activesupport/7.0.4.2/lib/active_support/core_ext/module/delegation.rb#294
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end

  class << self
    # `new` without any arguments initializes the default configuration, but
    # it's important to differentiate in case that's no longer the case in
    # future.
    def default(*_arg0); end

    # source://view_component//lib/view_component/config.rb#150
    def default_generate_options; end

    # A custom default layout used for the previews index page and individual
    # previews.
    # Defaults to `nil`. If this is falsy, `"component_preview"` is used.
    #
    # @return [String]
    #
    # source://view_component//lib/view_component/config.rb#144
    def default_preview_paths; end

    # source://view_component//lib/view_component/config.rb#13
    def defaults; end
  end
end

# source://view_component//lib/view_component/content_areas.rb#9
module ViewComponent::ContentAreas
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::ViewComponent::ContentAreas::ClassMethods

  # Assign the provided content to the content area accessor
  #
  # @private
  #
  # source://view_component//lib/view_component/content_areas.rb#15
  def with(area, content = T.unsafe(nil), &block); end
end

# source://view_component//lib/view_component/content_areas.rb#0
module ViewComponent::ContentAreas::ClassMethods
  # source://view_component//lib/view_component/content_areas.rb#33
  def with_content_areas(*areas); end
end

# source://view_component//lib/view_component/deprecation.rb#6
ViewComponent::DEPRECATION_HORIZON = T.let(T.unsafe(nil), String)

ViewComponent::Deprecation = T.let(T.unsafe(nil), ActiveSupport::Deprecation)

# source://view_component//lib/view_component/engine.rb#7
class ViewComponent::Engine < ::Rails::Engine; end

# source://view_component//lib/view_component/instrumentation.rb#6
module ViewComponent::Instrumentation
  # source://view_component//lib/view_component/instrumentation.rb#11
  def render_in(view_context, &block); end

  class << self
    # @private
    #
    # source://view_component//lib/view_component/instrumentation.rb#7
    def included(mod); end
  end
end

# source://view_component//lib/view_component/polymorphic_slots.rb#4
module ViewComponent::PolymorphicSlots
  include ::ViewComponent::PolymorphicSlots::InstanceMethods

  mixes_in_class_methods ::ViewComponent::PolymorphicSlots::ClassMethods

  class << self
    # In older rails versions, using a concern isn't a good idea here because they appear to not work with
    # Module#prepend and class methods.
    #
    # source://view_component//lib/view_component/polymorphic_slots.rb#7
    def included(base); end
  end
end

# source://view_component//lib/view_component/polymorphic_slots.rb#23
module ViewComponent::PolymorphicSlots::ClassMethods
  # source://view_component//lib/view_component/polymorphic_slots.rb#38
  def register_polymorphic_slot(slot_name, types, collection:); end

  # source://view_component//lib/view_component/polymorphic_slots.rb#31
  def renders_many(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/polymorphic_slots.rb#24
  def renders_one(slot_name, callable = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/polymorphic_slots.rb#88
module ViewComponent::PolymorphicSlots::InstanceMethods
  # source://view_component//lib/view_component/polymorphic_slots.rb#89
  def set_polymorphic_slot(slot_name, poly_type = T.unsafe(nil), *args, **_arg3, &block); end
end

# source://view_component//lib/view_component/preview.rb#6
class ViewComponent::Preview
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  extend ::ActiveSupport::DescendantsTracker

  # source://view_component//lib/view_component/preview.rb#11
  def render(component, **args, &block); end

  # source://view_component//lib/view_component/preview.rb#11
  def render_component(component, **args, &block); end

  # source://view_component//lib/view_component/preview.rb#21
  def render_with_template(template: T.unsafe(nil), locals: T.unsafe(nil)); end

  class << self
    # Returns all component preview classes.
    #
    # source://view_component//lib/view_component/preview.rb#32
    def all; end

    # Returns all of the available examples for the component preview.
    #
    # source://view_component//lib/view_component/preview.rb#50
    def examples; end

    # Returns +true+ if the preview exists.
    #
    # @return [Boolean]
    #
    # source://view_component//lib/view_component/preview.rb#55
    def exists?(preview); end

    # Find a component preview by its underscored class name.
    #
    # source://view_component//lib/view_component/preview.rb#60
    def find(preview); end

    # Setter for layout name.
    #
    # source://view_component//lib/view_component/preview.rb#71
    def layout(layout_name); end

    # source://view_component//lib/view_component/preview.rb#104
    def load_previews; end

    # Returns the relative path (from preview_path) to the preview example template if the template exists
    #
    # source://view_component//lib/view_component/preview.rb#77
    def preview_example_template_path(example); end

    # Returns the underscored name of the component preview without the suffix.
    #
    # source://view_component//lib/view_component/preview.rb#65
    def preview_name; end

    # Returns the method body for the example from the preview file.
    #
    # source://view_component//lib/view_component/preview.rb#99
    def preview_source(example); end

    # Returns the arguments for rendering of the component in its layout
    #
    # source://view_component//lib/view_component/preview.rb#39
    def render_args(example, params: T.unsafe(nil)); end

    private

    # source://view_component//lib/view_component/preview.rb#112
    def preview_paths; end
  end
end

module ViewComponent::PreviewActions
  extend ::ActiveSupport::Concern

  def index; end
  def previews; end

  private

  def default_preview_layout; end
  def determine_layout(layout_override = T.unsafe(nil), prepend_views: T.unsafe(nil)); end
  def find_preview; end
  def prepend_application_view_paths; end
  def prepend_preview_examples_view_path; end
  def set_locale(&block); end
  def show_previews?; end
end

# source://view_component//lib/view_component/preview_template_error.rb#4
class ViewComponent::PreviewTemplateError < ::StandardError; end

# source://view_component//lib/view_component/slot.rb#4
class ViewComponent::Slot
  # Returns the value of attribute content.
  #
  # source://view_component//lib/view_component/slot.rb#5
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://view_component//lib/view_component/slot.rb#5
  def content=(_arg0); end
end

# source://view_component//lib/view_component/slot_v2.rb#6
class ViewComponent::SlotV2
  include ::ViewComponent::WithContentHelper

  # @return [SlotV2] a new instance of SlotV2
  #
  # source://view_component//lib/view_component/slot_v2.rb#11
  def initialize(parent); end

  # Sets the attribute __vc_component_instance
  #
  # @param value the value to set the attribute __vc_component_instance to.
  #
  # source://view_component//lib/view_component/slot_v2.rb#9
  def __vc_component_instance=(_arg0); end

  # Sets the attribute __vc_content
  #
  # @param value the value to set the attribute __vc_content to.
  #
  # source://view_component//lib/view_component/slot_v2.rb#9
  def __vc_content=(_arg0); end

  # Sets the attribute __vc_content_block
  #
  # @param value the value to set the attribute __vc_content_block to.
  #
  # source://view_component//lib/view_component/slot_v2.rb#9
  def __vc_content_block=(_arg0); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot_v2.rb#90
  def html_safe?; end

  # Allow access to public component methods via the wrapper
  #
  # for example
  #
  # calling `header.name` (where `header` is a slot) will call `name`
  # on the `HeaderComponent` instance.
  #
  # Where the component may look like:
  #
  # class MyComponent < ViewComponent::Base
  #   has_one :header, HeaderComponent
  #
  #   class HeaderComponent < ViewComponent::Base
  #     def name
  #       @name
  #     end
  #   end
  # end
  #
  # source://view_component//lib/view_component/slot_v2.rb#85
  def method_missing(symbol, *args, **_arg2, &block); end

  # Used to render the slot content in the template
  #
  # There's currently 3 different values that may be set, that we can render.
  #
  # If the slot renderable is a component, the string class name of a
  # component, or a function that returns a component, we render that
  # component instance, returning the string.
  #
  # If the slot renderable is a function and returns a string, it's
  # set as `@__vc_content` and is returned directly.
  #
  # If there is no slot renderable, we evaluate the block passed to
  # the slot and return it.
  #
  # source://view_component//lib/view_component/slot_v2.rb#28
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/slot_v2.rb#94
  def respond_to_missing?(symbol, include_all = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/slotable.rb#8
module ViewComponent::Slotable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Slotable::ClassMethods

  # Build a Slot instance on a component,
  # exposing it for use inside the
  # component template.
  #
  # slot: Name of Slot, in symbol form
  # **args: Arguments to be passed to Slot initializer
  #
  # For example:
  # <%= render(SlotsComponent.new) do |component| %>
  #   <% component.slot(:footer, class_names: "footer-class") do %>
  #     <p>This is my footer!</p>
  #   <% end %>
  # <% end %>
  #
  # source://view_component//lib/view_component/slotable.rb#106
  def slot(slot_name, **args, &block); end

  module GeneratedClassMethods
    def slots; end
    def slots=(value); end
    def slots?; end
  end

  module GeneratedInstanceMethods
    def slots; end
    def slots=(value); end
    def slots?; end
  end
end

# source://view_component//lib/view_component/slotable.rb#0
module ViewComponent::Slotable::ClassMethods
  # source://view_component//lib/view_component/slotable.rb#83
  def inherited(child); end

  # source://view_component//lib/view_component/slotable.rb#25
  def with_slot(*slot_names, collection: T.unsafe(nil), class_name: T.unsafe(nil)); end
end

# source://view_component//lib/view_component/slotable_v2.rb#7
module ViewComponent::SlotableV2
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::SlotableV2::ClassMethods

  # source://view_component//lib/view_component/slotable_v2.rb#318
  def get_slot(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#333
  def set_slot(slot_name, slot_definition = T.unsafe(nil), *args, **_arg3, &block); end

  module GeneratedClassMethods
    def _warn_on_deprecated_slot_setter; end
    def _warn_on_deprecated_slot_setter=(value); end
    def _warn_on_deprecated_slot_setter?; end
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end

  module GeneratedInstanceMethods
    def _warn_on_deprecated_slot_setter; end
    def _warn_on_deprecated_slot_setter=(value); end
    def _warn_on_deprecated_slot_setter?; end
    def registered_slots; end
    def registered_slots=(value); end
    def registered_slots?; end
  end
end

# source://view_component//lib/view_component/slotable_v2.rb#0
module ViewComponent::SlotableV2::ClassMethods
  # source://view_component//lib/view_component/slotable_v2.rb#224
  def inherited(child); end

  # source://view_component//lib/view_component/slotable_v2.rb#153
  def renders_many(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/slotable_v2.rb#81
  def renders_one(slot_name, callable = T.unsafe(nil)); end

  # source://view_component//lib/view_component/slotable_v2.rb#211
  def slot_type(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#29
  def warn_on_deprecated_slot_setter; end

  private

  # source://view_component//lib/view_component/slotable_v2.rb#235
  def define_slot(slot_name, collection:, callable:); end

  # source://view_component//lib/view_component/slotable_v2.rb#306
  def raise_if_slot_ends_with_question_mark(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#296
  def raise_if_slot_registered(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#231
  def register_slot(slot_name, **kwargs); end

  # source://view_component//lib/view_component/slotable_v2.rb#264
  def validate_plural_slot_name(slot_name); end

  # source://view_component//lib/view_component/slotable_v2.rb#276
  def validate_singular_slot_name(slot_name); end
end

# source://view_component//lib/view_component/slotable_v2.rb#10
ViewComponent::SlotableV2::RESERVED_NAMES = T.let(T.unsafe(nil), Hash)

# source://view_component//lib/view_component/system_test_case.rb#6
class ViewComponent::SystemTestCase < ::ActionDispatch::SystemTestCase
  include ::ViewComponent::TestHelpers
  include ::ViewComponent::SystemTestHelpers

  # source://view_component//lib/view_component/system_test_case.rb#9
  def page; end
end

# source://view_component//lib/view_component/system_test_helpers.rb#4
module ViewComponent::SystemTestHelpers
  include ::Capybara::Minitest::Assertions
  include ::ViewComponent::TestHelpers

  # Returns a block that can be used to visit the path of the inline rendered component.
  #
  # @param fragment [Nokogiri::Fragment] The fragment returned from `render_inline`.
  # @param layout [String] The (optional) layout to use.
  # @return [Proc] A block that can be used to visit the path of the inline rendered component.
  #
  # source://view_component//lib/view_component/system_test_helpers.rb#12
  def with_rendered_component_path(fragment, layout: T.unsafe(nil), &block); end
end

# source://view_component//lib/view_component/template_error.rb#4
class ViewComponent::TemplateError < ::StandardError
  # @return [TemplateError] a new instance of TemplateError
  #
  # source://view_component//lib/view_component/template_error.rb#5
  def initialize(errors); end
end

# source://view_component//lib/view_component/test_case.rb#6
class ViewComponent::TestCase < ::ActiveSupport::TestCase
  include ::Capybara::Minitest::Assertions
  include ::ViewComponent::TestHelpers
end

# source://view_component//lib/view_component/test_helpers.rb#4
module ViewComponent::TestHelpers
  include ::Capybara::Minitest::Assertions

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#203
  def build_controller(klass); end

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#121
  def controller; end

  # source://view_component//lib/view_component/test_helpers.rb#10
  def page; end

  # source://view_component//lib/view_component/test_helpers.rb#14
  def refute_component_rendered; end

  # Execute the given block in the view context (using `instance_exec`).
  # Internally sets `page` to be a `Capybara::Node::Simple`, allowing for
  # Capybara assertions to be used. All arguments are forwarded to the block.
  #
  # ```ruby
  # render_in_view_context(arg1, arg2:) do |arg1, arg2:|
  #   render(MyComponent.new(arg1, arg2))
  # end
  #
  # assert_text("Hello, World!")
  # ```
  #
  # source://view_component//lib/view_component/test_helpers.rb#113
  def render_in_view_context(*args, **_arg1, &block); end

  # Render a component inline. Internally sets `page` to be a `Capybara::Node::Simple`,
  # allowing for Capybara assertions to be used:
  #
  # ```ruby
  # render_inline(MyComponent.new)
  # assert_text("Hello, World!")
  # ```
  #
  # @param component [ViewComponent::Base, ViewComponent::Collection] The instance of the component to be rendered.
  # @return [Nokogiri::HTML]
  #
  # source://view_component//lib/view_component/test_helpers.rb#53
  def render_inline(component, **args, &block); end

  # Render a preview inline. Internally sets `page` to be a `Capybara::Node::Simple`,
  # allowing for Capybara assertions to be used:
  #
  # ```ruby
  # render_preview(:default)
  # assert_text("Hello, World!")
  # ```
  #
  # Note: `#rendered_preview` expects a preview to be defined with the same class
  # name as the calling test, but with `Test` replaced with `Preview`:
  #
  # MyComponentTest -> MyComponentPreview etc.
  #
  # In RSpec, `Preview` is appended to `described_class`.
  #
  # @param name [String] The name of the preview to be rendered.
  # @param from [ViewComponent::Preview] The class of the preview to be rendered.
  # @param params [Hash] Parameters to be passed to the preview.
  # @return [Nokogiri::HTML]
  #
  # source://view_component//lib/view_component/test_helpers.rb#84
  def render_preview(name, from: T.unsafe(nil), params: T.unsafe(nil)); end

  # Returns the result of a render_inline call.
  #
  # @return [String]
  #
  # source://view_component//lib/view_component/test_helpers.rb#37
  def rendered_component; end

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#32
  def rendered_content; end

  # @private
  #
  # source://view_component//lib/view_component/test_helpers.rb#126
  def request; end

  # Set the controller to be used while executing the given block,
  # allowing access to controller-specific methods:
  #
  # ```ruby
  # with_controller_class(UsersController) do
  #   render_inline(MyComponent.new)
  # end
  # ```
  #
  # @param klass [ActionController::Base] The controller to be used.
  #
  # source://view_component//lib/view_component/test_helpers.rb#163
  def with_controller_class(klass); end

  # Set the URL of the current request (such as when using request-dependent path helpers):
  #
  # ```ruby
  # with_request_url("/users/42") do
  #   render_inline(MyComponent.new)
  # end
  # ```
  #
  # @param path [String] The path to set for the current request.
  #
  # source://view_component//lib/view_component/test_helpers.rb#181
  def with_request_url(path); end

  # Set the Action Pack request variant for the given block:
  #
  # ```ruby
  # with_variant(:phone) do
  #   render_inline(MyComponent.new)
  # end
  # ```
  #
  # @param variant [Symbol] The variant to be set for the provided block.
  #
  # source://view_component//lib/view_component/test_helpers.rb#144
  def with_variant(variant); end

  private

  # source://view_component//lib/view_component/test_helpers.rb#209
  def preview_class; end
end

# source://view_component//lib/view_component/translatable.rb#9
module ViewComponent::Translatable
  extend ::ActiveSupport::Concern
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::ViewComponent::Translatable::ClassMethods

  # source://view_component//lib/view_component/translatable.rb#104
  def html_safe_translation(translation); end

  # Exposes .i18n_scope as an instance method
  #
  # source://view_component//lib/view_component/translatable.rb#100
  def i18n_scope; end

  # source://view_component//lib/view_component/translatable.rb#62
  def t(key = T.unsafe(nil), **options); end

  # source://view_component//lib/view_component/translatable.rb#62
  def translate(key = T.unsafe(nil), **options); end

  private

  # source://view_component//lib/view_component/translatable.rb#117
  def html_escape_translation_options!(options); end

  # @return [Boolean]
  #
  # source://view_component//lib/view_component/translatable.rb#125
  def i18n_option?(name); end

  module GeneratedClassMethods
    def i18n_backend; end
    def i18n_backend=(value); end
  end

  module GeneratedInstanceMethods
    def i18n_backend; end
  end
end

# source://view_component//lib/view_component/translatable.rb#0
module ViewComponent::Translatable::ClassMethods
  # source://view_component//lib/view_component/translatable.rb#23
  def build_i18n_backend; end

  # source://view_component//lib/view_component/translatable.rb#19
  def i18n_scope; end
end

# source://view_component//lib/view_component/translatable.rb#12
ViewComponent::Translatable::HTML_SAFE_TRANSLATION_KEY = T.let(T.unsafe(nil), Regexp)

# source://view_component//lib/view_component/translatable.rb#37
class ViewComponent::Translatable::I18nBackend < ::I18n::Backend::Simple
  # @return [I18nBackend] a new instance of I18nBackend
  #
  # source://view_component//lib/view_component/translatable.rb#40
  def initialize(i18n_scope:, load_paths:); end

  # Ensure the Simple backend won't load paths from ::I18n.load_path
  #
  # source://view_component//lib/view_component/translatable.rb#46
  def load_translations; end

  # source://view_component//lib/view_component/translatable.rb#50
  def scope_data(data); end

  # source://view_component//lib/view_component/translatable.rb#57
  def store_translations(locale, data, options = T.unsafe(nil)); end
end

# source://view_component//lib/view_component/translatable.rb#38
ViewComponent::Translatable::I18nBackend::EMPTY_HASH = T.let(T.unsafe(nil), Hash)

# source://view_component//lib/view_component/with_content_helper.rb#4
module ViewComponent::WithContentHelper
  # source://view_component//lib/view_component/with_content_helper.rb#5
  def with_content(value); end
end

class ViewComponentsController < ::Rails::ApplicationController
  include ::ViewComponent::PreviewActions

  private

  # source://actionview/7.0.4.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://activesupport/7.0.4.2/lib/active_support/callbacks.rb#68
    def __callbacks; end

    # source://actionpack/7.0.4.2/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end

class ViewComponentsSystemTestController < ::ActionController::Base
  def system_test_entrypoint; end

  private

  # source://actionview/7.0.4.2/lib/action_view/layouts.rb#328
  def _layout(lookup_context, formats); end

  class << self
    # source://actionpack/7.0.4.2/lib/action_controller/metal.rb#210
    def middleware_stack; end
  end
end
