# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `flipper-redis` gem.
# Please instead update this file by running `bin/tapioca gem flipper-redis`.

# source://flipper-redis//lib/flipper/adapters/redis.rb#5
module Flipper
  # source://forwardable/1.3.2/forwardable.rb#229
  def [](*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def actor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def adapter(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def bool(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def boolean(*args, **_arg1, &block); end

  # source://flipper/0.28.3/lib/flipper.rb#28
  def configuration; end

  # source://flipper/0.28.3/lib/flipper.rb#33
  def configuration=(configuration); end

  # source://flipper/0.28.3/lib/flipper.rb#23
  def configure; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_actor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_group(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_percentage_of_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def disable_percentage_of_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_actor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_group(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_percentage_of_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enable_percentage_of_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def enabled?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def exist?(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def export(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def feature(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def features(*args, **_arg1, &block); end

  # source://flipper/0.28.3/lib/flipper.rb#128
  def group(name); end

  # source://flipper/0.28.3/lib/flipper.rb#115
  def group_exists?(name); end

  # source://flipper/0.28.3/lib/flipper.rb#101
  def group_names; end

  # source://flipper/0.28.3/lib/flipper.rb#94
  def groups; end

  # source://flipper/0.28.3/lib/flipper.rb#133
  def groups_registry; end

  # source://flipper/0.28.3/lib/flipper.rb#138
  def groups_registry=(registry); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def import(*args, **_arg1, &block); end

  # source://flipper/0.28.3/lib/flipper.rb#45
  def instance; end

  # source://flipper/0.28.3/lib/flipper.rb#52
  def instance=(flipper); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoize=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def memoizing?(*args, **_arg1, &block); end

  # source://flipper/0.28.3/lib/flipper.rb#12
  def new(adapter, options = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def percentage_of_actors(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def percentage_of_time(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def preload(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def preload_all(*args, **_arg1, &block); end

  # source://flipper/0.28.3/lib/flipper.rb#85
  def register(name, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def remove(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def sync(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def sync_secret(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def time(*args, **_arg1, &block); end

  # source://flipper/0.28.3/lib/flipper.rb#108
  def unregister_groups; end
end

# source://flipper-redis//lib/flipper/adapters/redis.rb#6
module Flipper::Adapters; end

# source://flipper-redis//lib/flipper/adapters/redis.rb#7
class Flipper::Adapters::Redis
  include ::Flipper::Adapter
  extend ::Flipper::Adapter::ClassMethods

  # Public: Initializes a Redis flipper adapter.
  #
  # client - The Redis client to use.
  # key_prefix - an optional prefix with which to namespace
  #              flipper's Redis keys
  #
  # @return [Redis] a new instance of Redis
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#28
  def initialize(client, key_prefix: T.unsafe(nil)); end

  # Public: Adds a feature to the set of known features.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#40
  def add(feature); end

  # Public: Clears the gate values for a feature.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#61
  def clear(feature); end

  # Public: Disables a gate for a given thing.
  #
  # feature - The Flipper::Feature for the gate.
  # gate - The Flipper::Gate to disable.
  # thing - The Flipper::Type being disabled for the gate.
  #
  # Returns true.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#114
  def disable(feature, gate, thing); end

  # Public: Enables a gate for a given thing.
  #
  # feature - The Flipper::Feature for the gate.
  # gate - The Flipper::Gate to disable.
  # thing - The Flipper::Type being enabled for the gate.
  #
  # Returns true.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#90
  def enable(feature, gate, thing); end

  # Public: The set of known features.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#35
  def features; end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#15
  def features_key; end

  # Public: Gets the values for all gates for a given feature.
  #
  # Returns a Hash of Flipper::Gate#key => value.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#69
  def get(feature); end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#78
  def get_all; end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#74
  def get_multi(features); end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#19
  def key_for(feature_name); end

  # Returns the value of attribute key_prefix.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#13
  def key_prefix; end

  # Public: The name of the adapter.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#11
  def name; end

  # Public: Removes a feature from the set of known features.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#50
  def remove(feature); end

  private

  # Private: Gets a hash of fields => values for the given feature.
  #
  # Returns a Hash of fields => values.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#152
  def doc_for(feature, pipeline: T.unsafe(nil)); end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#156
  def docs_for(features); end

  # Private: Returns a set of values given an array of fields and a gate.
  #
  # Returns a Set of the values enabled for the gate.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#191
  def fields_to_gate_value(fields, gate); end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#145
  def read_feature_keys; end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#136
  def read_many_features(features); end

  # @return [Boolean]
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#132
  def redis_sadd_returns_boolean?; end

  # source://flipper-redis//lib/flipper/adapters/redis.rb#164
  def result_for_feature(feature, doc); end

  # Private: Converts gate and thing to hash key.
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#184
  def to_field(gate, thing); end

  # Private
  #
  # source://flipper-redis//lib/flipper/adapters/redis.rb#199
  def unsupported_data_type(data_type); end
end
