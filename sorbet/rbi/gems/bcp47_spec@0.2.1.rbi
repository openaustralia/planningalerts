# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bcp47_spec` gem.
# Please instead update this file by running `bin/tapioca gem bcp47_spec`.


# source://bcp47_spec//lib/bcp47_spec/parser.rb#3
module BCP47
  class << self
    # @raise [InvalidLanguageTag]
    #
    # source://bcp47_spec//lib/bcp47_spec.rb#16
    def parse(language_tag); end

    # @return [Boolean]
    #
    # source://bcp47_spec//lib/bcp47_spec.rb#12
    def valid?(language_tag); end
  end
end

# source://bcp47_spec//lib/bcp47_spec.rb#7
class BCP47::InvalidLanguageTag < ::StandardError; end

# source://bcp47_spec//lib/bcp47_spec/parser.rb#4
module BCP47::Parser
  class << self
    # source://bcp47_spec//lib/bcp47_spec/parser.rb#109
    def parse(language_tag); end

    private

    # source://bcp47_spec//lib/bcp47_spec/parser.rb#121
    def named_captures(match); end

    # source://bcp47_spec//lib/bcp47_spec/parser.rb#127
    def split_extensions(extensions); end
  end
end

# Simplified check. Not implementing high level privateuse / grandfathered.
# Should replace with a proper check at some point.
#
# source://bcp47_spec//lib/bcp47_spec/parser.rb#83
BCP47::Parser::ALPHANUM = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#92
BCP47::Parser::EXTENSION = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#86
BCP47::Parser::EXTLANG = T.let(T.unsafe(nil), Regexp)

# Ruby .match only keeps the first captured group, so expressions like variants/extensions we need to keep everything
# in one captured group, then break them down in multipe groups separately
#
# source://bcp47_spec//lib/bcp47_spec/parser.rb#97
BCP47::Parser::LANGTAG = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#88
BCP47::Parser::LANGUAGE = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#106
BCP47::Parser::LANGUAGE_TAG = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#93
BCP47::Parser::PRIVATEUSE = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#90
BCP47::Parser::REGION = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#89
BCP47::Parser::SCRIPT = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#84
BCP47::Parser::SINGLETON = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec/parser.rb#91
BCP47::Parser::VARIANT = T.let(T.unsafe(nil), Regexp)

# source://bcp47_spec//lib/bcp47_spec.rb#9
class BCP47::Tag < ::Struct
  # Returns the value of attribute extensions
  #
  # @return [Object] the current value of extensions
  def extensions; end

  # Sets the attribute extensions
  #
  # @param value [Object] the value to set the attribute extensions to.
  # @return [Object] the newly set value
  def extensions=(_); end

  # Returns the value of attribute language
  #
  # @return [Object] the current value of language
  def language; end

  # Sets the attribute language
  #
  # @param value [Object] the value to set the attribute language to.
  # @return [Object] the newly set value
  def language=(_); end

  # Returns the value of attribute private
  #
  # @return [Object] the current value of private
  def private; end

  # Sets the attribute private
  #
  # @param value [Object] the value to set the attribute private to.
  # @return [Object] the newly set value
  def private=(_); end

  # Returns the value of attribute region
  #
  # @return [Object] the current value of region
  def region; end

  # Sets the attribute region
  #
  # @param value [Object] the value to set the attribute region to.
  # @return [Object] the newly set value
  def region=(_); end

  # Returns the value of attribute script
  #
  # @return [Object] the current value of script
  def script; end

  # Sets the attribute script
  #
  # @param value [Object] the value to set the attribute script to.
  # @return [Object] the newly set value
  def script=(_); end

  # Returns the value of attribute variants
  #
  # @return [Object] the current value of variants
  def variants; end

  # Sets the attribute variants
  #
  # @param value [Object] the value to set the attribute variants to.
  # @return [Object] the newly set value
  def variants=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://bcp47_spec//lib/bcp47_spec/version.rb#4
BCP47::VERSION = T.let(T.unsafe(nil), String)
